{- This file was auto-generated from pulsar_api.proto by the proto-lens-protoc program. -}
{-# LANGUAGE ScopedTypeVariables, DataKinds, TypeFamilies, UndecidableInstances, GeneralizedNewtypeDeriving, MultiParamTypeClasses, FlexibleContexts, FlexibleInstances, PatternSynonyms, MagicHash, NoImplicitPrelude, DataKinds, BangPatterns, TypeApplications, OverloadedStrings, DerivingStrategies#-}
{-# OPTIONS_GHC -Wno-unused-imports#-}
{-# OPTIONS_GHC -Wno-duplicate-exports#-}
{-# OPTIONS_GHC -Wno-dodgy-exports#-}
module Proto.PulsarApi (
        AuthData(), AuthMethod(..), AuthMethod(), BaseCommand(),
        BaseCommand'Type(..), BaseCommand'Type(), CommandAck(),
        CommandAck'AckType(..), CommandAck'AckType(),
        CommandAck'ValidationError(..), CommandAck'ValidationError(),
        CommandAckResponse(), CommandActiveConsumerChange(),
        CommandAddPartitionToTxn(), CommandAddPartitionToTxnResponse(),
        CommandAddSubscriptionToTxn(),
        CommandAddSubscriptionToTxnResponse(), CommandAuthChallenge(),
        CommandAuthResponse(), CommandCloseConsumer(),
        CommandCloseProducer(), CommandConnect(), CommandConnected(),
        CommandConsumerStats(), CommandConsumerStatsResponse(),
        CommandEndTxn(), CommandEndTxnOnPartition(),
        CommandEndTxnOnPartitionResponse(), CommandEndTxnOnSubscription(),
        CommandEndTxnOnSubscriptionResponse(), CommandEndTxnResponse(),
        CommandError(), CommandFlow(), CommandGetLastMessageId(),
        CommandGetLastMessageIdResponse(), CommandGetOrCreateSchema(),
        CommandGetOrCreateSchemaResponse(), CommandGetSchema(),
        CommandGetSchemaResponse(), CommandGetTopicsOfNamespace(),
        CommandGetTopicsOfNamespace'Mode(..),
        CommandGetTopicsOfNamespace'Mode(),
        CommandGetTopicsOfNamespaceResponse(), CommandLookupTopic(),
        CommandLookupTopicResponse(),
        CommandLookupTopicResponse'LookupType(..),
        CommandLookupTopicResponse'LookupType(), CommandMessage(),
        CommandNewTxn(), CommandNewTxnResponse(),
        CommandPartitionedTopicMetadata(),
        CommandPartitionedTopicMetadataResponse(),
        CommandPartitionedTopicMetadataResponse'LookupType(..),
        CommandPartitionedTopicMetadataResponse'LookupType(),
        CommandPing(), CommandPong(), CommandProducer(),
        CommandProducerSuccess(), CommandReachedEndOfTopic(),
        CommandRedeliverUnacknowledgedMessages(), CommandSeek(),
        CommandSend(), CommandSendError(), CommandSendReceipt(),
        CommandSubscribe(), CommandSubscribe'InitialPosition(..),
        CommandSubscribe'InitialPosition(), CommandSubscribe'SubType(..),
        CommandSubscribe'SubType(), CommandSuccess(), CommandUnsubscribe(),
        CompressionType(..), CompressionType(), EncryptionKeys(),
        FeatureFlags(), IntRange(), KeyLongValue(), KeySharedMeta(),
        KeySharedMode(..), KeySharedMode(), KeyValue(), MessageIdData(),
        MessageMetadata(), ProtocolVersion(..), ProtocolVersion(),
        Schema(), Schema'Type(..), Schema'Type(), ServerError(..),
        ServerError(), SingleMessageMetadata(), Subscription(),
        TxnAction(..), TxnAction()
    ) where
import qualified Data.ProtoLens.Runtime.Control.DeepSeq as Control.DeepSeq
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Prism as Data.ProtoLens.Prism
import qualified Data.ProtoLens.Runtime.Prelude as Prelude
import qualified Data.ProtoLens.Runtime.Data.Int as Data.Int
import qualified Data.ProtoLens.Runtime.Data.Monoid as Data.Monoid
import qualified Data.ProtoLens.Runtime.Data.Word as Data.Word
import qualified Data.ProtoLens.Runtime.Data.ProtoLens as Data.ProtoLens
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Bytes as Data.ProtoLens.Encoding.Bytes
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Growing as Data.ProtoLens.Encoding.Growing
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Parser.Unsafe as Data.ProtoLens.Encoding.Parser.Unsafe
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Wire as Data.ProtoLens.Encoding.Wire
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Field as Data.ProtoLens.Field
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Message.Enum as Data.ProtoLens.Message.Enum
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Service.Types as Data.ProtoLens.Service.Types
import qualified Data.ProtoLens.Runtime.Lens.Family2 as Lens.Family2
import qualified Data.ProtoLens.Runtime.Lens.Family2.Unchecked as Lens.Family2.Unchecked
import qualified Data.ProtoLens.Runtime.Data.Text as Data.Text
import qualified Data.ProtoLens.Runtime.Data.Map as Data.Map
import qualified Data.ProtoLens.Runtime.Data.ByteString as Data.ByteString
import qualified Data.ProtoLens.Runtime.Data.ByteString.Char8 as Data.ByteString.Char8
import qualified Data.ProtoLens.Runtime.Data.Text.Encoding as Data.Text.Encoding
import qualified Data.ProtoLens.Runtime.Data.Vector as Data.Vector
import qualified Data.ProtoLens.Runtime.Data.Vector.Generic as Data.Vector.Generic
import qualified Data.ProtoLens.Runtime.Data.Vector.Unboxed as Data.Vector.Unboxed
import qualified Data.ProtoLens.Runtime.Text.Read as Text.Read
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.authMethodName' @:: Lens' AuthData Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'authMethodName' @:: Lens' AuthData (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.authData' @:: Lens' AuthData Data.ByteString.ByteString@
         * 'Proto.PulsarApi_Fields.maybe'authData' @:: Lens' AuthData (Prelude.Maybe Data.ByteString.ByteString)@ -}
data AuthData
  = AuthData'_constructor {_AuthData'authMethodName :: !(Prelude.Maybe Data.Text.Text),
                           _AuthData'authData :: !(Prelude.Maybe Data.ByteString.ByteString),
                           _AuthData'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show AuthData where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField AuthData "authMethodName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _AuthData'authMethodName
           (\ x__ y__ -> x__ {_AuthData'authMethodName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField AuthData "maybe'authMethodName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _AuthData'authMethodName
           (\ x__ y__ -> x__ {_AuthData'authMethodName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField AuthData "authData" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _AuthData'authData (\ x__ y__ -> x__ {_AuthData'authData = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField AuthData "maybe'authData" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _AuthData'authData (\ x__ y__ -> x__ {_AuthData'authData = y__}))
        Prelude.id
instance Data.ProtoLens.Message AuthData where
  messageName _ = Data.Text.pack "pulsar.proto.AuthData"
  packedMessageDescriptor _
    = "\n\
      \\bAuthData\DC2(\n\
      \\DLEauth_method_name\CAN\SOH \SOH(\tR\SOauthMethodName\DC2\ESC\n\
      \\tauth_data\CAN\STX \SOH(\fR\bauthData"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        authMethodName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "auth_method_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'authMethodName")) ::
              Data.ProtoLens.FieldDescriptor AuthData
        authData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "auth_data"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'authData")) ::
              Data.ProtoLens.FieldDescriptor AuthData
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, authMethodName__field_descriptor),
           (Data.ProtoLens.Tag 2, authData__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _AuthData'_unknownFields
        (\ x__ y__ -> x__ {_AuthData'_unknownFields = y__})
  defMessage
    = AuthData'_constructor
        {_AuthData'authMethodName = Prelude.Nothing,
         _AuthData'authData = Prelude.Nothing,
         _AuthData'_unknownFields = []}
  parseMessage
    = let
        loop :: AuthData -> Data.ProtoLens.Encoding.Bytes.Parser AuthData
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "auth_method_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"authMethodName") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "auth_data"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"authData") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "AuthData"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'authMethodName") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8
                          _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'authData") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData AuthData where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_AuthData'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_AuthData'authMethodName x__)
                (Control.DeepSeq.deepseq (_AuthData'authData x__) ()))
data AuthMethod
  = AuthMethodNone | AuthMethodYcaV1 | AuthMethodAthens
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum AuthMethod where
  maybeToEnum 0 = Prelude.Just AuthMethodNone
  maybeToEnum 1 = Prelude.Just AuthMethodYcaV1
  maybeToEnum 2 = Prelude.Just AuthMethodAthens
  maybeToEnum _ = Prelude.Nothing
  showEnum AuthMethodNone = "AuthMethodNone"
  showEnum AuthMethodYcaV1 = "AuthMethodYcaV1"
  showEnum AuthMethodAthens = "AuthMethodAthens"
  readEnum k
    | (Prelude.==) k "AuthMethodNone" = Prelude.Just AuthMethodNone
    | (Prelude.==) k "AuthMethodYcaV1" = Prelude.Just AuthMethodYcaV1
    | (Prelude.==) k "AuthMethodAthens" = Prelude.Just AuthMethodAthens
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded AuthMethod where
  minBound = AuthMethodNone
  maxBound = AuthMethodAthens
instance Prelude.Enum AuthMethod where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum AuthMethod: " (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum AuthMethodNone = 0
  fromEnum AuthMethodYcaV1 = 1
  fromEnum AuthMethodAthens = 2
  succ AuthMethodAthens
    = Prelude.error
        "AuthMethod.succ: bad argument AuthMethodAthens. This value would be out of bounds."
  succ AuthMethodNone = AuthMethodYcaV1
  succ AuthMethodYcaV1 = AuthMethodAthens
  pred AuthMethodNone
    = Prelude.error
        "AuthMethod.pred: bad argument AuthMethodNone. This value would be out of bounds."
  pred AuthMethodYcaV1 = AuthMethodNone
  pred AuthMethodAthens = AuthMethodYcaV1
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault AuthMethod where
  fieldDefault = AuthMethodNone
instance Control.DeepSeq.NFData AuthMethod where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.type'' @:: Lens' BaseCommand BaseCommand'Type@
         * 'Proto.PulsarApi_Fields.connect' @:: Lens' BaseCommand CommandConnect@
         * 'Proto.PulsarApi_Fields.maybe'connect' @:: Lens' BaseCommand (Prelude.Maybe CommandConnect)@
         * 'Proto.PulsarApi_Fields.connected' @:: Lens' BaseCommand CommandConnected@
         * 'Proto.PulsarApi_Fields.maybe'connected' @:: Lens' BaseCommand (Prelude.Maybe CommandConnected)@
         * 'Proto.PulsarApi_Fields.subscribe' @:: Lens' BaseCommand CommandSubscribe@
         * 'Proto.PulsarApi_Fields.maybe'subscribe' @:: Lens' BaseCommand (Prelude.Maybe CommandSubscribe)@
         * 'Proto.PulsarApi_Fields.producer' @:: Lens' BaseCommand CommandProducer@
         * 'Proto.PulsarApi_Fields.maybe'producer' @:: Lens' BaseCommand (Prelude.Maybe CommandProducer)@
         * 'Proto.PulsarApi_Fields.send' @:: Lens' BaseCommand CommandSend@
         * 'Proto.PulsarApi_Fields.maybe'send' @:: Lens' BaseCommand (Prelude.Maybe CommandSend)@
         * 'Proto.PulsarApi_Fields.sendReceipt' @:: Lens' BaseCommand CommandSendReceipt@
         * 'Proto.PulsarApi_Fields.maybe'sendReceipt' @:: Lens' BaseCommand (Prelude.Maybe CommandSendReceipt)@
         * 'Proto.PulsarApi_Fields.sendError' @:: Lens' BaseCommand CommandSendError@
         * 'Proto.PulsarApi_Fields.maybe'sendError' @:: Lens' BaseCommand (Prelude.Maybe CommandSendError)@
         * 'Proto.PulsarApi_Fields.message' @:: Lens' BaseCommand CommandMessage@
         * 'Proto.PulsarApi_Fields.maybe'message' @:: Lens' BaseCommand (Prelude.Maybe CommandMessage)@
         * 'Proto.PulsarApi_Fields.ack' @:: Lens' BaseCommand CommandAck@
         * 'Proto.PulsarApi_Fields.maybe'ack' @:: Lens' BaseCommand (Prelude.Maybe CommandAck)@
         * 'Proto.PulsarApi_Fields.flow' @:: Lens' BaseCommand CommandFlow@
         * 'Proto.PulsarApi_Fields.maybe'flow' @:: Lens' BaseCommand (Prelude.Maybe CommandFlow)@
         * 'Proto.PulsarApi_Fields.unsubscribe' @:: Lens' BaseCommand CommandUnsubscribe@
         * 'Proto.PulsarApi_Fields.maybe'unsubscribe' @:: Lens' BaseCommand (Prelude.Maybe CommandUnsubscribe)@
         * 'Proto.PulsarApi_Fields.success' @:: Lens' BaseCommand CommandSuccess@
         * 'Proto.PulsarApi_Fields.maybe'success' @:: Lens' BaseCommand (Prelude.Maybe CommandSuccess)@
         * 'Proto.PulsarApi_Fields.error' @:: Lens' BaseCommand CommandError@
         * 'Proto.PulsarApi_Fields.maybe'error' @:: Lens' BaseCommand (Prelude.Maybe CommandError)@
         * 'Proto.PulsarApi_Fields.closeProducer' @:: Lens' BaseCommand CommandCloseProducer@
         * 'Proto.PulsarApi_Fields.maybe'closeProducer' @:: Lens' BaseCommand (Prelude.Maybe CommandCloseProducer)@
         * 'Proto.PulsarApi_Fields.closeConsumer' @:: Lens' BaseCommand CommandCloseConsumer@
         * 'Proto.PulsarApi_Fields.maybe'closeConsumer' @:: Lens' BaseCommand (Prelude.Maybe CommandCloseConsumer)@
         * 'Proto.PulsarApi_Fields.producerSuccess' @:: Lens' BaseCommand CommandProducerSuccess@
         * 'Proto.PulsarApi_Fields.maybe'producerSuccess' @:: Lens' BaseCommand (Prelude.Maybe CommandProducerSuccess)@
         * 'Proto.PulsarApi_Fields.ping' @:: Lens' BaseCommand CommandPing@
         * 'Proto.PulsarApi_Fields.maybe'ping' @:: Lens' BaseCommand (Prelude.Maybe CommandPing)@
         * 'Proto.PulsarApi_Fields.pong' @:: Lens' BaseCommand CommandPong@
         * 'Proto.PulsarApi_Fields.maybe'pong' @:: Lens' BaseCommand (Prelude.Maybe CommandPong)@
         * 'Proto.PulsarApi_Fields.redeliverUnacknowledgedMessages' @:: Lens' BaseCommand CommandRedeliverUnacknowledgedMessages@
         * 'Proto.PulsarApi_Fields.maybe'redeliverUnacknowledgedMessages' @:: Lens' BaseCommand (Prelude.Maybe CommandRedeliverUnacknowledgedMessages)@
         * 'Proto.PulsarApi_Fields.partitionMetadata' @:: Lens' BaseCommand CommandPartitionedTopicMetadata@
         * 'Proto.PulsarApi_Fields.maybe'partitionMetadata' @:: Lens' BaseCommand (Prelude.Maybe CommandPartitionedTopicMetadata)@
         * 'Proto.PulsarApi_Fields.partitionMetadataResponse' @:: Lens' BaseCommand CommandPartitionedTopicMetadataResponse@
         * 'Proto.PulsarApi_Fields.maybe'partitionMetadataResponse' @:: Lens' BaseCommand (Prelude.Maybe CommandPartitionedTopicMetadataResponse)@
         * 'Proto.PulsarApi_Fields.lookupTopic' @:: Lens' BaseCommand CommandLookupTopic@
         * 'Proto.PulsarApi_Fields.maybe'lookupTopic' @:: Lens' BaseCommand (Prelude.Maybe CommandLookupTopic)@
         * 'Proto.PulsarApi_Fields.lookupTopicResponse' @:: Lens' BaseCommand CommandLookupTopicResponse@
         * 'Proto.PulsarApi_Fields.maybe'lookupTopicResponse' @:: Lens' BaseCommand (Prelude.Maybe CommandLookupTopicResponse)@
         * 'Proto.PulsarApi_Fields.consumerStats' @:: Lens' BaseCommand CommandConsumerStats@
         * 'Proto.PulsarApi_Fields.maybe'consumerStats' @:: Lens' BaseCommand (Prelude.Maybe CommandConsumerStats)@
         * 'Proto.PulsarApi_Fields.consumerStatsResponse' @:: Lens' BaseCommand CommandConsumerStatsResponse@
         * 'Proto.PulsarApi_Fields.maybe'consumerStatsResponse' @:: Lens' BaseCommand (Prelude.Maybe CommandConsumerStatsResponse)@
         * 'Proto.PulsarApi_Fields.reachedEndOfTopic' @:: Lens' BaseCommand CommandReachedEndOfTopic@
         * 'Proto.PulsarApi_Fields.maybe'reachedEndOfTopic' @:: Lens' BaseCommand (Prelude.Maybe CommandReachedEndOfTopic)@
         * 'Proto.PulsarApi_Fields.seek' @:: Lens' BaseCommand CommandSeek@
         * 'Proto.PulsarApi_Fields.maybe'seek' @:: Lens' BaseCommand (Prelude.Maybe CommandSeek)@
         * 'Proto.PulsarApi_Fields.getLastMessageId' @:: Lens' BaseCommand CommandGetLastMessageId@
         * 'Proto.PulsarApi_Fields.maybe'getLastMessageId' @:: Lens' BaseCommand (Prelude.Maybe CommandGetLastMessageId)@
         * 'Proto.PulsarApi_Fields.getLastMessageIdResponse' @:: Lens' BaseCommand CommandGetLastMessageIdResponse@
         * 'Proto.PulsarApi_Fields.maybe'getLastMessageIdResponse' @:: Lens' BaseCommand (Prelude.Maybe CommandGetLastMessageIdResponse)@
         * 'Proto.PulsarApi_Fields.activeConsumerChange' @:: Lens' BaseCommand CommandActiveConsumerChange@
         * 'Proto.PulsarApi_Fields.maybe'activeConsumerChange' @:: Lens' BaseCommand (Prelude.Maybe CommandActiveConsumerChange)@
         * 'Proto.PulsarApi_Fields.getTopicsOfNamespace' @:: Lens' BaseCommand CommandGetTopicsOfNamespace@
         * 'Proto.PulsarApi_Fields.maybe'getTopicsOfNamespace' @:: Lens' BaseCommand (Prelude.Maybe CommandGetTopicsOfNamespace)@
         * 'Proto.PulsarApi_Fields.getTopicsOfNamespaceResponse' @:: Lens' BaseCommand CommandGetTopicsOfNamespaceResponse@
         * 'Proto.PulsarApi_Fields.maybe'getTopicsOfNamespaceResponse' @:: Lens' BaseCommand (Prelude.Maybe CommandGetTopicsOfNamespaceResponse)@
         * 'Proto.PulsarApi_Fields.getSchema' @:: Lens' BaseCommand CommandGetSchema@
         * 'Proto.PulsarApi_Fields.maybe'getSchema' @:: Lens' BaseCommand (Prelude.Maybe CommandGetSchema)@
         * 'Proto.PulsarApi_Fields.getSchemaResponse' @:: Lens' BaseCommand CommandGetSchemaResponse@
         * 'Proto.PulsarApi_Fields.maybe'getSchemaResponse' @:: Lens' BaseCommand (Prelude.Maybe CommandGetSchemaResponse)@
         * 'Proto.PulsarApi_Fields.authChallenge' @:: Lens' BaseCommand CommandAuthChallenge@
         * 'Proto.PulsarApi_Fields.maybe'authChallenge' @:: Lens' BaseCommand (Prelude.Maybe CommandAuthChallenge)@
         * 'Proto.PulsarApi_Fields.authResponse' @:: Lens' BaseCommand CommandAuthResponse@
         * 'Proto.PulsarApi_Fields.maybe'authResponse' @:: Lens' BaseCommand (Prelude.Maybe CommandAuthResponse)@
         * 'Proto.PulsarApi_Fields.ackResponse' @:: Lens' BaseCommand CommandAckResponse@
         * 'Proto.PulsarApi_Fields.maybe'ackResponse' @:: Lens' BaseCommand (Prelude.Maybe CommandAckResponse)@
         * 'Proto.PulsarApi_Fields.getOrCreateSchema' @:: Lens' BaseCommand CommandGetOrCreateSchema@
         * 'Proto.PulsarApi_Fields.maybe'getOrCreateSchema' @:: Lens' BaseCommand (Prelude.Maybe CommandGetOrCreateSchema)@
         * 'Proto.PulsarApi_Fields.getOrCreateSchemaResponse' @:: Lens' BaseCommand CommandGetOrCreateSchemaResponse@
         * 'Proto.PulsarApi_Fields.maybe'getOrCreateSchemaResponse' @:: Lens' BaseCommand (Prelude.Maybe CommandGetOrCreateSchemaResponse)@
         * 'Proto.PulsarApi_Fields.newTxn' @:: Lens' BaseCommand CommandNewTxn@
         * 'Proto.PulsarApi_Fields.maybe'newTxn' @:: Lens' BaseCommand (Prelude.Maybe CommandNewTxn)@
         * 'Proto.PulsarApi_Fields.newTxnResponse' @:: Lens' BaseCommand CommandNewTxnResponse@
         * 'Proto.PulsarApi_Fields.maybe'newTxnResponse' @:: Lens' BaseCommand (Prelude.Maybe CommandNewTxnResponse)@
         * 'Proto.PulsarApi_Fields.addPartitionToTxn' @:: Lens' BaseCommand CommandAddPartitionToTxn@
         * 'Proto.PulsarApi_Fields.maybe'addPartitionToTxn' @:: Lens' BaseCommand (Prelude.Maybe CommandAddPartitionToTxn)@
         * 'Proto.PulsarApi_Fields.addPartitionToTxnResponse' @:: Lens' BaseCommand CommandAddPartitionToTxnResponse@
         * 'Proto.PulsarApi_Fields.maybe'addPartitionToTxnResponse' @:: Lens' BaseCommand (Prelude.Maybe CommandAddPartitionToTxnResponse)@
         * 'Proto.PulsarApi_Fields.addSubscriptionToTxn' @:: Lens' BaseCommand CommandAddSubscriptionToTxn@
         * 'Proto.PulsarApi_Fields.maybe'addSubscriptionToTxn' @:: Lens' BaseCommand (Prelude.Maybe CommandAddSubscriptionToTxn)@
         * 'Proto.PulsarApi_Fields.addSubscriptionToTxnResponse' @:: Lens' BaseCommand CommandAddSubscriptionToTxnResponse@
         * 'Proto.PulsarApi_Fields.maybe'addSubscriptionToTxnResponse' @:: Lens' BaseCommand (Prelude.Maybe CommandAddSubscriptionToTxnResponse)@
         * 'Proto.PulsarApi_Fields.endTxn' @:: Lens' BaseCommand CommandEndTxn@
         * 'Proto.PulsarApi_Fields.maybe'endTxn' @:: Lens' BaseCommand (Prelude.Maybe CommandEndTxn)@
         * 'Proto.PulsarApi_Fields.endTxnResponse' @:: Lens' BaseCommand CommandEndTxnResponse@
         * 'Proto.PulsarApi_Fields.maybe'endTxnResponse' @:: Lens' BaseCommand (Prelude.Maybe CommandEndTxnResponse)@
         * 'Proto.PulsarApi_Fields.endTxnOnPartition' @:: Lens' BaseCommand CommandEndTxnOnPartition@
         * 'Proto.PulsarApi_Fields.maybe'endTxnOnPartition' @:: Lens' BaseCommand (Prelude.Maybe CommandEndTxnOnPartition)@
         * 'Proto.PulsarApi_Fields.endTxnOnPartitionResponse' @:: Lens' BaseCommand CommandEndTxnOnPartitionResponse@
         * 'Proto.PulsarApi_Fields.maybe'endTxnOnPartitionResponse' @:: Lens' BaseCommand (Prelude.Maybe CommandEndTxnOnPartitionResponse)@
         * 'Proto.PulsarApi_Fields.endTxnOnSubscription' @:: Lens' BaseCommand CommandEndTxnOnSubscription@
         * 'Proto.PulsarApi_Fields.maybe'endTxnOnSubscription' @:: Lens' BaseCommand (Prelude.Maybe CommandEndTxnOnSubscription)@
         * 'Proto.PulsarApi_Fields.endTxnOnSubscriptionResponse' @:: Lens' BaseCommand CommandEndTxnOnSubscriptionResponse@
         * 'Proto.PulsarApi_Fields.maybe'endTxnOnSubscriptionResponse' @:: Lens' BaseCommand (Prelude.Maybe CommandEndTxnOnSubscriptionResponse)@ -}
data BaseCommand
  = BaseCommand'_constructor {_BaseCommand'type' :: !BaseCommand'Type,
                              _BaseCommand'connect :: !(Prelude.Maybe CommandConnect),
                              _BaseCommand'connected :: !(Prelude.Maybe CommandConnected),
                              _BaseCommand'subscribe :: !(Prelude.Maybe CommandSubscribe),
                              _BaseCommand'producer :: !(Prelude.Maybe CommandProducer),
                              _BaseCommand'send :: !(Prelude.Maybe CommandSend),
                              _BaseCommand'sendReceipt :: !(Prelude.Maybe CommandSendReceipt),
                              _BaseCommand'sendError :: !(Prelude.Maybe CommandSendError),
                              _BaseCommand'message :: !(Prelude.Maybe CommandMessage),
                              _BaseCommand'ack :: !(Prelude.Maybe CommandAck),
                              _BaseCommand'flow :: !(Prelude.Maybe CommandFlow),
                              _BaseCommand'unsubscribe :: !(Prelude.Maybe CommandUnsubscribe),
                              _BaseCommand'success :: !(Prelude.Maybe CommandSuccess),
                              _BaseCommand'error :: !(Prelude.Maybe CommandError),
                              _BaseCommand'closeProducer :: !(Prelude.Maybe CommandCloseProducer),
                              _BaseCommand'closeConsumer :: !(Prelude.Maybe CommandCloseConsumer),
                              _BaseCommand'producerSuccess :: !(Prelude.Maybe CommandProducerSuccess),
                              _BaseCommand'ping :: !(Prelude.Maybe CommandPing),
                              _BaseCommand'pong :: !(Prelude.Maybe CommandPong),
                              _BaseCommand'redeliverUnacknowledgedMessages :: !(Prelude.Maybe CommandRedeliverUnacknowledgedMessages),
                              _BaseCommand'partitionMetadata :: !(Prelude.Maybe CommandPartitionedTopicMetadata),
                              _BaseCommand'partitionMetadataResponse :: !(Prelude.Maybe CommandPartitionedTopicMetadataResponse),
                              _BaseCommand'lookupTopic :: !(Prelude.Maybe CommandLookupTopic),
                              _BaseCommand'lookupTopicResponse :: !(Prelude.Maybe CommandLookupTopicResponse),
                              _BaseCommand'consumerStats :: !(Prelude.Maybe CommandConsumerStats),
                              _BaseCommand'consumerStatsResponse :: !(Prelude.Maybe CommandConsumerStatsResponse),
                              _BaseCommand'reachedEndOfTopic :: !(Prelude.Maybe CommandReachedEndOfTopic),
                              _BaseCommand'seek :: !(Prelude.Maybe CommandSeek),
                              _BaseCommand'getLastMessageId :: !(Prelude.Maybe CommandGetLastMessageId),
                              _BaseCommand'getLastMessageIdResponse :: !(Prelude.Maybe CommandGetLastMessageIdResponse),
                              _BaseCommand'activeConsumerChange :: !(Prelude.Maybe CommandActiveConsumerChange),
                              _BaseCommand'getTopicsOfNamespace :: !(Prelude.Maybe CommandGetTopicsOfNamespace),
                              _BaseCommand'getTopicsOfNamespaceResponse :: !(Prelude.Maybe CommandGetTopicsOfNamespaceResponse),
                              _BaseCommand'getSchema :: !(Prelude.Maybe CommandGetSchema),
                              _BaseCommand'getSchemaResponse :: !(Prelude.Maybe CommandGetSchemaResponse),
                              _BaseCommand'authChallenge :: !(Prelude.Maybe CommandAuthChallenge),
                              _BaseCommand'authResponse :: !(Prelude.Maybe CommandAuthResponse),
                              _BaseCommand'ackResponse :: !(Prelude.Maybe CommandAckResponse),
                              _BaseCommand'getOrCreateSchema :: !(Prelude.Maybe CommandGetOrCreateSchema),
                              _BaseCommand'getOrCreateSchemaResponse :: !(Prelude.Maybe CommandGetOrCreateSchemaResponse),
                              _BaseCommand'newTxn :: !(Prelude.Maybe CommandNewTxn),
                              _BaseCommand'newTxnResponse :: !(Prelude.Maybe CommandNewTxnResponse),
                              _BaseCommand'addPartitionToTxn :: !(Prelude.Maybe CommandAddPartitionToTxn),
                              _BaseCommand'addPartitionToTxnResponse :: !(Prelude.Maybe CommandAddPartitionToTxnResponse),
                              _BaseCommand'addSubscriptionToTxn :: !(Prelude.Maybe CommandAddSubscriptionToTxn),
                              _BaseCommand'addSubscriptionToTxnResponse :: !(Prelude.Maybe CommandAddSubscriptionToTxnResponse),
                              _BaseCommand'endTxn :: !(Prelude.Maybe CommandEndTxn),
                              _BaseCommand'endTxnResponse :: !(Prelude.Maybe CommandEndTxnResponse),
                              _BaseCommand'endTxnOnPartition :: !(Prelude.Maybe CommandEndTxnOnPartition),
                              _BaseCommand'endTxnOnPartitionResponse :: !(Prelude.Maybe CommandEndTxnOnPartitionResponse),
                              _BaseCommand'endTxnOnSubscription :: !(Prelude.Maybe CommandEndTxnOnSubscription),
                              _BaseCommand'endTxnOnSubscriptionResponse :: !(Prelude.Maybe CommandEndTxnOnSubscriptionResponse),
                              _BaseCommand'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show BaseCommand where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField BaseCommand "type'" BaseCommand'Type where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'type' (\ x__ y__ -> x__ {_BaseCommand'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "connect" CommandConnect where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'connect
           (\ x__ y__ -> x__ {_BaseCommand'connect = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'connect" (Prelude.Maybe CommandConnect) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'connect
           (\ x__ y__ -> x__ {_BaseCommand'connect = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "connected" CommandConnected where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'connected
           (\ x__ y__ -> x__ {_BaseCommand'connected = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'connected" (Prelude.Maybe CommandConnected) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'connected
           (\ x__ y__ -> x__ {_BaseCommand'connected = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "subscribe" CommandSubscribe where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'subscribe
           (\ x__ y__ -> x__ {_BaseCommand'subscribe = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'subscribe" (Prelude.Maybe CommandSubscribe) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'subscribe
           (\ x__ y__ -> x__ {_BaseCommand'subscribe = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "producer" CommandProducer where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'producer
           (\ x__ y__ -> x__ {_BaseCommand'producer = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'producer" (Prelude.Maybe CommandProducer) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'producer
           (\ x__ y__ -> x__ {_BaseCommand'producer = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "send" CommandSend where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'send (\ x__ y__ -> x__ {_BaseCommand'send = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'send" (Prelude.Maybe CommandSend) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'send (\ x__ y__ -> x__ {_BaseCommand'send = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "sendReceipt" CommandSendReceipt where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'sendReceipt
           (\ x__ y__ -> x__ {_BaseCommand'sendReceipt = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'sendReceipt" (Prelude.Maybe CommandSendReceipt) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'sendReceipt
           (\ x__ y__ -> x__ {_BaseCommand'sendReceipt = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "sendError" CommandSendError where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'sendError
           (\ x__ y__ -> x__ {_BaseCommand'sendError = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'sendError" (Prelude.Maybe CommandSendError) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'sendError
           (\ x__ y__ -> x__ {_BaseCommand'sendError = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "message" CommandMessage where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'message
           (\ x__ y__ -> x__ {_BaseCommand'message = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'message" (Prelude.Maybe CommandMessage) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'message
           (\ x__ y__ -> x__ {_BaseCommand'message = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "ack" CommandAck where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'ack (\ x__ y__ -> x__ {_BaseCommand'ack = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'ack" (Prelude.Maybe CommandAck) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'ack (\ x__ y__ -> x__ {_BaseCommand'ack = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "flow" CommandFlow where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'flow (\ x__ y__ -> x__ {_BaseCommand'flow = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'flow" (Prelude.Maybe CommandFlow) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'flow (\ x__ y__ -> x__ {_BaseCommand'flow = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "unsubscribe" CommandUnsubscribe where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'unsubscribe
           (\ x__ y__ -> x__ {_BaseCommand'unsubscribe = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'unsubscribe" (Prelude.Maybe CommandUnsubscribe) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'unsubscribe
           (\ x__ y__ -> x__ {_BaseCommand'unsubscribe = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "success" CommandSuccess where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'success
           (\ x__ y__ -> x__ {_BaseCommand'success = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'success" (Prelude.Maybe CommandSuccess) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'success
           (\ x__ y__ -> x__ {_BaseCommand'success = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "error" CommandError where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'error (\ x__ y__ -> x__ {_BaseCommand'error = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'error" (Prelude.Maybe CommandError) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'error (\ x__ y__ -> x__ {_BaseCommand'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "closeProducer" CommandCloseProducer where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'closeProducer
           (\ x__ y__ -> x__ {_BaseCommand'closeProducer = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'closeProducer" (Prelude.Maybe CommandCloseProducer) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'closeProducer
           (\ x__ y__ -> x__ {_BaseCommand'closeProducer = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "closeConsumer" CommandCloseConsumer where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'closeConsumer
           (\ x__ y__ -> x__ {_BaseCommand'closeConsumer = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'closeConsumer" (Prelude.Maybe CommandCloseConsumer) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'closeConsumer
           (\ x__ y__ -> x__ {_BaseCommand'closeConsumer = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "producerSuccess" CommandProducerSuccess where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'producerSuccess
           (\ x__ y__ -> x__ {_BaseCommand'producerSuccess = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'producerSuccess" (Prelude.Maybe CommandProducerSuccess) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'producerSuccess
           (\ x__ y__ -> x__ {_BaseCommand'producerSuccess = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "ping" CommandPing where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'ping (\ x__ y__ -> x__ {_BaseCommand'ping = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'ping" (Prelude.Maybe CommandPing) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'ping (\ x__ y__ -> x__ {_BaseCommand'ping = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "pong" CommandPong where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'pong (\ x__ y__ -> x__ {_BaseCommand'pong = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'pong" (Prelude.Maybe CommandPong) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'pong (\ x__ y__ -> x__ {_BaseCommand'pong = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "redeliverUnacknowledgedMessages" CommandRedeliverUnacknowledgedMessages where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'redeliverUnacknowledgedMessages
           (\ x__ y__
              -> x__ {_BaseCommand'redeliverUnacknowledgedMessages = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'redeliverUnacknowledgedMessages" (Prelude.Maybe CommandRedeliverUnacknowledgedMessages) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'redeliverUnacknowledgedMessages
           (\ x__ y__
              -> x__ {_BaseCommand'redeliverUnacknowledgedMessages = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "partitionMetadata" CommandPartitionedTopicMetadata where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'partitionMetadata
           (\ x__ y__ -> x__ {_BaseCommand'partitionMetadata = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'partitionMetadata" (Prelude.Maybe CommandPartitionedTopicMetadata) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'partitionMetadata
           (\ x__ y__ -> x__ {_BaseCommand'partitionMetadata = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "partitionMetadataResponse" CommandPartitionedTopicMetadataResponse where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'partitionMetadataResponse
           (\ x__ y__ -> x__ {_BaseCommand'partitionMetadataResponse = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'partitionMetadataResponse" (Prelude.Maybe CommandPartitionedTopicMetadataResponse) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'partitionMetadataResponse
           (\ x__ y__ -> x__ {_BaseCommand'partitionMetadataResponse = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "lookupTopic" CommandLookupTopic where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'lookupTopic
           (\ x__ y__ -> x__ {_BaseCommand'lookupTopic = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'lookupTopic" (Prelude.Maybe CommandLookupTopic) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'lookupTopic
           (\ x__ y__ -> x__ {_BaseCommand'lookupTopic = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "lookupTopicResponse" CommandLookupTopicResponse where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'lookupTopicResponse
           (\ x__ y__ -> x__ {_BaseCommand'lookupTopicResponse = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'lookupTopicResponse" (Prelude.Maybe CommandLookupTopicResponse) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'lookupTopicResponse
           (\ x__ y__ -> x__ {_BaseCommand'lookupTopicResponse = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "consumerStats" CommandConsumerStats where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'consumerStats
           (\ x__ y__ -> x__ {_BaseCommand'consumerStats = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'consumerStats" (Prelude.Maybe CommandConsumerStats) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'consumerStats
           (\ x__ y__ -> x__ {_BaseCommand'consumerStats = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "consumerStatsResponse" CommandConsumerStatsResponse where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'consumerStatsResponse
           (\ x__ y__ -> x__ {_BaseCommand'consumerStatsResponse = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'consumerStatsResponse" (Prelude.Maybe CommandConsumerStatsResponse) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'consumerStatsResponse
           (\ x__ y__ -> x__ {_BaseCommand'consumerStatsResponse = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "reachedEndOfTopic" CommandReachedEndOfTopic where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'reachedEndOfTopic
           (\ x__ y__ -> x__ {_BaseCommand'reachedEndOfTopic = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'reachedEndOfTopic" (Prelude.Maybe CommandReachedEndOfTopic) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'reachedEndOfTopic
           (\ x__ y__ -> x__ {_BaseCommand'reachedEndOfTopic = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "seek" CommandSeek where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'seek (\ x__ y__ -> x__ {_BaseCommand'seek = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'seek" (Prelude.Maybe CommandSeek) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'seek (\ x__ y__ -> x__ {_BaseCommand'seek = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "getLastMessageId" CommandGetLastMessageId where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'getLastMessageId
           (\ x__ y__ -> x__ {_BaseCommand'getLastMessageId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'getLastMessageId" (Prelude.Maybe CommandGetLastMessageId) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'getLastMessageId
           (\ x__ y__ -> x__ {_BaseCommand'getLastMessageId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "getLastMessageIdResponse" CommandGetLastMessageIdResponse where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'getLastMessageIdResponse
           (\ x__ y__ -> x__ {_BaseCommand'getLastMessageIdResponse = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'getLastMessageIdResponse" (Prelude.Maybe CommandGetLastMessageIdResponse) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'getLastMessageIdResponse
           (\ x__ y__ -> x__ {_BaseCommand'getLastMessageIdResponse = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "activeConsumerChange" CommandActiveConsumerChange where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'activeConsumerChange
           (\ x__ y__ -> x__ {_BaseCommand'activeConsumerChange = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'activeConsumerChange" (Prelude.Maybe CommandActiveConsumerChange) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'activeConsumerChange
           (\ x__ y__ -> x__ {_BaseCommand'activeConsumerChange = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "getTopicsOfNamespace" CommandGetTopicsOfNamespace where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'getTopicsOfNamespace
           (\ x__ y__ -> x__ {_BaseCommand'getTopicsOfNamespace = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'getTopicsOfNamespace" (Prelude.Maybe CommandGetTopicsOfNamespace) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'getTopicsOfNamespace
           (\ x__ y__ -> x__ {_BaseCommand'getTopicsOfNamespace = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "getTopicsOfNamespaceResponse" CommandGetTopicsOfNamespaceResponse where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'getTopicsOfNamespaceResponse
           (\ x__ y__
              -> x__ {_BaseCommand'getTopicsOfNamespaceResponse = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'getTopicsOfNamespaceResponse" (Prelude.Maybe CommandGetTopicsOfNamespaceResponse) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'getTopicsOfNamespaceResponse
           (\ x__ y__
              -> x__ {_BaseCommand'getTopicsOfNamespaceResponse = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "getSchema" CommandGetSchema where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'getSchema
           (\ x__ y__ -> x__ {_BaseCommand'getSchema = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'getSchema" (Prelude.Maybe CommandGetSchema) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'getSchema
           (\ x__ y__ -> x__ {_BaseCommand'getSchema = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "getSchemaResponse" CommandGetSchemaResponse where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'getSchemaResponse
           (\ x__ y__ -> x__ {_BaseCommand'getSchemaResponse = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'getSchemaResponse" (Prelude.Maybe CommandGetSchemaResponse) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'getSchemaResponse
           (\ x__ y__ -> x__ {_BaseCommand'getSchemaResponse = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "authChallenge" CommandAuthChallenge where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'authChallenge
           (\ x__ y__ -> x__ {_BaseCommand'authChallenge = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'authChallenge" (Prelude.Maybe CommandAuthChallenge) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'authChallenge
           (\ x__ y__ -> x__ {_BaseCommand'authChallenge = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "authResponse" CommandAuthResponse where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'authResponse
           (\ x__ y__ -> x__ {_BaseCommand'authResponse = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'authResponse" (Prelude.Maybe CommandAuthResponse) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'authResponse
           (\ x__ y__ -> x__ {_BaseCommand'authResponse = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "ackResponse" CommandAckResponse where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'ackResponse
           (\ x__ y__ -> x__ {_BaseCommand'ackResponse = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'ackResponse" (Prelude.Maybe CommandAckResponse) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'ackResponse
           (\ x__ y__ -> x__ {_BaseCommand'ackResponse = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "getOrCreateSchema" CommandGetOrCreateSchema where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'getOrCreateSchema
           (\ x__ y__ -> x__ {_BaseCommand'getOrCreateSchema = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'getOrCreateSchema" (Prelude.Maybe CommandGetOrCreateSchema) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'getOrCreateSchema
           (\ x__ y__ -> x__ {_BaseCommand'getOrCreateSchema = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "getOrCreateSchemaResponse" CommandGetOrCreateSchemaResponse where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'getOrCreateSchemaResponse
           (\ x__ y__ -> x__ {_BaseCommand'getOrCreateSchemaResponse = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'getOrCreateSchemaResponse" (Prelude.Maybe CommandGetOrCreateSchemaResponse) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'getOrCreateSchemaResponse
           (\ x__ y__ -> x__ {_BaseCommand'getOrCreateSchemaResponse = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "newTxn" CommandNewTxn where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'newTxn (\ x__ y__ -> x__ {_BaseCommand'newTxn = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'newTxn" (Prelude.Maybe CommandNewTxn) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'newTxn (\ x__ y__ -> x__ {_BaseCommand'newTxn = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "newTxnResponse" CommandNewTxnResponse where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'newTxnResponse
           (\ x__ y__ -> x__ {_BaseCommand'newTxnResponse = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'newTxnResponse" (Prelude.Maybe CommandNewTxnResponse) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'newTxnResponse
           (\ x__ y__ -> x__ {_BaseCommand'newTxnResponse = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "addPartitionToTxn" CommandAddPartitionToTxn where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'addPartitionToTxn
           (\ x__ y__ -> x__ {_BaseCommand'addPartitionToTxn = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'addPartitionToTxn" (Prelude.Maybe CommandAddPartitionToTxn) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'addPartitionToTxn
           (\ x__ y__ -> x__ {_BaseCommand'addPartitionToTxn = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "addPartitionToTxnResponse" CommandAddPartitionToTxnResponse where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'addPartitionToTxnResponse
           (\ x__ y__ -> x__ {_BaseCommand'addPartitionToTxnResponse = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'addPartitionToTxnResponse" (Prelude.Maybe CommandAddPartitionToTxnResponse) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'addPartitionToTxnResponse
           (\ x__ y__ -> x__ {_BaseCommand'addPartitionToTxnResponse = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "addSubscriptionToTxn" CommandAddSubscriptionToTxn where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'addSubscriptionToTxn
           (\ x__ y__ -> x__ {_BaseCommand'addSubscriptionToTxn = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'addSubscriptionToTxn" (Prelude.Maybe CommandAddSubscriptionToTxn) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'addSubscriptionToTxn
           (\ x__ y__ -> x__ {_BaseCommand'addSubscriptionToTxn = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "addSubscriptionToTxnResponse" CommandAddSubscriptionToTxnResponse where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'addSubscriptionToTxnResponse
           (\ x__ y__
              -> x__ {_BaseCommand'addSubscriptionToTxnResponse = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'addSubscriptionToTxnResponse" (Prelude.Maybe CommandAddSubscriptionToTxnResponse) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'addSubscriptionToTxnResponse
           (\ x__ y__
              -> x__ {_BaseCommand'addSubscriptionToTxnResponse = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "endTxn" CommandEndTxn where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'endTxn (\ x__ y__ -> x__ {_BaseCommand'endTxn = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'endTxn" (Prelude.Maybe CommandEndTxn) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'endTxn (\ x__ y__ -> x__ {_BaseCommand'endTxn = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "endTxnResponse" CommandEndTxnResponse where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'endTxnResponse
           (\ x__ y__ -> x__ {_BaseCommand'endTxnResponse = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'endTxnResponse" (Prelude.Maybe CommandEndTxnResponse) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'endTxnResponse
           (\ x__ y__ -> x__ {_BaseCommand'endTxnResponse = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "endTxnOnPartition" CommandEndTxnOnPartition where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'endTxnOnPartition
           (\ x__ y__ -> x__ {_BaseCommand'endTxnOnPartition = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'endTxnOnPartition" (Prelude.Maybe CommandEndTxnOnPartition) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'endTxnOnPartition
           (\ x__ y__ -> x__ {_BaseCommand'endTxnOnPartition = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "endTxnOnPartitionResponse" CommandEndTxnOnPartitionResponse where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'endTxnOnPartitionResponse
           (\ x__ y__ -> x__ {_BaseCommand'endTxnOnPartitionResponse = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'endTxnOnPartitionResponse" (Prelude.Maybe CommandEndTxnOnPartitionResponse) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'endTxnOnPartitionResponse
           (\ x__ y__ -> x__ {_BaseCommand'endTxnOnPartitionResponse = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "endTxnOnSubscription" CommandEndTxnOnSubscription where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'endTxnOnSubscription
           (\ x__ y__ -> x__ {_BaseCommand'endTxnOnSubscription = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'endTxnOnSubscription" (Prelude.Maybe CommandEndTxnOnSubscription) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'endTxnOnSubscription
           (\ x__ y__ -> x__ {_BaseCommand'endTxnOnSubscription = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField BaseCommand "endTxnOnSubscriptionResponse" CommandEndTxnOnSubscriptionResponse where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'endTxnOnSubscriptionResponse
           (\ x__ y__
              -> x__ {_BaseCommand'endTxnOnSubscriptionResponse = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField BaseCommand "maybe'endTxnOnSubscriptionResponse" (Prelude.Maybe CommandEndTxnOnSubscriptionResponse) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _BaseCommand'endTxnOnSubscriptionResponse
           (\ x__ y__
              -> x__ {_BaseCommand'endTxnOnSubscriptionResponse = y__}))
        Prelude.id
instance Data.ProtoLens.Message BaseCommand where
  messageName _ = Data.Text.pack "pulsar.proto.BaseCommand"
  packedMessageDescriptor _
    = "\n\
      \\vBaseCommand\DC22\n\
      \\EOTtype\CAN\SOH \STX(\SO2\RS.pulsar.proto.BaseCommand.TypeR\EOTtype\DC26\n\
      \\aconnect\CAN\STX \SOH(\v2\FS.pulsar.proto.CommandConnectR\aconnect\DC2<\n\
      \\tconnected\CAN\ETX \SOH(\v2\RS.pulsar.proto.CommandConnectedR\tconnected\DC2<\n\
      \\tsubscribe\CAN\EOT \SOH(\v2\RS.pulsar.proto.CommandSubscribeR\tsubscribe\DC29\n\
      \\bproducer\CAN\ENQ \SOH(\v2\GS.pulsar.proto.CommandProducerR\bproducer\DC2-\n\
      \\EOTsend\CAN\ACK \SOH(\v2\EM.pulsar.proto.CommandSendR\EOTsend\DC2C\n\
      \\fsend_receipt\CAN\a \SOH(\v2 .pulsar.proto.CommandSendReceiptR\vsendReceipt\DC2=\n\
      \\n\
      \send_error\CAN\b \SOH(\v2\RS.pulsar.proto.CommandSendErrorR\tsendError\DC26\n\
      \\amessage\CAN\t \SOH(\v2\FS.pulsar.proto.CommandMessageR\amessage\DC2*\n\
      \\ETXack\CAN\n\
      \ \SOH(\v2\CAN.pulsar.proto.CommandAckR\ETXack\DC2-\n\
      \\EOTflow\CAN\v \SOH(\v2\EM.pulsar.proto.CommandFlowR\EOTflow\DC2B\n\
      \\vunsubscribe\CAN\f \SOH(\v2 .pulsar.proto.CommandUnsubscribeR\vunsubscribe\DC26\n\
      \\asuccess\CAN\r \SOH(\v2\FS.pulsar.proto.CommandSuccessR\asuccess\DC20\n\
      \\ENQerror\CAN\SO \SOH(\v2\SUB.pulsar.proto.CommandErrorR\ENQerror\DC2I\n\
      \\SOclose_producer\CAN\SI \SOH(\v2\".pulsar.proto.CommandCloseProducerR\rcloseProducer\DC2I\n\
      \\SOclose_consumer\CAN\DLE \SOH(\v2\".pulsar.proto.CommandCloseConsumerR\rcloseConsumer\DC2O\n\
      \\DLEproducer_success\CAN\DC1 \SOH(\v2$.pulsar.proto.CommandProducerSuccessR\SIproducerSuccess\DC2-\n\
      \\EOTping\CAN\DC2 \SOH(\v2\EM.pulsar.proto.CommandPingR\EOTping\DC2-\n\
      \\EOTpong\CAN\DC3 \SOH(\v2\EM.pulsar.proto.CommandPongR\EOTpong\DC2~\n\
      \\USredeliverUnacknowledgedMessages\CAN\DC4 \SOH(\v24.pulsar.proto.CommandRedeliverUnacknowledgedMessagesR\USredeliverUnacknowledgedMessages\DC2[\n\
      \\DC1partitionMetadata\CAN\NAK \SOH(\v2-.pulsar.proto.CommandPartitionedTopicMetadataR\DC1partitionMetadata\DC2s\n\
      \\EMpartitionMetadataResponse\CAN\SYN \SOH(\v25.pulsar.proto.CommandPartitionedTopicMetadataResponseR\EMpartitionMetadataResponse\DC2B\n\
      \\vlookupTopic\CAN\ETB \SOH(\v2 .pulsar.proto.CommandLookupTopicR\vlookupTopic\DC2Z\n\
      \\DC3lookupTopicResponse\CAN\CAN \SOH(\v2(.pulsar.proto.CommandLookupTopicResponseR\DC3lookupTopicResponse\DC2H\n\
      \\rconsumerStats\CAN\EM \SOH(\v2\".pulsar.proto.CommandConsumerStatsR\rconsumerStats\DC2`\n\
      \\NAKconsumerStatsResponse\CAN\SUB \SOH(\v2*.pulsar.proto.CommandConsumerStatsResponseR\NAKconsumerStatsResponse\DC2T\n\
      \\DC1reachedEndOfTopic\CAN\ESC \SOH(\v2&.pulsar.proto.CommandReachedEndOfTopicR\DC1reachedEndOfTopic\DC2-\n\
      \\EOTseek\CAN\FS \SOH(\v2\EM.pulsar.proto.CommandSeekR\EOTseek\DC2Q\n\
      \\DLEgetLastMessageId\CAN\GS \SOH(\v2%.pulsar.proto.CommandGetLastMessageIdR\DLEgetLastMessageId\DC2i\n\
      \\CANgetLastMessageIdResponse\CAN\RS \SOH(\v2-.pulsar.proto.CommandGetLastMessageIdResponseR\CANgetLastMessageIdResponse\DC2_\n\
      \\SYNactive_consumer_change\CAN\US \SOH(\v2).pulsar.proto.CommandActiveConsumerChangeR\DC4activeConsumerChange\DC2]\n\
      \\DC4getTopicsOfNamespace\CAN  \SOH(\v2).pulsar.proto.CommandGetTopicsOfNamespaceR\DC4getTopicsOfNamespace\DC2u\n\
      \\FSgetTopicsOfNamespaceResponse\CAN! \SOH(\v21.pulsar.proto.CommandGetTopicsOfNamespaceResponseR\FSgetTopicsOfNamespaceResponse\DC2<\n\
      \\tgetSchema\CAN\" \SOH(\v2\RS.pulsar.proto.CommandGetSchemaR\tgetSchema\DC2T\n\
      \\DC1getSchemaResponse\CAN# \SOH(\v2&.pulsar.proto.CommandGetSchemaResponseR\DC1getSchemaResponse\DC2H\n\
      \\rauthChallenge\CAN$ \SOH(\v2\".pulsar.proto.CommandAuthChallengeR\rauthChallenge\DC2E\n\
      \\fauthResponse\CAN% \SOH(\v2!.pulsar.proto.CommandAuthResponseR\fauthResponse\DC2B\n\
      \\vackResponse\CAN& \SOH(\v2 .pulsar.proto.CommandAckResponseR\vackResponse\DC2T\n\
      \\DC1getOrCreateSchema\CAN' \SOH(\v2&.pulsar.proto.CommandGetOrCreateSchemaR\DC1getOrCreateSchema\DC2l\n\
      \\EMgetOrCreateSchemaResponse\CAN( \SOH(\v2..pulsar.proto.CommandGetOrCreateSchemaResponseR\EMgetOrCreateSchemaResponse\DC23\n\
      \\ACKnewTxn\CAN2 \SOH(\v2\ESC.pulsar.proto.CommandNewTxnR\ACKnewTxn\DC2K\n\
      \\SOnewTxnResponse\CAN3 \SOH(\v2#.pulsar.proto.CommandNewTxnResponseR\SOnewTxnResponse\DC2T\n\
      \\DC1addPartitionToTxn\CAN4 \SOH(\v2&.pulsar.proto.CommandAddPartitionToTxnR\DC1addPartitionToTxn\DC2l\n\
      \\EMaddPartitionToTxnResponse\CAN5 \SOH(\v2..pulsar.proto.CommandAddPartitionToTxnResponseR\EMaddPartitionToTxnResponse\DC2]\n\
      \\DC4addSubscriptionToTxn\CAN6 \SOH(\v2).pulsar.proto.CommandAddSubscriptionToTxnR\DC4addSubscriptionToTxn\DC2u\n\
      \\FSaddSubscriptionToTxnResponse\CAN7 \SOH(\v21.pulsar.proto.CommandAddSubscriptionToTxnResponseR\FSaddSubscriptionToTxnResponse\DC23\n\
      \\ACKendTxn\CAN8 \SOH(\v2\ESC.pulsar.proto.CommandEndTxnR\ACKendTxn\DC2K\n\
      \\SOendTxnResponse\CAN9 \SOH(\v2#.pulsar.proto.CommandEndTxnResponseR\SOendTxnResponse\DC2T\n\
      \\DC1endTxnOnPartition\CAN: \SOH(\v2&.pulsar.proto.CommandEndTxnOnPartitionR\DC1endTxnOnPartition\DC2l\n\
      \\EMendTxnOnPartitionResponse\CAN; \SOH(\v2..pulsar.proto.CommandEndTxnOnPartitionResponseR\EMendTxnOnPartitionResponse\DC2]\n\
      \\DC4endTxnOnSubscription\CAN< \SOH(\v2).pulsar.proto.CommandEndTxnOnSubscriptionR\DC4endTxnOnSubscription\DC2u\n\
      \\FSendTxnOnSubscriptionResponse\CAN= \SOH(\v21.pulsar.proto.CommandEndTxnOnSubscriptionResponseR\FSendTxnOnSubscriptionResponse\"\223\b\n\
      \\EOTType\DC2\v\n\
      \\aCONNECT\DLE\STX\DC2\r\n\
      \\tCONNECTED\DLE\ETX\DC2\r\n\
      \\tSUBSCRIBE\DLE\EOT\DC2\f\n\
      \\bPRODUCER\DLE\ENQ\DC2\b\n\
      \\EOTSEND\DLE\ACK\DC2\DLE\n\
      \\fSEND_RECEIPT\DLE\a\DC2\SO\n\
      \\n\
      \SEND_ERROR\DLE\b\DC2\v\n\
      \\aMESSAGE\DLE\t\DC2\a\n\
      \\ETXACK\DLE\n\
      \\DC2\b\n\
      \\EOTFLOW\DLE\v\DC2\SI\n\
      \\vUNSUBSCRIBE\DLE\f\DC2\v\n\
      \\aSUCCESS\DLE\r\DC2\t\n\
      \\ENQERROR\DLE\SO\DC2\DC2\n\
      \\SOCLOSE_PRODUCER\DLE\SI\DC2\DC2\n\
      \\SOCLOSE_CONSUMER\DLE\DLE\DC2\DC4\n\
      \\DLEPRODUCER_SUCCESS\DLE\DC1\DC2\b\n\
      \\EOTPING\DLE\DC2\DC2\b\n\
      \\EOTPONG\DLE\DC3\DC2%\n\
      \!REDELIVER_UNACKNOWLEDGED_MESSAGES\DLE\DC4\DC2\CAN\n\
      \\DC4PARTITIONED_METADATA\DLE\NAK\DC2!\n\
      \\GSPARTITIONED_METADATA_RESPONSE\DLE\SYN\DC2\n\
      \\n\
      \\ACKLOOKUP\DLE\ETB\DC2\DC3\n\
      \\SILOOKUP_RESPONSE\DLE\CAN\DC2\DC2\n\
      \\SOCONSUMER_STATS\DLE\EM\DC2\ESC\n\
      \\ETBCONSUMER_STATS_RESPONSE\DLE\SUB\DC2\CAN\n\
      \\DC4REACHED_END_OF_TOPIC\DLE\ESC\DC2\b\n\
      \\EOTSEEK\DLE\FS\DC2\ETB\n\
      \\DC3GET_LAST_MESSAGE_ID\DLE\GS\DC2 \n\
      \\FSGET_LAST_MESSAGE_ID_RESPONSE\DLE\RS\DC2\SUB\n\
      \\SYNACTIVE_CONSUMER_CHANGE\DLE\US\DC2\ESC\n\
      \\ETBGET_TOPICS_OF_NAMESPACE\DLE \DC2$\n\
      \ GET_TOPICS_OF_NAMESPACE_RESPONSE\DLE!\DC2\SO\n\
      \\n\
      \GET_SCHEMA\DLE\"\DC2\ETB\n\
      \\DC3GET_SCHEMA_RESPONSE\DLE#\DC2\DC2\n\
      \\SOAUTH_CHALLENGE\DLE$\DC2\DC1\n\
      \\rAUTH_RESPONSE\DLE%\DC2\DLE\n\
      \\fACK_RESPONSE\DLE&\DC2\CAN\n\
      \\DC4GET_OR_CREATE_SCHEMA\DLE'\DC2!\n\
      \\GSGET_OR_CREATE_SCHEMA_RESPONSE\DLE(\DC2\v\n\
      \\aNEW_TXN\DLE2\DC2\DC4\n\
      \\DLENEW_TXN_RESPONSE\DLE3\DC2\CAN\n\
      \\DC4ADD_PARTITION_TO_TXN\DLE4\DC2!\n\
      \\GSADD_PARTITION_TO_TXN_RESPONSE\DLE5\DC2\ESC\n\
      \\ETBADD_SUBSCRIPTION_TO_TXN\DLE6\DC2$\n\
      \ ADD_SUBSCRIPTION_TO_TXN_RESPONSE\DLE7\DC2\v\n\
      \\aEND_TXN\DLE8\DC2\DC4\n\
      \\DLEEND_TXN_RESPONSE\DLE9\DC2\CAN\n\
      \\DC4END_TXN_ON_PARTITION\DLE:\DC2!\n\
      \\GSEND_TXN_ON_PARTITION_RESPONSE\DLE;\DC2\ESC\n\
      \\ETBEND_TXN_ON_SUBSCRIPTION\DLE<\DC2$\n\
      \ END_TXN_ON_SUBSCRIPTION_RESPONSE\DLE="
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor BaseCommand'Type)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"type'")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        connect__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "connect"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandConnect)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'connect")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        connected__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "connected"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandConnected)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'connected")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        subscribe__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "subscribe"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandSubscribe)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'subscribe")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        producer__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "producer"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandProducer)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'producer")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        send__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "send"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandSend)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'send")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        sendReceipt__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "send_receipt"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandSendReceipt)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'sendReceipt")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        sendError__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "send_error"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandSendError)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'sendError")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        message__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandMessage)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'message")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        ack__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ack"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandAck)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ack")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        flow__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "flow"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandFlow)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'flow")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        unsubscribe__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "unsubscribe"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandUnsubscribe)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'unsubscribe")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        success__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "success"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandSuccess)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'success")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandError)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'error")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        closeProducer__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "close_producer"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandCloseProducer)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'closeProducer")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        closeConsumer__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "close_consumer"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandCloseConsumer)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'closeConsumer")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        producerSuccess__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "producer_success"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandProducerSuccess)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'producerSuccess")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        ping__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ping"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandPing)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ping")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        pong__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pong"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandPong)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pong")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        redeliverUnacknowledgedMessages__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "redeliverUnacknowledgedMessages"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandRedeliverUnacknowledgedMessages)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field
                    @"maybe'redeliverUnacknowledgedMessages")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        partitionMetadata__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "partitionMetadata"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandPartitionedTopicMetadata)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'partitionMetadata")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        partitionMetadataResponse__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "partitionMetadataResponse"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandPartitionedTopicMetadataResponse)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'partitionMetadataResponse")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        lookupTopic__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lookupTopic"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandLookupTopic)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lookupTopic")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        lookupTopicResponse__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lookupTopicResponse"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandLookupTopicResponse)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lookupTopicResponse")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        consumerStats__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "consumerStats"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandConsumerStats)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'consumerStats")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        consumerStatsResponse__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "consumerStatsResponse"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandConsumerStatsResponse)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'consumerStatsResponse")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        reachedEndOfTopic__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "reachedEndOfTopic"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandReachedEndOfTopic)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'reachedEndOfTopic")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        seek__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "seek"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandSeek)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'seek")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        getLastMessageId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "getLastMessageId"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandGetLastMessageId)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'getLastMessageId")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        getLastMessageIdResponse__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "getLastMessageIdResponse"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandGetLastMessageIdResponse)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'getLastMessageIdResponse")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        activeConsumerChange__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "active_consumer_change"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandActiveConsumerChange)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'activeConsumerChange")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        getTopicsOfNamespace__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "getTopicsOfNamespace"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandGetTopicsOfNamespace)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'getTopicsOfNamespace")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        getTopicsOfNamespaceResponse__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "getTopicsOfNamespaceResponse"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandGetTopicsOfNamespaceResponse)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field
                    @"maybe'getTopicsOfNamespaceResponse")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        getSchema__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "getSchema"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandGetSchema)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'getSchema")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        getSchemaResponse__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "getSchemaResponse"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandGetSchemaResponse)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'getSchemaResponse")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        authChallenge__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "authChallenge"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandAuthChallenge)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'authChallenge")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        authResponse__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "authResponse"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandAuthResponse)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'authResponse")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        ackResponse__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ackResponse"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandAckResponse)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ackResponse")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        getOrCreateSchema__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "getOrCreateSchema"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandGetOrCreateSchema)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'getOrCreateSchema")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        getOrCreateSchemaResponse__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "getOrCreateSchemaResponse"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandGetOrCreateSchemaResponse)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'getOrCreateSchemaResponse")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        newTxn__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "newTxn"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandNewTxn)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'newTxn")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        newTxnResponse__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "newTxnResponse"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandNewTxnResponse)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'newTxnResponse")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        addPartitionToTxn__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "addPartitionToTxn"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandAddPartitionToTxn)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'addPartitionToTxn")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        addPartitionToTxnResponse__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "addPartitionToTxnResponse"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandAddPartitionToTxnResponse)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'addPartitionToTxnResponse")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        addSubscriptionToTxn__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "addSubscriptionToTxn"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandAddSubscriptionToTxn)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'addSubscriptionToTxn")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        addSubscriptionToTxnResponse__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "addSubscriptionToTxnResponse"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandAddSubscriptionToTxnResponse)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field
                    @"maybe'addSubscriptionToTxnResponse")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        endTxn__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "endTxn"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandEndTxn)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'endTxn")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        endTxnResponse__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "endTxnResponse"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandEndTxnResponse)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'endTxnResponse")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        endTxnOnPartition__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "endTxnOnPartition"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandEndTxnOnPartition)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'endTxnOnPartition")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        endTxnOnPartitionResponse__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "endTxnOnPartitionResponse"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandEndTxnOnPartitionResponse)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'endTxnOnPartitionResponse")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        endTxnOnSubscription__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "endTxnOnSubscription"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandEndTxnOnSubscription)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'endTxnOnSubscription")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
        endTxnOnSubscriptionResponse__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "endTxnOnSubscriptionResponse"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CommandEndTxnOnSubscriptionResponse)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field
                    @"maybe'endTxnOnSubscriptionResponse")) ::
              Data.ProtoLens.FieldDescriptor BaseCommand
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, type'__field_descriptor),
           (Data.ProtoLens.Tag 2, connect__field_descriptor),
           (Data.ProtoLens.Tag 3, connected__field_descriptor),
           (Data.ProtoLens.Tag 4, subscribe__field_descriptor),
           (Data.ProtoLens.Tag 5, producer__field_descriptor),
           (Data.ProtoLens.Tag 6, send__field_descriptor),
           (Data.ProtoLens.Tag 7, sendReceipt__field_descriptor),
           (Data.ProtoLens.Tag 8, sendError__field_descriptor),
           (Data.ProtoLens.Tag 9, message__field_descriptor),
           (Data.ProtoLens.Tag 10, ack__field_descriptor),
           (Data.ProtoLens.Tag 11, flow__field_descriptor),
           (Data.ProtoLens.Tag 12, unsubscribe__field_descriptor),
           (Data.ProtoLens.Tag 13, success__field_descriptor),
           (Data.ProtoLens.Tag 14, error__field_descriptor),
           (Data.ProtoLens.Tag 15, closeProducer__field_descriptor),
           (Data.ProtoLens.Tag 16, closeConsumer__field_descriptor),
           (Data.ProtoLens.Tag 17, producerSuccess__field_descriptor),
           (Data.ProtoLens.Tag 18, ping__field_descriptor),
           (Data.ProtoLens.Tag 19, pong__field_descriptor),
           (Data.ProtoLens.Tag 20, 
            redeliverUnacknowledgedMessages__field_descriptor),
           (Data.ProtoLens.Tag 21, partitionMetadata__field_descriptor),
           (Data.ProtoLens.Tag 22, 
            partitionMetadataResponse__field_descriptor),
           (Data.ProtoLens.Tag 23, lookupTopic__field_descriptor),
           (Data.ProtoLens.Tag 24, lookupTopicResponse__field_descriptor),
           (Data.ProtoLens.Tag 25, consumerStats__field_descriptor),
           (Data.ProtoLens.Tag 26, consumerStatsResponse__field_descriptor),
           (Data.ProtoLens.Tag 27, reachedEndOfTopic__field_descriptor),
           (Data.ProtoLens.Tag 28, seek__field_descriptor),
           (Data.ProtoLens.Tag 29, getLastMessageId__field_descriptor),
           (Data.ProtoLens.Tag 30, 
            getLastMessageIdResponse__field_descriptor),
           (Data.ProtoLens.Tag 31, activeConsumerChange__field_descriptor),
           (Data.ProtoLens.Tag 32, getTopicsOfNamespace__field_descriptor),
           (Data.ProtoLens.Tag 33, 
            getTopicsOfNamespaceResponse__field_descriptor),
           (Data.ProtoLens.Tag 34, getSchema__field_descriptor),
           (Data.ProtoLens.Tag 35, getSchemaResponse__field_descriptor),
           (Data.ProtoLens.Tag 36, authChallenge__field_descriptor),
           (Data.ProtoLens.Tag 37, authResponse__field_descriptor),
           (Data.ProtoLens.Tag 38, ackResponse__field_descriptor),
           (Data.ProtoLens.Tag 39, getOrCreateSchema__field_descriptor),
           (Data.ProtoLens.Tag 40, 
            getOrCreateSchemaResponse__field_descriptor),
           (Data.ProtoLens.Tag 50, newTxn__field_descriptor),
           (Data.ProtoLens.Tag 51, newTxnResponse__field_descriptor),
           (Data.ProtoLens.Tag 52, addPartitionToTxn__field_descriptor),
           (Data.ProtoLens.Tag 53, 
            addPartitionToTxnResponse__field_descriptor),
           (Data.ProtoLens.Tag 54, addSubscriptionToTxn__field_descriptor),
           (Data.ProtoLens.Tag 55, 
            addSubscriptionToTxnResponse__field_descriptor),
           (Data.ProtoLens.Tag 56, endTxn__field_descriptor),
           (Data.ProtoLens.Tag 57, endTxnResponse__field_descriptor),
           (Data.ProtoLens.Tag 58, endTxnOnPartition__field_descriptor),
           (Data.ProtoLens.Tag 59, 
            endTxnOnPartitionResponse__field_descriptor),
           (Data.ProtoLens.Tag 60, endTxnOnSubscription__field_descriptor),
           (Data.ProtoLens.Tag 61, 
            endTxnOnSubscriptionResponse__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _BaseCommand'_unknownFields
        (\ x__ y__ -> x__ {_BaseCommand'_unknownFields = y__})
  defMessage
    = BaseCommand'_constructor
        {_BaseCommand'type' = Data.ProtoLens.fieldDefault,
         _BaseCommand'connect = Prelude.Nothing,
         _BaseCommand'connected = Prelude.Nothing,
         _BaseCommand'subscribe = Prelude.Nothing,
         _BaseCommand'producer = Prelude.Nothing,
         _BaseCommand'send = Prelude.Nothing,
         _BaseCommand'sendReceipt = Prelude.Nothing,
         _BaseCommand'sendError = Prelude.Nothing,
         _BaseCommand'message = Prelude.Nothing,
         _BaseCommand'ack = Prelude.Nothing,
         _BaseCommand'flow = Prelude.Nothing,
         _BaseCommand'unsubscribe = Prelude.Nothing,
         _BaseCommand'success = Prelude.Nothing,
         _BaseCommand'error = Prelude.Nothing,
         _BaseCommand'closeProducer = Prelude.Nothing,
         _BaseCommand'closeConsumer = Prelude.Nothing,
         _BaseCommand'producerSuccess = Prelude.Nothing,
         _BaseCommand'ping = Prelude.Nothing,
         _BaseCommand'pong = Prelude.Nothing,
         _BaseCommand'redeliverUnacknowledgedMessages = Prelude.Nothing,
         _BaseCommand'partitionMetadata = Prelude.Nothing,
         _BaseCommand'partitionMetadataResponse = Prelude.Nothing,
         _BaseCommand'lookupTopic = Prelude.Nothing,
         _BaseCommand'lookupTopicResponse = Prelude.Nothing,
         _BaseCommand'consumerStats = Prelude.Nothing,
         _BaseCommand'consumerStatsResponse = Prelude.Nothing,
         _BaseCommand'reachedEndOfTopic = Prelude.Nothing,
         _BaseCommand'seek = Prelude.Nothing,
         _BaseCommand'getLastMessageId = Prelude.Nothing,
         _BaseCommand'getLastMessageIdResponse = Prelude.Nothing,
         _BaseCommand'activeConsumerChange = Prelude.Nothing,
         _BaseCommand'getTopicsOfNamespace = Prelude.Nothing,
         _BaseCommand'getTopicsOfNamespaceResponse = Prelude.Nothing,
         _BaseCommand'getSchema = Prelude.Nothing,
         _BaseCommand'getSchemaResponse = Prelude.Nothing,
         _BaseCommand'authChallenge = Prelude.Nothing,
         _BaseCommand'authResponse = Prelude.Nothing,
         _BaseCommand'ackResponse = Prelude.Nothing,
         _BaseCommand'getOrCreateSchema = Prelude.Nothing,
         _BaseCommand'getOrCreateSchemaResponse = Prelude.Nothing,
         _BaseCommand'newTxn = Prelude.Nothing,
         _BaseCommand'newTxnResponse = Prelude.Nothing,
         _BaseCommand'addPartitionToTxn = Prelude.Nothing,
         _BaseCommand'addPartitionToTxnResponse = Prelude.Nothing,
         _BaseCommand'addSubscriptionToTxn = Prelude.Nothing,
         _BaseCommand'addSubscriptionToTxnResponse = Prelude.Nothing,
         _BaseCommand'endTxn = Prelude.Nothing,
         _BaseCommand'endTxnResponse = Prelude.Nothing,
         _BaseCommand'endTxnOnPartition = Prelude.Nothing,
         _BaseCommand'endTxnOnPartitionResponse = Prelude.Nothing,
         _BaseCommand'endTxnOnSubscription = Prelude.Nothing,
         _BaseCommand'endTxnOnSubscriptionResponse = Prelude.Nothing,
         _BaseCommand'_unknownFields = []}
  parseMessage
    = let
        loop ::
          BaseCommand
          -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser BaseCommand
        loop x required'type'
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'type' then (:) "type" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "connect"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"connect") y x)
                                  required'type'
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "connected"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"connected") y x)
                                  required'type'
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "subscribe"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"subscribe") y x)
                                  required'type'
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "producer"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"producer") y x)
                                  required'type'
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "send"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"send") y x)
                                  required'type'
                        58
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "send_receipt"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"sendReceipt") y x)
                                  required'type'
                        66
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "send_error"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"sendError") y x)
                                  required'type'
                        74
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "message"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"message") y x)
                                  required'type'
                        82
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "ack"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"ack") y x)
                                  required'type'
                        90
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "flow"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"flow") y x)
                                  required'type'
                        98
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "unsubscribe"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"unsubscribe") y x)
                                  required'type'
                        106
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "success"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"success") y x)
                                  required'type'
                        114
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "error"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                                  required'type'
                        122
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "close_producer"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"closeProducer") y x)
                                  required'type'
                        130
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "close_consumer"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"closeConsumer") y x)
                                  required'type'
                        138
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "producer_success"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"producerSuccess") y x)
                                  required'type'
                        146
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "ping"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"ping") y x)
                                  required'type'
                        154
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "pong"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"pong") y x)
                                  required'type'
                        162
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "redeliverUnacknowledgedMessages"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"redeliverUnacknowledgedMessages")
                                     y
                                     x)
                                  required'type'
                        170
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "partitionMetadata"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"partitionMetadata") y x)
                                  required'type'
                        178
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "partitionMetadataResponse"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"partitionMetadataResponse") y x)
                                  required'type'
                        186
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "lookupTopic"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"lookupTopic") y x)
                                  required'type'
                        194
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "lookupTopicResponse"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"lookupTopicResponse") y x)
                                  required'type'
                        202
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "consumerStats"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"consumerStats") y x)
                                  required'type'
                        210
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "consumerStatsResponse"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"consumerStatsResponse") y x)
                                  required'type'
                        218
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "reachedEndOfTopic"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"reachedEndOfTopic") y x)
                                  required'type'
                        226
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "seek"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"seek") y x)
                                  required'type'
                        234
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "getLastMessageId"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"getLastMessageId") y x)
                                  required'type'
                        242
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "getLastMessageIdResponse"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"getLastMessageIdResponse") y x)
                                  required'type'
                        250
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "active_consumer_change"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"activeConsumerChange") y x)
                                  required'type'
                        258
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "getTopicsOfNamespace"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"getTopicsOfNamespace") y x)
                                  required'type'
                        266
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "getTopicsOfNamespaceResponse"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"getTopicsOfNamespaceResponse")
                                     y
                                     x)
                                  required'type'
                        274
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "getSchema"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"getSchema") y x)
                                  required'type'
                        282
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "getSchemaResponse"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"getSchemaResponse") y x)
                                  required'type'
                        290
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "authChallenge"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"authChallenge") y x)
                                  required'type'
                        298
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "authResponse"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"authResponse") y x)
                                  required'type'
                        306
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "ackResponse"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"ackResponse") y x)
                                  required'type'
                        314
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "getOrCreateSchema"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"getOrCreateSchema") y x)
                                  required'type'
                        322
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "getOrCreateSchemaResponse"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"getOrCreateSchemaResponse") y x)
                                  required'type'
                        402
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "newTxn"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"newTxn") y x)
                                  required'type'
                        410
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "newTxnResponse"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"newTxnResponse") y x)
                                  required'type'
                        418
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "addPartitionToTxn"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"addPartitionToTxn") y x)
                                  required'type'
                        426
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "addPartitionToTxnResponse"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"addPartitionToTxnResponse") y x)
                                  required'type'
                        434
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "addSubscriptionToTxn"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"addSubscriptionToTxn") y x)
                                  required'type'
                        442
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "addSubscriptionToTxnResponse"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"addSubscriptionToTxnResponse")
                                     y
                                     x)
                                  required'type'
                        450
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "endTxn"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"endTxn") y x)
                                  required'type'
                        458
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "endTxnResponse"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"endTxnResponse") y x)
                                  required'type'
                        466
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "endTxnOnPartition"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"endTxnOnPartition") y x)
                                  required'type'
                        474
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "endTxnOnPartitionResponse"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"endTxnOnPartitionResponse") y x)
                                  required'type'
                        482
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "endTxnOnSubscription"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"endTxnOnSubscription") y x)
                                  required'type'
                        490
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "endTxnOnSubscriptionResponse"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"endTxnOnSubscriptionResponse")
                                     y
                                     x)
                                  required'type'
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'type'
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "BaseCommand"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                ((Prelude..)
                   ((Prelude..)
                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                   Prelude.fromEnum
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"type'") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'connect") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'connected") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.ProtoLens.encodeMessage
                                _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'subscribe") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'producer") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.ProtoLens.encodeMessage
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'send") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                      ((Prelude..)
                                         (\ bs
                                            -> (Data.Monoid.<>)
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                    (Prelude.fromIntegral
                                                       (Data.ByteString.length bs)))
                                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         Data.ProtoLens.encodeMessage
                                         _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'sendReceipt") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                         ((Prelude..)
                                            (\ bs
                                               -> (Data.Monoid.<>)
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                       (Prelude.fromIntegral
                                                          (Data.ByteString.length bs)))
                                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Data.ProtoLens.encodeMessage
                                            _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'sendError") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 66)
                                            ((Prelude..)
                                               (\ bs
                                                  -> (Data.Monoid.<>)
                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                          (Prelude.fromIntegral
                                                             (Data.ByteString.length bs)))
                                                       (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                               Data.ProtoLens.encodeMessage
                                               _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'message") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 74)
                                               ((Prelude..)
                                                  (\ bs
                                                     -> (Data.Monoid.<>)
                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                             (Prelude.fromIntegral
                                                                (Data.ByteString.length bs)))
                                                          (Data.ProtoLens.Encoding.Bytes.putBytes
                                                             bs))
                                                  Data.ProtoLens.encodeMessage
                                                  _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'ack") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 82)
                                                  ((Prelude..)
                                                     (\ bs
                                                        -> (Data.Monoid.<>)
                                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                (Prelude.fromIntegral
                                                                   (Data.ByteString.length bs)))
                                                             (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                bs))
                                                     Data.ProtoLens.encodeMessage
                                                     _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field @"maybe'flow") _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 90)
                                                     ((Prelude..)
                                                        (\ bs
                                                           -> (Data.Monoid.<>)
                                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                   (Prelude.fromIntegral
                                                                      (Data.ByteString.length bs)))
                                                                (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                   bs))
                                                        Data.ProtoLens.encodeMessage
                                                        _v))
                                           ((Data.Monoid.<>)
                                              (case
                                                   Lens.Family2.view
                                                     (Data.ProtoLens.Field.field
                                                        @"maybe'unsubscribe")
                                                     _x
                                               of
                                                 Prelude.Nothing -> Data.Monoid.mempty
                                                 (Prelude.Just _v)
                                                   -> (Data.Monoid.<>)
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt 98)
                                                        ((Prelude..)
                                                           (\ bs
                                                              -> (Data.Monoid.<>)
                                                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                      (Prelude.fromIntegral
                                                                         (Data.ByteString.length
                                                                            bs)))
                                                                   (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                      bs))
                                                           Data.ProtoLens.encodeMessage
                                                           _v))
                                              ((Data.Monoid.<>)
                                                 (case
                                                      Lens.Family2.view
                                                        (Data.ProtoLens.Field.field
                                                           @"maybe'success")
                                                        _x
                                                  of
                                                    Prelude.Nothing -> Data.Monoid.mempty
                                                    (Prelude.Just _v)
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              106)
                                                           ((Prelude..)
                                                              (\ bs
                                                                 -> (Data.Monoid.<>)
                                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                         (Prelude.fromIntegral
                                                                            (Data.ByteString.length
                                                                               bs)))
                                                                      (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                         bs))
                                                              Data.ProtoLens.encodeMessage
                                                              _v))
                                                 ((Data.Monoid.<>)
                                                    (case
                                                         Lens.Family2.view
                                                           (Data.ProtoLens.Field.field
                                                              @"maybe'error")
                                                           _x
                                                     of
                                                       Prelude.Nothing -> Data.Monoid.mempty
                                                       (Prelude.Just _v)
                                                         -> (Data.Monoid.<>)
                                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 114)
                                                              ((Prelude..)
                                                                 (\ bs
                                                                    -> (Data.Monoid.<>)
                                                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                            (Prelude.fromIntegral
                                                                               (Data.ByteString.length
                                                                                  bs)))
                                                                         (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                            bs))
                                                                 Data.ProtoLens.encodeMessage
                                                                 _v))
                                                    ((Data.Monoid.<>)
                                                       (case
                                                            Lens.Family2.view
                                                              (Data.ProtoLens.Field.field
                                                                 @"maybe'closeProducer")
                                                              _x
                                                        of
                                                          Prelude.Nothing -> Data.Monoid.mempty
                                                          (Prelude.Just _v)
                                                            -> (Data.Monoid.<>)
                                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    122)
                                                                 ((Prelude..)
                                                                    (\ bs
                                                                       -> (Data.Monoid.<>)
                                                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                               (Prelude.fromIntegral
                                                                                  (Data.ByteString.length
                                                                                     bs)))
                                                                            (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                               bs))
                                                                    Data.ProtoLens.encodeMessage
                                                                    _v))
                                                       ((Data.Monoid.<>)
                                                          (case
                                                               Lens.Family2.view
                                                                 (Data.ProtoLens.Field.field
                                                                    @"maybe'closeConsumer")
                                                                 _x
                                                           of
                                                             Prelude.Nothing -> Data.Monoid.mempty
                                                             (Prelude.Just _v)
                                                               -> (Data.Monoid.<>)
                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       130)
                                                                    ((Prelude..)
                                                                       (\ bs
                                                                          -> (Data.Monoid.<>)
                                                                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                  (Prelude.fromIntegral
                                                                                     (Data.ByteString.length
                                                                                        bs)))
                                                                               (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                  bs))
                                                                       Data.ProtoLens.encodeMessage
                                                                       _v))
                                                          ((Data.Monoid.<>)
                                                             (case
                                                                  Lens.Family2.view
                                                                    (Data.ProtoLens.Field.field
                                                                       @"maybe'producerSuccess")
                                                                    _x
                                                              of
                                                                Prelude.Nothing
                                                                  -> Data.Monoid.mempty
                                                                (Prelude.Just _v)
                                                                  -> (Data.Monoid.<>)
                                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                          138)
                                                                       ((Prelude..)
                                                                          (\ bs
                                                                             -> (Data.Monoid.<>)
                                                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                     (Prelude.fromIntegral
                                                                                        (Data.ByteString.length
                                                                                           bs)))
                                                                                  (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                     bs))
                                                                          Data.ProtoLens.encodeMessage
                                                                          _v))
                                                             ((Data.Monoid.<>)
                                                                (case
                                                                     Lens.Family2.view
                                                                       (Data.ProtoLens.Field.field
                                                                          @"maybe'ping")
                                                                       _x
                                                                 of
                                                                   Prelude.Nothing
                                                                     -> Data.Monoid.mempty
                                                                   (Prelude.Just _v)
                                                                     -> (Data.Monoid.<>)
                                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                             146)
                                                                          ((Prelude..)
                                                                             (\ bs
                                                                                -> (Data.Monoid.<>)
                                                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                        (Prelude.fromIntegral
                                                                                           (Data.ByteString.length
                                                                                              bs)))
                                                                                     (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                        bs))
                                                                             Data.ProtoLens.encodeMessage
                                                                             _v))
                                                                ((Data.Monoid.<>)
                                                                   (case
                                                                        Lens.Family2.view
                                                                          (Data.ProtoLens.Field.field
                                                                             @"maybe'pong")
                                                                          _x
                                                                    of
                                                                      Prelude.Nothing
                                                                        -> Data.Monoid.mempty
                                                                      (Prelude.Just _v)
                                                                        -> (Data.Monoid.<>)
                                                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                154)
                                                                             ((Prelude..)
                                                                                (\ bs
                                                                                   -> (Data.Monoid.<>)
                                                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                           (Prelude.fromIntegral
                                                                                              (Data.ByteString.length
                                                                                                 bs)))
                                                                                        (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                           bs))
                                                                                Data.ProtoLens.encodeMessage
                                                                                _v))
                                                                   ((Data.Monoid.<>)
                                                                      (case
                                                                           Lens.Family2.view
                                                                             (Data.ProtoLens.Field.field
                                                                                @"maybe'redeliverUnacknowledgedMessages")
                                                                             _x
                                                                       of
                                                                         Prelude.Nothing
                                                                           -> Data.Monoid.mempty
                                                                         (Prelude.Just _v)
                                                                           -> (Data.Monoid.<>)
                                                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                   162)
                                                                                ((Prelude..)
                                                                                   (\ bs
                                                                                      -> (Data.Monoid.<>)
                                                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                              (Prelude.fromIntegral
                                                                                                 (Data.ByteString.length
                                                                                                    bs)))
                                                                                           (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                              bs))
                                                                                   Data.ProtoLens.encodeMessage
                                                                                   _v))
                                                                      ((Data.Monoid.<>)
                                                                         (case
                                                                              Lens.Family2.view
                                                                                (Data.ProtoLens.Field.field
                                                                                   @"maybe'partitionMetadata")
                                                                                _x
                                                                          of
                                                                            Prelude.Nothing
                                                                              -> Data.Monoid.mempty
                                                                            (Prelude.Just _v)
                                                                              -> (Data.Monoid.<>)
                                                                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                      170)
                                                                                   ((Prelude..)
                                                                                      (\ bs
                                                                                         -> (Data.Monoid.<>)
                                                                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                 (Prelude.fromIntegral
                                                                                                    (Data.ByteString.length
                                                                                                       bs)))
                                                                                              (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                 bs))
                                                                                      Data.ProtoLens.encodeMessage
                                                                                      _v))
                                                                         ((Data.Monoid.<>)
                                                                            (case
                                                                                 Lens.Family2.view
                                                                                   (Data.ProtoLens.Field.field
                                                                                      @"maybe'partitionMetadataResponse")
                                                                                   _x
                                                                             of
                                                                               Prelude.Nothing
                                                                                 -> Data.Monoid.mempty
                                                                               (Prelude.Just _v)
                                                                                 -> (Data.Monoid.<>)
                                                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                         178)
                                                                                      ((Prelude..)
                                                                                         (\ bs
                                                                                            -> (Data.Monoid.<>)
                                                                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                    (Prelude.fromIntegral
                                                                                                       (Data.ByteString.length
                                                                                                          bs)))
                                                                                                 (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                    bs))
                                                                                         Data.ProtoLens.encodeMessage
                                                                                         _v))
                                                                            ((Data.Monoid.<>)
                                                                               (case
                                                                                    Lens.Family2.view
                                                                                      (Data.ProtoLens.Field.field
                                                                                         @"maybe'lookupTopic")
                                                                                      _x
                                                                                of
                                                                                  Prelude.Nothing
                                                                                    -> Data.Monoid.mempty
                                                                                  (Prelude.Just _v)
                                                                                    -> (Data.Monoid.<>)
                                                                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                            186)
                                                                                         ((Prelude..)
                                                                                            (\ bs
                                                                                               -> (Data.Monoid.<>)
                                                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                       (Prelude.fromIntegral
                                                                                                          (Data.ByteString.length
                                                                                                             bs)))
                                                                                                    (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                       bs))
                                                                                            Data.ProtoLens.encodeMessage
                                                                                            _v))
                                                                               ((Data.Monoid.<>)
                                                                                  (case
                                                                                       Lens.Family2.view
                                                                                         (Data.ProtoLens.Field.field
                                                                                            @"maybe'lookupTopicResponse")
                                                                                         _x
                                                                                   of
                                                                                     Prelude.Nothing
                                                                                       -> Data.Monoid.mempty
                                                                                     (Prelude.Just _v)
                                                                                       -> (Data.Monoid.<>)
                                                                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                               194)
                                                                                            ((Prelude..)
                                                                                               (\ bs
                                                                                                  -> (Data.Monoid.<>)
                                                                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                          (Prelude.fromIntegral
                                                                                                             (Data.ByteString.length
                                                                                                                bs)))
                                                                                                       (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                          bs))
                                                                                               Data.ProtoLens.encodeMessage
                                                                                               _v))
                                                                                  ((Data.Monoid.<>)
                                                                                     (case
                                                                                          Lens.Family2.view
                                                                                            (Data.ProtoLens.Field.field
                                                                                               @"maybe'consumerStats")
                                                                                            _x
                                                                                      of
                                                                                        Prelude.Nothing
                                                                                          -> Data.Monoid.mempty
                                                                                        (Prelude.Just _v)
                                                                                          -> (Data.Monoid.<>)
                                                                                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                  202)
                                                                                               ((Prelude..)
                                                                                                  (\ bs
                                                                                                     -> (Data.Monoid.<>)
                                                                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                             (Prelude.fromIntegral
                                                                                                                (Data.ByteString.length
                                                                                                                   bs)))
                                                                                                          (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                             bs))
                                                                                                  Data.ProtoLens.encodeMessage
                                                                                                  _v))
                                                                                     ((Data.Monoid.<>)
                                                                                        (case
                                                                                             Lens.Family2.view
                                                                                               (Data.ProtoLens.Field.field
                                                                                                  @"maybe'consumerStatsResponse")
                                                                                               _x
                                                                                         of
                                                                                           Prelude.Nothing
                                                                                             -> Data.Monoid.mempty
                                                                                           (Prelude.Just _v)
                                                                                             -> (Data.Monoid.<>)
                                                                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                     210)
                                                                                                  ((Prelude..)
                                                                                                     (\ bs
                                                                                                        -> (Data.Monoid.<>)
                                                                                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                (Prelude.fromIntegral
                                                                                                                   (Data.ByteString.length
                                                                                                                      bs)))
                                                                                                             (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                bs))
                                                                                                     Data.ProtoLens.encodeMessage
                                                                                                     _v))
                                                                                        ((Data.Monoid.<>)
                                                                                           (case
                                                                                                Lens.Family2.view
                                                                                                  (Data.ProtoLens.Field.field
                                                                                                     @"maybe'reachedEndOfTopic")
                                                                                                  _x
                                                                                            of
                                                                                              Prelude.Nothing
                                                                                                -> Data.Monoid.mempty
                                                                                              (Prelude.Just _v)
                                                                                                -> (Data.Monoid.<>)
                                                                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                        218)
                                                                                                     ((Prelude..)
                                                                                                        (\ bs
                                                                                                           -> (Data.Monoid.<>)
                                                                                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                   (Prelude.fromIntegral
                                                                                                                      (Data.ByteString.length
                                                                                                                         bs)))
                                                                                                                (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                   bs))
                                                                                                        Data.ProtoLens.encodeMessage
                                                                                                        _v))
                                                                                           ((Data.Monoid.<>)
                                                                                              (case
                                                                                                   Lens.Family2.view
                                                                                                     (Data.ProtoLens.Field.field
                                                                                                        @"maybe'seek")
                                                                                                     _x
                                                                                               of
                                                                                                 Prelude.Nothing
                                                                                                   -> Data.Monoid.mempty
                                                                                                 (Prelude.Just _v)
                                                                                                   -> (Data.Monoid.<>)
                                                                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                           226)
                                                                                                        ((Prelude..)
                                                                                                           (\ bs
                                                                                                              -> (Data.Monoid.<>)
                                                                                                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                      (Prelude.fromIntegral
                                                                                                                         (Data.ByteString.length
                                                                                                                            bs)))
                                                                                                                   (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                      bs))
                                                                                                           Data.ProtoLens.encodeMessage
                                                                                                           _v))
                                                                                              ((Data.Monoid.<>)
                                                                                                 (case
                                                                                                      Lens.Family2.view
                                                                                                        (Data.ProtoLens.Field.field
                                                                                                           @"maybe'getLastMessageId")
                                                                                                        _x
                                                                                                  of
                                                                                                    Prelude.Nothing
                                                                                                      -> Data.Monoid.mempty
                                                                                                    (Prelude.Just _v)
                                                                                                      -> (Data.Monoid.<>)
                                                                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                              234)
                                                                                                           ((Prelude..)
                                                                                                              (\ bs
                                                                                                                 -> (Data.Monoid.<>)
                                                                                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                         (Prelude.fromIntegral
                                                                                                                            (Data.ByteString.length
                                                                                                                               bs)))
                                                                                                                      (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                         bs))
                                                                                                              Data.ProtoLens.encodeMessage
                                                                                                              _v))
                                                                                                 ((Data.Monoid.<>)
                                                                                                    (case
                                                                                                         Lens.Family2.view
                                                                                                           (Data.ProtoLens.Field.field
                                                                                                              @"maybe'getLastMessageIdResponse")
                                                                                                           _x
                                                                                                     of
                                                                                                       Prelude.Nothing
                                                                                                         -> Data.Monoid.mempty
                                                                                                       (Prelude.Just _v)
                                                                                                         -> (Data.Monoid.<>)
                                                                                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                 242)
                                                                                                              ((Prelude..)
                                                                                                                 (\ bs
                                                                                                                    -> (Data.Monoid.<>)
                                                                                                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                            (Prelude.fromIntegral
                                                                                                                               (Data.ByteString.length
                                                                                                                                  bs)))
                                                                                                                         (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                            bs))
                                                                                                                 Data.ProtoLens.encodeMessage
                                                                                                                 _v))
                                                                                                    ((Data.Monoid.<>)
                                                                                                       (case
                                                                                                            Lens.Family2.view
                                                                                                              (Data.ProtoLens.Field.field
                                                                                                                 @"maybe'activeConsumerChange")
                                                                                                              _x
                                                                                                        of
                                                                                                          Prelude.Nothing
                                                                                                            -> Data.Monoid.mempty
                                                                                                          (Prelude.Just _v)
                                                                                                            -> (Data.Monoid.<>)
                                                                                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                    250)
                                                                                                                 ((Prelude..)
                                                                                                                    (\ bs
                                                                                                                       -> (Data.Monoid.<>)
                                                                                                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                               (Prelude.fromIntegral
                                                                                                                                  (Data.ByteString.length
                                                                                                                                     bs)))
                                                                                                                            (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                               bs))
                                                                                                                    Data.ProtoLens.encodeMessage
                                                                                                                    _v))
                                                                                                       ((Data.Monoid.<>)
                                                                                                          (case
                                                                                                               Lens.Family2.view
                                                                                                                 (Data.ProtoLens.Field.field
                                                                                                                    @"maybe'getTopicsOfNamespace")
                                                                                                                 _x
                                                                                                           of
                                                                                                             Prelude.Nothing
                                                                                                               -> Data.Monoid.mempty
                                                                                                             (Prelude.Just _v)
                                                                                                               -> (Data.Monoid.<>)
                                                                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                       258)
                                                                                                                    ((Prelude..)
                                                                                                                       (\ bs
                                                                                                                          -> (Data.Monoid.<>)
                                                                                                                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                  (Prelude.fromIntegral
                                                                                                                                     (Data.ByteString.length
                                                                                                                                        bs)))
                                                                                                                               (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                  bs))
                                                                                                                       Data.ProtoLens.encodeMessage
                                                                                                                       _v))
                                                                                                          ((Data.Monoid.<>)
                                                                                                             (case
                                                                                                                  Lens.Family2.view
                                                                                                                    (Data.ProtoLens.Field.field
                                                                                                                       @"maybe'getTopicsOfNamespaceResponse")
                                                                                                                    _x
                                                                                                              of
                                                                                                                Prelude.Nothing
                                                                                                                  -> Data.Monoid.mempty
                                                                                                                (Prelude.Just _v)
                                                                                                                  -> (Data.Monoid.<>)
                                                                                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                          266)
                                                                                                                       ((Prelude..)
                                                                                                                          (\ bs
                                                                                                                             -> (Data.Monoid.<>)
                                                                                                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                     (Prelude.fromIntegral
                                                                                                                                        (Data.ByteString.length
                                                                                                                                           bs)))
                                                                                                                                  (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                     bs))
                                                                                                                          Data.ProtoLens.encodeMessage
                                                                                                                          _v))
                                                                                                             ((Data.Monoid.<>)
                                                                                                                (case
                                                                                                                     Lens.Family2.view
                                                                                                                       (Data.ProtoLens.Field.field
                                                                                                                          @"maybe'getSchema")
                                                                                                                       _x
                                                                                                                 of
                                                                                                                   Prelude.Nothing
                                                                                                                     -> Data.Monoid.mempty
                                                                                                                   (Prelude.Just _v)
                                                                                                                     -> (Data.Monoid.<>)
                                                                                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                             274)
                                                                                                                          ((Prelude..)
                                                                                                                             (\ bs
                                                                                                                                -> (Data.Monoid.<>)
                                                                                                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                        (Prelude.fromIntegral
                                                                                                                                           (Data.ByteString.length
                                                                                                                                              bs)))
                                                                                                                                     (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                        bs))
                                                                                                                             Data.ProtoLens.encodeMessage
                                                                                                                             _v))
                                                                                                                ((Data.Monoid.<>)
                                                                                                                   (case
                                                                                                                        Lens.Family2.view
                                                                                                                          (Data.ProtoLens.Field.field
                                                                                                                             @"maybe'getSchemaResponse")
                                                                                                                          _x
                                                                                                                    of
                                                                                                                      Prelude.Nothing
                                                                                                                        -> Data.Monoid.mempty
                                                                                                                      (Prelude.Just _v)
                                                                                                                        -> (Data.Monoid.<>)
                                                                                                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                282)
                                                                                                                             ((Prelude..)
                                                                                                                                (\ bs
                                                                                                                                   -> (Data.Monoid.<>)
                                                                                                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                           (Prelude.fromIntegral
                                                                                                                                              (Data.ByteString.length
                                                                                                                                                 bs)))
                                                                                                                                        (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                           bs))
                                                                                                                                Data.ProtoLens.encodeMessage
                                                                                                                                _v))
                                                                                                                   ((Data.Monoid.<>)
                                                                                                                      (case
                                                                                                                           Lens.Family2.view
                                                                                                                             (Data.ProtoLens.Field.field
                                                                                                                                @"maybe'authChallenge")
                                                                                                                             _x
                                                                                                                       of
                                                                                                                         Prelude.Nothing
                                                                                                                           -> Data.Monoid.mempty
                                                                                                                         (Prelude.Just _v)
                                                                                                                           -> (Data.Monoid.<>)
                                                                                                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                   290)
                                                                                                                                ((Prelude..)
                                                                                                                                   (\ bs
                                                                                                                                      -> (Data.Monoid.<>)
                                                                                                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                              (Prelude.fromIntegral
                                                                                                                                                 (Data.ByteString.length
                                                                                                                                                    bs)))
                                                                                                                                           (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                              bs))
                                                                                                                                   Data.ProtoLens.encodeMessage
                                                                                                                                   _v))
                                                                                                                      ((Data.Monoid.<>)
                                                                                                                         (case
                                                                                                                              Lens.Family2.view
                                                                                                                                (Data.ProtoLens.Field.field
                                                                                                                                   @"maybe'authResponse")
                                                                                                                                _x
                                                                                                                          of
                                                                                                                            Prelude.Nothing
                                                                                                                              -> Data.Monoid.mempty
                                                                                                                            (Prelude.Just _v)
                                                                                                                              -> (Data.Monoid.<>)
                                                                                                                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                      298)
                                                                                                                                   ((Prelude..)
                                                                                                                                      (\ bs
                                                                                                                                         -> (Data.Monoid.<>)
                                                                                                                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                 (Prelude.fromIntegral
                                                                                                                                                    (Data.ByteString.length
                                                                                                                                                       bs)))
                                                                                                                                              (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                                 bs))
                                                                                                                                      Data.ProtoLens.encodeMessage
                                                                                                                                      _v))
                                                                                                                         ((Data.Monoid.<>)
                                                                                                                            (case
                                                                                                                                 Lens.Family2.view
                                                                                                                                   (Data.ProtoLens.Field.field
                                                                                                                                      @"maybe'ackResponse")
                                                                                                                                   _x
                                                                                                                             of
                                                                                                                               Prelude.Nothing
                                                                                                                                 -> Data.Monoid.mempty
                                                                                                                               (Prelude.Just _v)
                                                                                                                                 -> (Data.Monoid.<>)
                                                                                                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                         306)
                                                                                                                                      ((Prelude..)
                                                                                                                                         (\ bs
                                                                                                                                            -> (Data.Monoid.<>)
                                                                                                                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                    (Prelude.fromIntegral
                                                                                                                                                       (Data.ByteString.length
                                                                                                                                                          bs)))
                                                                                                                                                 (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                                    bs))
                                                                                                                                         Data.ProtoLens.encodeMessage
                                                                                                                                         _v))
                                                                                                                            ((Data.Monoid.<>)
                                                                                                                               (case
                                                                                                                                    Lens.Family2.view
                                                                                                                                      (Data.ProtoLens.Field.field
                                                                                                                                         @"maybe'getOrCreateSchema")
                                                                                                                                      _x
                                                                                                                                of
                                                                                                                                  Prelude.Nothing
                                                                                                                                    -> Data.Monoid.mempty
                                                                                                                                  (Prelude.Just _v)
                                                                                                                                    -> (Data.Monoid.<>)
                                                                                                                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                            314)
                                                                                                                                         ((Prelude..)
                                                                                                                                            (\ bs
                                                                                                                                               -> (Data.Monoid.<>)
                                                                                                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                       (Prelude.fromIntegral
                                                                                                                                                          (Data.ByteString.length
                                                                                                                                                             bs)))
                                                                                                                                                    (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                                       bs))
                                                                                                                                            Data.ProtoLens.encodeMessage
                                                                                                                                            _v))
                                                                                                                               ((Data.Monoid.<>)
                                                                                                                                  (case
                                                                                                                                       Lens.Family2.view
                                                                                                                                         (Data.ProtoLens.Field.field
                                                                                                                                            @"maybe'getOrCreateSchemaResponse")
                                                                                                                                         _x
                                                                                                                                   of
                                                                                                                                     Prelude.Nothing
                                                                                                                                       -> Data.Monoid.mempty
                                                                                                                                     (Prelude.Just _v)
                                                                                                                                       -> (Data.Monoid.<>)
                                                                                                                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                               322)
                                                                                                                                            ((Prelude..)
                                                                                                                                               (\ bs
                                                                                                                                                  -> (Data.Monoid.<>)
                                                                                                                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                          (Prelude.fromIntegral
                                                                                                                                                             (Data.ByteString.length
                                                                                                                                                                bs)))
                                                                                                                                                       (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                                          bs))
                                                                                                                                               Data.ProtoLens.encodeMessage
                                                                                                                                               _v))
                                                                                                                                  ((Data.Monoid.<>)
                                                                                                                                     (case
                                                                                                                                          Lens.Family2.view
                                                                                                                                            (Data.ProtoLens.Field.field
                                                                                                                                               @"maybe'newTxn")
                                                                                                                                            _x
                                                                                                                                      of
                                                                                                                                        Prelude.Nothing
                                                                                                                                          -> Data.Monoid.mempty
                                                                                                                                        (Prelude.Just _v)
                                                                                                                                          -> (Data.Monoid.<>)
                                                                                                                                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                  402)
                                                                                                                                               ((Prelude..)
                                                                                                                                                  (\ bs
                                                                                                                                                     -> (Data.Monoid.<>)
                                                                                                                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                             (Prelude.fromIntegral
                                                                                                                                                                (Data.ByteString.length
                                                                                                                                                                   bs)))
                                                                                                                                                          (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                                             bs))
                                                                                                                                                  Data.ProtoLens.encodeMessage
                                                                                                                                                  _v))
                                                                                                                                     ((Data.Monoid.<>)
                                                                                                                                        (case
                                                                                                                                             Lens.Family2.view
                                                                                                                                               (Data.ProtoLens.Field.field
                                                                                                                                                  @"maybe'newTxnResponse")
                                                                                                                                               _x
                                                                                                                                         of
                                                                                                                                           Prelude.Nothing
                                                                                                                                             -> Data.Monoid.mempty
                                                                                                                                           (Prelude.Just _v)
                                                                                                                                             -> (Data.Monoid.<>)
                                                                                                                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                     410)
                                                                                                                                                  ((Prelude..)
                                                                                                                                                     (\ bs
                                                                                                                                                        -> (Data.Monoid.<>)
                                                                                                                                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                                (Prelude.fromIntegral
                                                                                                                                                                   (Data.ByteString.length
                                                                                                                                                                      bs)))
                                                                                                                                                             (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                                                bs))
                                                                                                                                                     Data.ProtoLens.encodeMessage
                                                                                                                                                     _v))
                                                                                                                                        ((Data.Monoid.<>)
                                                                                                                                           (case
                                                                                                                                                Lens.Family2.view
                                                                                                                                                  (Data.ProtoLens.Field.field
                                                                                                                                                     @"maybe'addPartitionToTxn")
                                                                                                                                                  _x
                                                                                                                                            of
                                                                                                                                              Prelude.Nothing
                                                                                                                                                -> Data.Monoid.mempty
                                                                                                                                              (Prelude.Just _v)
                                                                                                                                                -> (Data.Monoid.<>)
                                                                                                                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                        418)
                                                                                                                                                     ((Prelude..)
                                                                                                                                                        (\ bs
                                                                                                                                                           -> (Data.Monoid.<>)
                                                                                                                                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                                   (Prelude.fromIntegral
                                                                                                                                                                      (Data.ByteString.length
                                                                                                                                                                         bs)))
                                                                                                                                                                (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                                                   bs))
                                                                                                                                                        Data.ProtoLens.encodeMessage
                                                                                                                                                        _v))
                                                                                                                                           ((Data.Monoid.<>)
                                                                                                                                              (case
                                                                                                                                                   Lens.Family2.view
                                                                                                                                                     (Data.ProtoLens.Field.field
                                                                                                                                                        @"maybe'addPartitionToTxnResponse")
                                                                                                                                                     _x
                                                                                                                                               of
                                                                                                                                                 Prelude.Nothing
                                                                                                                                                   -> Data.Monoid.mempty
                                                                                                                                                 (Prelude.Just _v)
                                                                                                                                                   -> (Data.Monoid.<>)
                                                                                                                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                           426)
                                                                                                                                                        ((Prelude..)
                                                                                                                                                           (\ bs
                                                                                                                                                              -> (Data.Monoid.<>)
                                                                                                                                                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                                      (Prelude.fromIntegral
                                                                                                                                                                         (Data.ByteString.length
                                                                                                                                                                            bs)))
                                                                                                                                                                   (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                                                      bs))
                                                                                                                                                           Data.ProtoLens.encodeMessage
                                                                                                                                                           _v))
                                                                                                                                              ((Data.Monoid.<>)
                                                                                                                                                 (case
                                                                                                                                                      Lens.Family2.view
                                                                                                                                                        (Data.ProtoLens.Field.field
                                                                                                                                                           @"maybe'addSubscriptionToTxn")
                                                                                                                                                        _x
                                                                                                                                                  of
                                                                                                                                                    Prelude.Nothing
                                                                                                                                                      -> Data.Monoid.mempty
                                                                                                                                                    (Prelude.Just _v)
                                                                                                                                                      -> (Data.Monoid.<>)
                                                                                                                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                              434)
                                                                                                                                                           ((Prelude..)
                                                                                                                                                              (\ bs
                                                                                                                                                                 -> (Data.Monoid.<>)
                                                                                                                                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                                         (Prelude.fromIntegral
                                                                                                                                                                            (Data.ByteString.length
                                                                                                                                                                               bs)))
                                                                                                                                                                      (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                                                         bs))
                                                                                                                                                              Data.ProtoLens.encodeMessage
                                                                                                                                                              _v))
                                                                                                                                                 ((Data.Monoid.<>)
                                                                                                                                                    (case
                                                                                                                                                         Lens.Family2.view
                                                                                                                                                           (Data.ProtoLens.Field.field
                                                                                                                                                              @"maybe'addSubscriptionToTxnResponse")
                                                                                                                                                           _x
                                                                                                                                                     of
                                                                                                                                                       Prelude.Nothing
                                                                                                                                                         -> Data.Monoid.mempty
                                                                                                                                                       (Prelude.Just _v)
                                                                                                                                                         -> (Data.Monoid.<>)
                                                                                                                                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                                 442)
                                                                                                                                                              ((Prelude..)
                                                                                                                                                                 (\ bs
                                                                                                                                                                    -> (Data.Monoid.<>)
                                                                                                                                                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                                            (Prelude.fromIntegral
                                                                                                                                                                               (Data.ByteString.length
                                                                                                                                                                                  bs)))
                                                                                                                                                                         (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                                                            bs))
                                                                                                                                                                 Data.ProtoLens.encodeMessage
                                                                                                                                                                 _v))
                                                                                                                                                    ((Data.Monoid.<>)
                                                                                                                                                       (case
                                                                                                                                                            Lens.Family2.view
                                                                                                                                                              (Data.ProtoLens.Field.field
                                                                                                                                                                 @"maybe'endTxn")
                                                                                                                                                              _x
                                                                                                                                                        of
                                                                                                                                                          Prelude.Nothing
                                                                                                                                                            -> Data.Monoid.mempty
                                                                                                                                                          (Prelude.Just _v)
                                                                                                                                                            -> (Data.Monoid.<>)
                                                                                                                                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                                    450)
                                                                                                                                                                 ((Prelude..)
                                                                                                                                                                    (\ bs
                                                                                                                                                                       -> (Data.Monoid.<>)
                                                                                                                                                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                                               (Prelude.fromIntegral
                                                                                                                                                                                  (Data.ByteString.length
                                                                                                                                                                                     bs)))
                                                                                                                                                                            (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                                                               bs))
                                                                                                                                                                    Data.ProtoLens.encodeMessage
                                                                                                                                                                    _v))
                                                                                                                                                       ((Data.Monoid.<>)
                                                                                                                                                          (case
                                                                                                                                                               Lens.Family2.view
                                                                                                                                                                 (Data.ProtoLens.Field.field
                                                                                                                                                                    @"maybe'endTxnResponse")
                                                                                                                                                                 _x
                                                                                                                                                           of
                                                                                                                                                             Prelude.Nothing
                                                                                                                                                               -> Data.Monoid.mempty
                                                                                                                                                             (Prelude.Just _v)
                                                                                                                                                               -> (Data.Monoid.<>)
                                                                                                                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                                       458)
                                                                                                                                                                    ((Prelude..)
                                                                                                                                                                       (\ bs
                                                                                                                                                                          -> (Data.Monoid.<>)
                                                                                                                                                                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                                                  (Prelude.fromIntegral
                                                                                                                                                                                     (Data.ByteString.length
                                                                                                                                                                                        bs)))
                                                                                                                                                                               (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                                                                  bs))
                                                                                                                                                                       Data.ProtoLens.encodeMessage
                                                                                                                                                                       _v))
                                                                                                                                                          ((Data.Monoid.<>)
                                                                                                                                                             (case
                                                                                                                                                                  Lens.Family2.view
                                                                                                                                                                    (Data.ProtoLens.Field.field
                                                                                                                                                                       @"maybe'endTxnOnPartition")
                                                                                                                                                                    _x
                                                                                                                                                              of
                                                                                                                                                                Prelude.Nothing
                                                                                                                                                                  -> Data.Monoid.mempty
                                                                                                                                                                (Prelude.Just _v)
                                                                                                                                                                  -> (Data.Monoid.<>)
                                                                                                                                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                                          466)
                                                                                                                                                                       ((Prelude..)
                                                                                                                                                                          (\ bs
                                                                                                                                                                             -> (Data.Monoid.<>)
                                                                                                                                                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                                                     (Prelude.fromIntegral
                                                                                                                                                                                        (Data.ByteString.length
                                                                                                                                                                                           bs)))
                                                                                                                                                                                  (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                                                                     bs))
                                                                                                                                                                          Data.ProtoLens.encodeMessage
                                                                                                                                                                          _v))
                                                                                                                                                             ((Data.Monoid.<>)
                                                                                                                                                                (case
                                                                                                                                                                     Lens.Family2.view
                                                                                                                                                                       (Data.ProtoLens.Field.field
                                                                                                                                                                          @"maybe'endTxnOnPartitionResponse")
                                                                                                                                                                       _x
                                                                                                                                                                 of
                                                                                                                                                                   Prelude.Nothing
                                                                                                                                                                     -> Data.Monoid.mempty
                                                                                                                                                                   (Prelude.Just _v)
                                                                                                                                                                     -> (Data.Monoid.<>)
                                                                                                                                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                                             474)
                                                                                                                                                                          ((Prelude..)
                                                                                                                                                                             (\ bs
                                                                                                                                                                                -> (Data.Monoid.<>)
                                                                                                                                                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                                                        (Prelude.fromIntegral
                                                                                                                                                                                           (Data.ByteString.length
                                                                                                                                                                                              bs)))
                                                                                                                                                                                     (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                                                                        bs))
                                                                                                                                                                             Data.ProtoLens.encodeMessage
                                                                                                                                                                             _v))
                                                                                                                                                                ((Data.Monoid.<>)
                                                                                                                                                                   (case
                                                                                                                                                                        Lens.Family2.view
                                                                                                                                                                          (Data.ProtoLens.Field.field
                                                                                                                                                                             @"maybe'endTxnOnSubscription")
                                                                                                                                                                          _x
                                                                                                                                                                    of
                                                                                                                                                                      Prelude.Nothing
                                                                                                                                                                        -> Data.Monoid.mempty
                                                                                                                                                                      (Prelude.Just _v)
                                                                                                                                                                        -> (Data.Monoid.<>)
                                                                                                                                                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                                                482)
                                                                                                                                                                             ((Prelude..)
                                                                                                                                                                                (\ bs
                                                                                                                                                                                   -> (Data.Monoid.<>)
                                                                                                                                                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                                                           (Prelude.fromIntegral
                                                                                                                                                                                              (Data.ByteString.length
                                                                                                                                                                                                 bs)))
                                                                                                                                                                                        (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                                                                           bs))
                                                                                                                                                                                Data.ProtoLens.encodeMessage
                                                                                                                                                                                _v))
                                                                                                                                                                   ((Data.Monoid.<>)
                                                                                                                                                                      (case
                                                                                                                                                                           Lens.Family2.view
                                                                                                                                                                             (Data.ProtoLens.Field.field
                                                                                                                                                                                @"maybe'endTxnOnSubscriptionResponse")
                                                                                                                                                                             _x
                                                                                                                                                                       of
                                                                                                                                                                         Prelude.Nothing
                                                                                                                                                                           -> Data.Monoid.mempty
                                                                                                                                                                         (Prelude.Just _v)
                                                                                                                                                                           -> (Data.Monoid.<>)
                                                                                                                                                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                                                   490)
                                                                                                                                                                                ((Prelude..)
                                                                                                                                                                                   (\ bs
                                                                                                                                                                                      -> (Data.Monoid.<>)
                                                                                                                                                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                                                                                              (Prelude.fromIntegral
                                                                                                                                                                                                 (Data.ByteString.length
                                                                                                                                                                                                    bs)))
                                                                                                                                                                                           (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                                                                                                              bs))
                                                                                                                                                                                   Data.ProtoLens.encodeMessage
                                                                                                                                                                                   _v))
                                                                                                                                                                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                                                                                                                                         (Lens.Family2.view
                                                                                                                                                                            Data.ProtoLens.unknownFields
                                                                                                                                                                            _x)))))))))))))))))))))))))))))))))))))))))))))))))))))
instance Control.DeepSeq.NFData BaseCommand where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_BaseCommand'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_BaseCommand'type' x__)
                (Control.DeepSeq.deepseq
                   (_BaseCommand'connect x__)
                   (Control.DeepSeq.deepseq
                      (_BaseCommand'connected x__)
                      (Control.DeepSeq.deepseq
                         (_BaseCommand'subscribe x__)
                         (Control.DeepSeq.deepseq
                            (_BaseCommand'producer x__)
                            (Control.DeepSeq.deepseq
                               (_BaseCommand'send x__)
                               (Control.DeepSeq.deepseq
                                  (_BaseCommand'sendReceipt x__)
                                  (Control.DeepSeq.deepseq
                                     (_BaseCommand'sendError x__)
                                     (Control.DeepSeq.deepseq
                                        (_BaseCommand'message x__)
                                        (Control.DeepSeq.deepseq
                                           (_BaseCommand'ack x__)
                                           (Control.DeepSeq.deepseq
                                              (_BaseCommand'flow x__)
                                              (Control.DeepSeq.deepseq
                                                 (_BaseCommand'unsubscribe x__)
                                                 (Control.DeepSeq.deepseq
                                                    (_BaseCommand'success x__)
                                                    (Control.DeepSeq.deepseq
                                                       (_BaseCommand'error x__)
                                                       (Control.DeepSeq.deepseq
                                                          (_BaseCommand'closeProducer x__)
                                                          (Control.DeepSeq.deepseq
                                                             (_BaseCommand'closeConsumer x__)
                                                             (Control.DeepSeq.deepseq
                                                                (_BaseCommand'producerSuccess x__)
                                                                (Control.DeepSeq.deepseq
                                                                   (_BaseCommand'ping x__)
                                                                   (Control.DeepSeq.deepseq
                                                                      (_BaseCommand'pong x__)
                                                                      (Control.DeepSeq.deepseq
                                                                         (_BaseCommand'redeliverUnacknowledgedMessages
                                                                            x__)
                                                                         (Control.DeepSeq.deepseq
                                                                            (_BaseCommand'partitionMetadata
                                                                               x__)
                                                                            (Control.DeepSeq.deepseq
                                                                               (_BaseCommand'partitionMetadataResponse
                                                                                  x__)
                                                                               (Control.DeepSeq.deepseq
                                                                                  (_BaseCommand'lookupTopic
                                                                                     x__)
                                                                                  (Control.DeepSeq.deepseq
                                                                                     (_BaseCommand'lookupTopicResponse
                                                                                        x__)
                                                                                     (Control.DeepSeq.deepseq
                                                                                        (_BaseCommand'consumerStats
                                                                                           x__)
                                                                                        (Control.DeepSeq.deepseq
                                                                                           (_BaseCommand'consumerStatsResponse
                                                                                              x__)
                                                                                           (Control.DeepSeq.deepseq
                                                                                              (_BaseCommand'reachedEndOfTopic
                                                                                                 x__)
                                                                                              (Control.DeepSeq.deepseq
                                                                                                 (_BaseCommand'seek
                                                                                                    x__)
                                                                                                 (Control.DeepSeq.deepseq
                                                                                                    (_BaseCommand'getLastMessageId
                                                                                                       x__)
                                                                                                    (Control.DeepSeq.deepseq
                                                                                                       (_BaseCommand'getLastMessageIdResponse
                                                                                                          x__)
                                                                                                       (Control.DeepSeq.deepseq
                                                                                                          (_BaseCommand'activeConsumerChange
                                                                                                             x__)
                                                                                                          (Control.DeepSeq.deepseq
                                                                                                             (_BaseCommand'getTopicsOfNamespace
                                                                                                                x__)
                                                                                                             (Control.DeepSeq.deepseq
                                                                                                                (_BaseCommand'getTopicsOfNamespaceResponse
                                                                                                                   x__)
                                                                                                                (Control.DeepSeq.deepseq
                                                                                                                   (_BaseCommand'getSchema
                                                                                                                      x__)
                                                                                                                   (Control.DeepSeq.deepseq
                                                                                                                      (_BaseCommand'getSchemaResponse
                                                                                                                         x__)
                                                                                                                      (Control.DeepSeq.deepseq
                                                                                                                         (_BaseCommand'authChallenge
                                                                                                                            x__)
                                                                                                                         (Control.DeepSeq.deepseq
                                                                                                                            (_BaseCommand'authResponse
                                                                                                                               x__)
                                                                                                                            (Control.DeepSeq.deepseq
                                                                                                                               (_BaseCommand'ackResponse
                                                                                                                                  x__)
                                                                                                                               (Control.DeepSeq.deepseq
                                                                                                                                  (_BaseCommand'getOrCreateSchema
                                                                                                                                     x__)
                                                                                                                                  (Control.DeepSeq.deepseq
                                                                                                                                     (_BaseCommand'getOrCreateSchemaResponse
                                                                                                                                        x__)
                                                                                                                                     (Control.DeepSeq.deepseq
                                                                                                                                        (_BaseCommand'newTxn
                                                                                                                                           x__)
                                                                                                                                        (Control.DeepSeq.deepseq
                                                                                                                                           (_BaseCommand'newTxnResponse
                                                                                                                                              x__)
                                                                                                                                           (Control.DeepSeq.deepseq
                                                                                                                                              (_BaseCommand'addPartitionToTxn
                                                                                                                                                 x__)
                                                                                                                                              (Control.DeepSeq.deepseq
                                                                                                                                                 (_BaseCommand'addPartitionToTxnResponse
                                                                                                                                                    x__)
                                                                                                                                                 (Control.DeepSeq.deepseq
                                                                                                                                                    (_BaseCommand'addSubscriptionToTxn
                                                                                                                                                       x__)
                                                                                                                                                    (Control.DeepSeq.deepseq
                                                                                                                                                       (_BaseCommand'addSubscriptionToTxnResponse
                                                                                                                                                          x__)
                                                                                                                                                       (Control.DeepSeq.deepseq
                                                                                                                                                          (_BaseCommand'endTxn
                                                                                                                                                             x__)
                                                                                                                                                          (Control.DeepSeq.deepseq
                                                                                                                                                             (_BaseCommand'endTxnResponse
                                                                                                                                                                x__)
                                                                                                                                                             (Control.DeepSeq.deepseq
                                                                                                                                                                (_BaseCommand'endTxnOnPartition
                                                                                                                                                                   x__)
                                                                                                                                                                (Control.DeepSeq.deepseq
                                                                                                                                                                   (_BaseCommand'endTxnOnPartitionResponse
                                                                                                                                                                      x__)
                                                                                                                                                                   (Control.DeepSeq.deepseq
                                                                                                                                                                      (_BaseCommand'endTxnOnSubscription
                                                                                                                                                                         x__)
                                                                                                                                                                      (Control.DeepSeq.deepseq
                                                                                                                                                                         (_BaseCommand'endTxnOnSubscriptionResponse
                                                                                                                                                                            x__)
                                                                                                                                                                         ()))))))))))))))))))))))))))))))))))))))))))))))))))))
data BaseCommand'Type
  = BaseCommand'CONNECT |
    BaseCommand'CONNECTED |
    BaseCommand'SUBSCRIBE |
    BaseCommand'PRODUCER |
    BaseCommand'SEND |
    BaseCommand'SEND_RECEIPT |
    BaseCommand'SEND_ERROR |
    BaseCommand'MESSAGE |
    BaseCommand'ACK |
    BaseCommand'FLOW |
    BaseCommand'UNSUBSCRIBE |
    BaseCommand'SUCCESS |
    BaseCommand'ERROR |
    BaseCommand'CLOSE_PRODUCER |
    BaseCommand'CLOSE_CONSUMER |
    BaseCommand'PRODUCER_SUCCESS |
    BaseCommand'PING |
    BaseCommand'PONG |
    BaseCommand'REDELIVER_UNACKNOWLEDGED_MESSAGES |
    BaseCommand'PARTITIONED_METADATA |
    BaseCommand'PARTITIONED_METADATA_RESPONSE |
    BaseCommand'LOOKUP |
    BaseCommand'LOOKUP_RESPONSE |
    BaseCommand'CONSUMER_STATS |
    BaseCommand'CONSUMER_STATS_RESPONSE |
    BaseCommand'REACHED_END_OF_TOPIC |
    BaseCommand'SEEK |
    BaseCommand'GET_LAST_MESSAGE_ID |
    BaseCommand'GET_LAST_MESSAGE_ID_RESPONSE |
    BaseCommand'ACTIVE_CONSUMER_CHANGE |
    BaseCommand'GET_TOPICS_OF_NAMESPACE |
    BaseCommand'GET_TOPICS_OF_NAMESPACE_RESPONSE |
    BaseCommand'GET_SCHEMA |
    BaseCommand'GET_SCHEMA_RESPONSE |
    BaseCommand'AUTH_CHALLENGE |
    BaseCommand'AUTH_RESPONSE |
    BaseCommand'ACK_RESPONSE |
    BaseCommand'GET_OR_CREATE_SCHEMA |
    BaseCommand'GET_OR_CREATE_SCHEMA_RESPONSE |
    BaseCommand'NEW_TXN |
    BaseCommand'NEW_TXN_RESPONSE |
    BaseCommand'ADD_PARTITION_TO_TXN |
    BaseCommand'ADD_PARTITION_TO_TXN_RESPONSE |
    BaseCommand'ADD_SUBSCRIPTION_TO_TXN |
    BaseCommand'ADD_SUBSCRIPTION_TO_TXN_RESPONSE |
    BaseCommand'END_TXN |
    BaseCommand'END_TXN_RESPONSE |
    BaseCommand'END_TXN_ON_PARTITION |
    BaseCommand'END_TXN_ON_PARTITION_RESPONSE |
    BaseCommand'END_TXN_ON_SUBSCRIPTION |
    BaseCommand'END_TXN_ON_SUBSCRIPTION_RESPONSE
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum BaseCommand'Type where
  maybeToEnum 2 = Prelude.Just BaseCommand'CONNECT
  maybeToEnum 3 = Prelude.Just BaseCommand'CONNECTED
  maybeToEnum 4 = Prelude.Just BaseCommand'SUBSCRIBE
  maybeToEnum 5 = Prelude.Just BaseCommand'PRODUCER
  maybeToEnum 6 = Prelude.Just BaseCommand'SEND
  maybeToEnum 7 = Prelude.Just BaseCommand'SEND_RECEIPT
  maybeToEnum 8 = Prelude.Just BaseCommand'SEND_ERROR
  maybeToEnum 9 = Prelude.Just BaseCommand'MESSAGE
  maybeToEnum 10 = Prelude.Just BaseCommand'ACK
  maybeToEnum 11 = Prelude.Just BaseCommand'FLOW
  maybeToEnum 12 = Prelude.Just BaseCommand'UNSUBSCRIBE
  maybeToEnum 13 = Prelude.Just BaseCommand'SUCCESS
  maybeToEnum 14 = Prelude.Just BaseCommand'ERROR
  maybeToEnum 15 = Prelude.Just BaseCommand'CLOSE_PRODUCER
  maybeToEnum 16 = Prelude.Just BaseCommand'CLOSE_CONSUMER
  maybeToEnum 17 = Prelude.Just BaseCommand'PRODUCER_SUCCESS
  maybeToEnum 18 = Prelude.Just BaseCommand'PING
  maybeToEnum 19 = Prelude.Just BaseCommand'PONG
  maybeToEnum 20
    = Prelude.Just BaseCommand'REDELIVER_UNACKNOWLEDGED_MESSAGES
  maybeToEnum 21 = Prelude.Just BaseCommand'PARTITIONED_METADATA
  maybeToEnum 22
    = Prelude.Just BaseCommand'PARTITIONED_METADATA_RESPONSE
  maybeToEnum 23 = Prelude.Just BaseCommand'LOOKUP
  maybeToEnum 24 = Prelude.Just BaseCommand'LOOKUP_RESPONSE
  maybeToEnum 25 = Prelude.Just BaseCommand'CONSUMER_STATS
  maybeToEnum 26 = Prelude.Just BaseCommand'CONSUMER_STATS_RESPONSE
  maybeToEnum 27 = Prelude.Just BaseCommand'REACHED_END_OF_TOPIC
  maybeToEnum 28 = Prelude.Just BaseCommand'SEEK
  maybeToEnum 29 = Prelude.Just BaseCommand'GET_LAST_MESSAGE_ID
  maybeToEnum 30
    = Prelude.Just BaseCommand'GET_LAST_MESSAGE_ID_RESPONSE
  maybeToEnum 31 = Prelude.Just BaseCommand'ACTIVE_CONSUMER_CHANGE
  maybeToEnum 32 = Prelude.Just BaseCommand'GET_TOPICS_OF_NAMESPACE
  maybeToEnum 33
    = Prelude.Just BaseCommand'GET_TOPICS_OF_NAMESPACE_RESPONSE
  maybeToEnum 34 = Prelude.Just BaseCommand'GET_SCHEMA
  maybeToEnum 35 = Prelude.Just BaseCommand'GET_SCHEMA_RESPONSE
  maybeToEnum 36 = Prelude.Just BaseCommand'AUTH_CHALLENGE
  maybeToEnum 37 = Prelude.Just BaseCommand'AUTH_RESPONSE
  maybeToEnum 38 = Prelude.Just BaseCommand'ACK_RESPONSE
  maybeToEnum 39 = Prelude.Just BaseCommand'GET_OR_CREATE_SCHEMA
  maybeToEnum 40
    = Prelude.Just BaseCommand'GET_OR_CREATE_SCHEMA_RESPONSE
  maybeToEnum 50 = Prelude.Just BaseCommand'NEW_TXN
  maybeToEnum 51 = Prelude.Just BaseCommand'NEW_TXN_RESPONSE
  maybeToEnum 52 = Prelude.Just BaseCommand'ADD_PARTITION_TO_TXN
  maybeToEnum 53
    = Prelude.Just BaseCommand'ADD_PARTITION_TO_TXN_RESPONSE
  maybeToEnum 54 = Prelude.Just BaseCommand'ADD_SUBSCRIPTION_TO_TXN
  maybeToEnum 55
    = Prelude.Just BaseCommand'ADD_SUBSCRIPTION_TO_TXN_RESPONSE
  maybeToEnum 56 = Prelude.Just BaseCommand'END_TXN
  maybeToEnum 57 = Prelude.Just BaseCommand'END_TXN_RESPONSE
  maybeToEnum 58 = Prelude.Just BaseCommand'END_TXN_ON_PARTITION
  maybeToEnum 59
    = Prelude.Just BaseCommand'END_TXN_ON_PARTITION_RESPONSE
  maybeToEnum 60 = Prelude.Just BaseCommand'END_TXN_ON_SUBSCRIPTION
  maybeToEnum 61
    = Prelude.Just BaseCommand'END_TXN_ON_SUBSCRIPTION_RESPONSE
  maybeToEnum _ = Prelude.Nothing
  showEnum BaseCommand'CONNECT = "CONNECT"
  showEnum BaseCommand'CONNECTED = "CONNECTED"
  showEnum BaseCommand'SUBSCRIBE = "SUBSCRIBE"
  showEnum BaseCommand'PRODUCER = "PRODUCER"
  showEnum BaseCommand'SEND = "SEND"
  showEnum BaseCommand'SEND_RECEIPT = "SEND_RECEIPT"
  showEnum BaseCommand'SEND_ERROR = "SEND_ERROR"
  showEnum BaseCommand'MESSAGE = "MESSAGE"
  showEnum BaseCommand'ACK = "ACK"
  showEnum BaseCommand'FLOW = "FLOW"
  showEnum BaseCommand'UNSUBSCRIBE = "UNSUBSCRIBE"
  showEnum BaseCommand'SUCCESS = "SUCCESS"
  showEnum BaseCommand'ERROR = "ERROR"
  showEnum BaseCommand'CLOSE_PRODUCER = "CLOSE_PRODUCER"
  showEnum BaseCommand'CLOSE_CONSUMER = "CLOSE_CONSUMER"
  showEnum BaseCommand'PRODUCER_SUCCESS = "PRODUCER_SUCCESS"
  showEnum BaseCommand'PING = "PING"
  showEnum BaseCommand'PONG = "PONG"
  showEnum BaseCommand'REDELIVER_UNACKNOWLEDGED_MESSAGES
    = "REDELIVER_UNACKNOWLEDGED_MESSAGES"
  showEnum BaseCommand'PARTITIONED_METADATA = "PARTITIONED_METADATA"
  showEnum BaseCommand'PARTITIONED_METADATA_RESPONSE
    = "PARTITIONED_METADATA_RESPONSE"
  showEnum BaseCommand'LOOKUP = "LOOKUP"
  showEnum BaseCommand'LOOKUP_RESPONSE = "LOOKUP_RESPONSE"
  showEnum BaseCommand'CONSUMER_STATS = "CONSUMER_STATS"
  showEnum BaseCommand'CONSUMER_STATS_RESPONSE
    = "CONSUMER_STATS_RESPONSE"
  showEnum BaseCommand'REACHED_END_OF_TOPIC = "REACHED_END_OF_TOPIC"
  showEnum BaseCommand'SEEK = "SEEK"
  showEnum BaseCommand'GET_LAST_MESSAGE_ID = "GET_LAST_MESSAGE_ID"
  showEnum BaseCommand'GET_LAST_MESSAGE_ID_RESPONSE
    = "GET_LAST_MESSAGE_ID_RESPONSE"
  showEnum BaseCommand'ACTIVE_CONSUMER_CHANGE
    = "ACTIVE_CONSUMER_CHANGE"
  showEnum BaseCommand'GET_TOPICS_OF_NAMESPACE
    = "GET_TOPICS_OF_NAMESPACE"
  showEnum BaseCommand'GET_TOPICS_OF_NAMESPACE_RESPONSE
    = "GET_TOPICS_OF_NAMESPACE_RESPONSE"
  showEnum BaseCommand'GET_SCHEMA = "GET_SCHEMA"
  showEnum BaseCommand'GET_SCHEMA_RESPONSE = "GET_SCHEMA_RESPONSE"
  showEnum BaseCommand'AUTH_CHALLENGE = "AUTH_CHALLENGE"
  showEnum BaseCommand'AUTH_RESPONSE = "AUTH_RESPONSE"
  showEnum BaseCommand'ACK_RESPONSE = "ACK_RESPONSE"
  showEnum BaseCommand'GET_OR_CREATE_SCHEMA = "GET_OR_CREATE_SCHEMA"
  showEnum BaseCommand'GET_OR_CREATE_SCHEMA_RESPONSE
    = "GET_OR_CREATE_SCHEMA_RESPONSE"
  showEnum BaseCommand'NEW_TXN = "NEW_TXN"
  showEnum BaseCommand'NEW_TXN_RESPONSE = "NEW_TXN_RESPONSE"
  showEnum BaseCommand'ADD_PARTITION_TO_TXN = "ADD_PARTITION_TO_TXN"
  showEnum BaseCommand'ADD_PARTITION_TO_TXN_RESPONSE
    = "ADD_PARTITION_TO_TXN_RESPONSE"
  showEnum BaseCommand'ADD_SUBSCRIPTION_TO_TXN
    = "ADD_SUBSCRIPTION_TO_TXN"
  showEnum BaseCommand'ADD_SUBSCRIPTION_TO_TXN_RESPONSE
    = "ADD_SUBSCRIPTION_TO_TXN_RESPONSE"
  showEnum BaseCommand'END_TXN = "END_TXN"
  showEnum BaseCommand'END_TXN_RESPONSE = "END_TXN_RESPONSE"
  showEnum BaseCommand'END_TXN_ON_PARTITION = "END_TXN_ON_PARTITION"
  showEnum BaseCommand'END_TXN_ON_PARTITION_RESPONSE
    = "END_TXN_ON_PARTITION_RESPONSE"
  showEnum BaseCommand'END_TXN_ON_SUBSCRIPTION
    = "END_TXN_ON_SUBSCRIPTION"
  showEnum BaseCommand'END_TXN_ON_SUBSCRIPTION_RESPONSE
    = "END_TXN_ON_SUBSCRIPTION_RESPONSE"
  readEnum k
    | (Prelude.==) k "CONNECT" = Prelude.Just BaseCommand'CONNECT
    | (Prelude.==) k "CONNECTED" = Prelude.Just BaseCommand'CONNECTED
    | (Prelude.==) k "SUBSCRIBE" = Prelude.Just BaseCommand'SUBSCRIBE
    | (Prelude.==) k "PRODUCER" = Prelude.Just BaseCommand'PRODUCER
    | (Prelude.==) k "SEND" = Prelude.Just BaseCommand'SEND
    | (Prelude.==) k "SEND_RECEIPT"
    = Prelude.Just BaseCommand'SEND_RECEIPT
    | (Prelude.==) k "SEND_ERROR" = Prelude.Just BaseCommand'SEND_ERROR
    | (Prelude.==) k "MESSAGE" = Prelude.Just BaseCommand'MESSAGE
    | (Prelude.==) k "ACK" = Prelude.Just BaseCommand'ACK
    | (Prelude.==) k "FLOW" = Prelude.Just BaseCommand'FLOW
    | (Prelude.==) k "UNSUBSCRIBE"
    = Prelude.Just BaseCommand'UNSUBSCRIBE
    | (Prelude.==) k "SUCCESS" = Prelude.Just BaseCommand'SUCCESS
    | (Prelude.==) k "ERROR" = Prelude.Just BaseCommand'ERROR
    | (Prelude.==) k "CLOSE_PRODUCER"
    = Prelude.Just BaseCommand'CLOSE_PRODUCER
    | (Prelude.==) k "CLOSE_CONSUMER"
    = Prelude.Just BaseCommand'CLOSE_CONSUMER
    | (Prelude.==) k "PRODUCER_SUCCESS"
    = Prelude.Just BaseCommand'PRODUCER_SUCCESS
    | (Prelude.==) k "PING" = Prelude.Just BaseCommand'PING
    | (Prelude.==) k "PONG" = Prelude.Just BaseCommand'PONG
    | (Prelude.==) k "REDELIVER_UNACKNOWLEDGED_MESSAGES"
    = Prelude.Just BaseCommand'REDELIVER_UNACKNOWLEDGED_MESSAGES
    | (Prelude.==) k "PARTITIONED_METADATA"
    = Prelude.Just BaseCommand'PARTITIONED_METADATA
    | (Prelude.==) k "PARTITIONED_METADATA_RESPONSE"
    = Prelude.Just BaseCommand'PARTITIONED_METADATA_RESPONSE
    | (Prelude.==) k "LOOKUP" = Prelude.Just BaseCommand'LOOKUP
    | (Prelude.==) k "LOOKUP_RESPONSE"
    = Prelude.Just BaseCommand'LOOKUP_RESPONSE
    | (Prelude.==) k "CONSUMER_STATS"
    = Prelude.Just BaseCommand'CONSUMER_STATS
    | (Prelude.==) k "CONSUMER_STATS_RESPONSE"
    = Prelude.Just BaseCommand'CONSUMER_STATS_RESPONSE
    | (Prelude.==) k "REACHED_END_OF_TOPIC"
    = Prelude.Just BaseCommand'REACHED_END_OF_TOPIC
    | (Prelude.==) k "SEEK" = Prelude.Just BaseCommand'SEEK
    | (Prelude.==) k "GET_LAST_MESSAGE_ID"
    = Prelude.Just BaseCommand'GET_LAST_MESSAGE_ID
    | (Prelude.==) k "GET_LAST_MESSAGE_ID_RESPONSE"
    = Prelude.Just BaseCommand'GET_LAST_MESSAGE_ID_RESPONSE
    | (Prelude.==) k "ACTIVE_CONSUMER_CHANGE"
    = Prelude.Just BaseCommand'ACTIVE_CONSUMER_CHANGE
    | (Prelude.==) k "GET_TOPICS_OF_NAMESPACE"
    = Prelude.Just BaseCommand'GET_TOPICS_OF_NAMESPACE
    | (Prelude.==) k "GET_TOPICS_OF_NAMESPACE_RESPONSE"
    = Prelude.Just BaseCommand'GET_TOPICS_OF_NAMESPACE_RESPONSE
    | (Prelude.==) k "GET_SCHEMA" = Prelude.Just BaseCommand'GET_SCHEMA
    | (Prelude.==) k "GET_SCHEMA_RESPONSE"
    = Prelude.Just BaseCommand'GET_SCHEMA_RESPONSE
    | (Prelude.==) k "AUTH_CHALLENGE"
    = Prelude.Just BaseCommand'AUTH_CHALLENGE
    | (Prelude.==) k "AUTH_RESPONSE"
    = Prelude.Just BaseCommand'AUTH_RESPONSE
    | (Prelude.==) k "ACK_RESPONSE"
    = Prelude.Just BaseCommand'ACK_RESPONSE
    | (Prelude.==) k "GET_OR_CREATE_SCHEMA"
    = Prelude.Just BaseCommand'GET_OR_CREATE_SCHEMA
    | (Prelude.==) k "GET_OR_CREATE_SCHEMA_RESPONSE"
    = Prelude.Just BaseCommand'GET_OR_CREATE_SCHEMA_RESPONSE
    | (Prelude.==) k "NEW_TXN" = Prelude.Just BaseCommand'NEW_TXN
    | (Prelude.==) k "NEW_TXN_RESPONSE"
    = Prelude.Just BaseCommand'NEW_TXN_RESPONSE
    | (Prelude.==) k "ADD_PARTITION_TO_TXN"
    = Prelude.Just BaseCommand'ADD_PARTITION_TO_TXN
    | (Prelude.==) k "ADD_PARTITION_TO_TXN_RESPONSE"
    = Prelude.Just BaseCommand'ADD_PARTITION_TO_TXN_RESPONSE
    | (Prelude.==) k "ADD_SUBSCRIPTION_TO_TXN"
    = Prelude.Just BaseCommand'ADD_SUBSCRIPTION_TO_TXN
    | (Prelude.==) k "ADD_SUBSCRIPTION_TO_TXN_RESPONSE"
    = Prelude.Just BaseCommand'ADD_SUBSCRIPTION_TO_TXN_RESPONSE
    | (Prelude.==) k "END_TXN" = Prelude.Just BaseCommand'END_TXN
    | (Prelude.==) k "END_TXN_RESPONSE"
    = Prelude.Just BaseCommand'END_TXN_RESPONSE
    | (Prelude.==) k "END_TXN_ON_PARTITION"
    = Prelude.Just BaseCommand'END_TXN_ON_PARTITION
    | (Prelude.==) k "END_TXN_ON_PARTITION_RESPONSE"
    = Prelude.Just BaseCommand'END_TXN_ON_PARTITION_RESPONSE
    | (Prelude.==) k "END_TXN_ON_SUBSCRIPTION"
    = Prelude.Just BaseCommand'END_TXN_ON_SUBSCRIPTION
    | (Prelude.==) k "END_TXN_ON_SUBSCRIPTION_RESPONSE"
    = Prelude.Just BaseCommand'END_TXN_ON_SUBSCRIPTION_RESPONSE
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded BaseCommand'Type where
  minBound = BaseCommand'CONNECT
  maxBound = BaseCommand'END_TXN_ON_SUBSCRIPTION_RESPONSE
instance Prelude.Enum BaseCommand'Type where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum Type: " (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum BaseCommand'CONNECT = 2
  fromEnum BaseCommand'CONNECTED = 3
  fromEnum BaseCommand'SUBSCRIBE = 4
  fromEnum BaseCommand'PRODUCER = 5
  fromEnum BaseCommand'SEND = 6
  fromEnum BaseCommand'SEND_RECEIPT = 7
  fromEnum BaseCommand'SEND_ERROR = 8
  fromEnum BaseCommand'MESSAGE = 9
  fromEnum BaseCommand'ACK = 10
  fromEnum BaseCommand'FLOW = 11
  fromEnum BaseCommand'UNSUBSCRIBE = 12
  fromEnum BaseCommand'SUCCESS = 13
  fromEnum BaseCommand'ERROR = 14
  fromEnum BaseCommand'CLOSE_PRODUCER = 15
  fromEnum BaseCommand'CLOSE_CONSUMER = 16
  fromEnum BaseCommand'PRODUCER_SUCCESS = 17
  fromEnum BaseCommand'PING = 18
  fromEnum BaseCommand'PONG = 19
  fromEnum BaseCommand'REDELIVER_UNACKNOWLEDGED_MESSAGES = 20
  fromEnum BaseCommand'PARTITIONED_METADATA = 21
  fromEnum BaseCommand'PARTITIONED_METADATA_RESPONSE = 22
  fromEnum BaseCommand'LOOKUP = 23
  fromEnum BaseCommand'LOOKUP_RESPONSE = 24
  fromEnum BaseCommand'CONSUMER_STATS = 25
  fromEnum BaseCommand'CONSUMER_STATS_RESPONSE = 26
  fromEnum BaseCommand'REACHED_END_OF_TOPIC = 27
  fromEnum BaseCommand'SEEK = 28
  fromEnum BaseCommand'GET_LAST_MESSAGE_ID = 29
  fromEnum BaseCommand'GET_LAST_MESSAGE_ID_RESPONSE = 30
  fromEnum BaseCommand'ACTIVE_CONSUMER_CHANGE = 31
  fromEnum BaseCommand'GET_TOPICS_OF_NAMESPACE = 32
  fromEnum BaseCommand'GET_TOPICS_OF_NAMESPACE_RESPONSE = 33
  fromEnum BaseCommand'GET_SCHEMA = 34
  fromEnum BaseCommand'GET_SCHEMA_RESPONSE = 35
  fromEnum BaseCommand'AUTH_CHALLENGE = 36
  fromEnum BaseCommand'AUTH_RESPONSE = 37
  fromEnum BaseCommand'ACK_RESPONSE = 38
  fromEnum BaseCommand'GET_OR_CREATE_SCHEMA = 39
  fromEnum BaseCommand'GET_OR_CREATE_SCHEMA_RESPONSE = 40
  fromEnum BaseCommand'NEW_TXN = 50
  fromEnum BaseCommand'NEW_TXN_RESPONSE = 51
  fromEnum BaseCommand'ADD_PARTITION_TO_TXN = 52
  fromEnum BaseCommand'ADD_PARTITION_TO_TXN_RESPONSE = 53
  fromEnum BaseCommand'ADD_SUBSCRIPTION_TO_TXN = 54
  fromEnum BaseCommand'ADD_SUBSCRIPTION_TO_TXN_RESPONSE = 55
  fromEnum BaseCommand'END_TXN = 56
  fromEnum BaseCommand'END_TXN_RESPONSE = 57
  fromEnum BaseCommand'END_TXN_ON_PARTITION = 58
  fromEnum BaseCommand'END_TXN_ON_PARTITION_RESPONSE = 59
  fromEnum BaseCommand'END_TXN_ON_SUBSCRIPTION = 60
  fromEnum BaseCommand'END_TXN_ON_SUBSCRIPTION_RESPONSE = 61
  succ BaseCommand'END_TXN_ON_SUBSCRIPTION_RESPONSE
    = Prelude.error
        "BaseCommand'Type.succ: bad argument BaseCommand'END_TXN_ON_SUBSCRIPTION_RESPONSE. This value would be out of bounds."
  succ BaseCommand'CONNECT = BaseCommand'CONNECTED
  succ BaseCommand'CONNECTED = BaseCommand'SUBSCRIBE
  succ BaseCommand'SUBSCRIBE = BaseCommand'PRODUCER
  succ BaseCommand'PRODUCER = BaseCommand'SEND
  succ BaseCommand'SEND = BaseCommand'SEND_RECEIPT
  succ BaseCommand'SEND_RECEIPT = BaseCommand'SEND_ERROR
  succ BaseCommand'SEND_ERROR = BaseCommand'MESSAGE
  succ BaseCommand'MESSAGE = BaseCommand'ACK
  succ BaseCommand'ACK = BaseCommand'FLOW
  succ BaseCommand'FLOW = BaseCommand'UNSUBSCRIBE
  succ BaseCommand'UNSUBSCRIBE = BaseCommand'SUCCESS
  succ BaseCommand'SUCCESS = BaseCommand'ERROR
  succ BaseCommand'ERROR = BaseCommand'CLOSE_PRODUCER
  succ BaseCommand'CLOSE_PRODUCER = BaseCommand'CLOSE_CONSUMER
  succ BaseCommand'CLOSE_CONSUMER = BaseCommand'PRODUCER_SUCCESS
  succ BaseCommand'PRODUCER_SUCCESS = BaseCommand'PING
  succ BaseCommand'PING = BaseCommand'PONG
  succ BaseCommand'PONG
    = BaseCommand'REDELIVER_UNACKNOWLEDGED_MESSAGES
  succ BaseCommand'REDELIVER_UNACKNOWLEDGED_MESSAGES
    = BaseCommand'PARTITIONED_METADATA
  succ BaseCommand'PARTITIONED_METADATA
    = BaseCommand'PARTITIONED_METADATA_RESPONSE
  succ BaseCommand'PARTITIONED_METADATA_RESPONSE = BaseCommand'LOOKUP
  succ BaseCommand'LOOKUP = BaseCommand'LOOKUP_RESPONSE
  succ BaseCommand'LOOKUP_RESPONSE = BaseCommand'CONSUMER_STATS
  succ BaseCommand'CONSUMER_STATS
    = BaseCommand'CONSUMER_STATS_RESPONSE
  succ BaseCommand'CONSUMER_STATS_RESPONSE
    = BaseCommand'REACHED_END_OF_TOPIC
  succ BaseCommand'REACHED_END_OF_TOPIC = BaseCommand'SEEK
  succ BaseCommand'SEEK = BaseCommand'GET_LAST_MESSAGE_ID
  succ BaseCommand'GET_LAST_MESSAGE_ID
    = BaseCommand'GET_LAST_MESSAGE_ID_RESPONSE
  succ BaseCommand'GET_LAST_MESSAGE_ID_RESPONSE
    = BaseCommand'ACTIVE_CONSUMER_CHANGE
  succ BaseCommand'ACTIVE_CONSUMER_CHANGE
    = BaseCommand'GET_TOPICS_OF_NAMESPACE
  succ BaseCommand'GET_TOPICS_OF_NAMESPACE
    = BaseCommand'GET_TOPICS_OF_NAMESPACE_RESPONSE
  succ BaseCommand'GET_TOPICS_OF_NAMESPACE_RESPONSE
    = BaseCommand'GET_SCHEMA
  succ BaseCommand'GET_SCHEMA = BaseCommand'GET_SCHEMA_RESPONSE
  succ BaseCommand'GET_SCHEMA_RESPONSE = BaseCommand'AUTH_CHALLENGE
  succ BaseCommand'AUTH_CHALLENGE = BaseCommand'AUTH_RESPONSE
  succ BaseCommand'AUTH_RESPONSE = BaseCommand'ACK_RESPONSE
  succ BaseCommand'ACK_RESPONSE = BaseCommand'GET_OR_CREATE_SCHEMA
  succ BaseCommand'GET_OR_CREATE_SCHEMA
    = BaseCommand'GET_OR_CREATE_SCHEMA_RESPONSE
  succ BaseCommand'GET_OR_CREATE_SCHEMA_RESPONSE
    = BaseCommand'NEW_TXN
  succ BaseCommand'NEW_TXN = BaseCommand'NEW_TXN_RESPONSE
  succ BaseCommand'NEW_TXN_RESPONSE
    = BaseCommand'ADD_PARTITION_TO_TXN
  succ BaseCommand'ADD_PARTITION_TO_TXN
    = BaseCommand'ADD_PARTITION_TO_TXN_RESPONSE
  succ BaseCommand'ADD_PARTITION_TO_TXN_RESPONSE
    = BaseCommand'ADD_SUBSCRIPTION_TO_TXN
  succ BaseCommand'ADD_SUBSCRIPTION_TO_TXN
    = BaseCommand'ADD_SUBSCRIPTION_TO_TXN_RESPONSE
  succ BaseCommand'ADD_SUBSCRIPTION_TO_TXN_RESPONSE
    = BaseCommand'END_TXN
  succ BaseCommand'END_TXN = BaseCommand'END_TXN_RESPONSE
  succ BaseCommand'END_TXN_RESPONSE
    = BaseCommand'END_TXN_ON_PARTITION
  succ BaseCommand'END_TXN_ON_PARTITION
    = BaseCommand'END_TXN_ON_PARTITION_RESPONSE
  succ BaseCommand'END_TXN_ON_PARTITION_RESPONSE
    = BaseCommand'END_TXN_ON_SUBSCRIPTION
  succ BaseCommand'END_TXN_ON_SUBSCRIPTION
    = BaseCommand'END_TXN_ON_SUBSCRIPTION_RESPONSE
  pred BaseCommand'CONNECT
    = Prelude.error
        "BaseCommand'Type.pred: bad argument BaseCommand'CONNECT. This value would be out of bounds."
  pred BaseCommand'CONNECTED = BaseCommand'CONNECT
  pred BaseCommand'SUBSCRIBE = BaseCommand'CONNECTED
  pred BaseCommand'PRODUCER = BaseCommand'SUBSCRIBE
  pred BaseCommand'SEND = BaseCommand'PRODUCER
  pred BaseCommand'SEND_RECEIPT = BaseCommand'SEND
  pred BaseCommand'SEND_ERROR = BaseCommand'SEND_RECEIPT
  pred BaseCommand'MESSAGE = BaseCommand'SEND_ERROR
  pred BaseCommand'ACK = BaseCommand'MESSAGE
  pred BaseCommand'FLOW = BaseCommand'ACK
  pred BaseCommand'UNSUBSCRIBE = BaseCommand'FLOW
  pred BaseCommand'SUCCESS = BaseCommand'UNSUBSCRIBE
  pred BaseCommand'ERROR = BaseCommand'SUCCESS
  pred BaseCommand'CLOSE_PRODUCER = BaseCommand'ERROR
  pred BaseCommand'CLOSE_CONSUMER = BaseCommand'CLOSE_PRODUCER
  pred BaseCommand'PRODUCER_SUCCESS = BaseCommand'CLOSE_CONSUMER
  pred BaseCommand'PING = BaseCommand'PRODUCER_SUCCESS
  pred BaseCommand'PONG = BaseCommand'PING
  pred BaseCommand'REDELIVER_UNACKNOWLEDGED_MESSAGES
    = BaseCommand'PONG
  pred BaseCommand'PARTITIONED_METADATA
    = BaseCommand'REDELIVER_UNACKNOWLEDGED_MESSAGES
  pred BaseCommand'PARTITIONED_METADATA_RESPONSE
    = BaseCommand'PARTITIONED_METADATA
  pred BaseCommand'LOOKUP = BaseCommand'PARTITIONED_METADATA_RESPONSE
  pred BaseCommand'LOOKUP_RESPONSE = BaseCommand'LOOKUP
  pred BaseCommand'CONSUMER_STATS = BaseCommand'LOOKUP_RESPONSE
  pred BaseCommand'CONSUMER_STATS_RESPONSE
    = BaseCommand'CONSUMER_STATS
  pred BaseCommand'REACHED_END_OF_TOPIC
    = BaseCommand'CONSUMER_STATS_RESPONSE
  pred BaseCommand'SEEK = BaseCommand'REACHED_END_OF_TOPIC
  pred BaseCommand'GET_LAST_MESSAGE_ID = BaseCommand'SEEK
  pred BaseCommand'GET_LAST_MESSAGE_ID_RESPONSE
    = BaseCommand'GET_LAST_MESSAGE_ID
  pred BaseCommand'ACTIVE_CONSUMER_CHANGE
    = BaseCommand'GET_LAST_MESSAGE_ID_RESPONSE
  pred BaseCommand'GET_TOPICS_OF_NAMESPACE
    = BaseCommand'ACTIVE_CONSUMER_CHANGE
  pred BaseCommand'GET_TOPICS_OF_NAMESPACE_RESPONSE
    = BaseCommand'GET_TOPICS_OF_NAMESPACE
  pred BaseCommand'GET_SCHEMA
    = BaseCommand'GET_TOPICS_OF_NAMESPACE_RESPONSE
  pred BaseCommand'GET_SCHEMA_RESPONSE = BaseCommand'GET_SCHEMA
  pred BaseCommand'AUTH_CHALLENGE = BaseCommand'GET_SCHEMA_RESPONSE
  pred BaseCommand'AUTH_RESPONSE = BaseCommand'AUTH_CHALLENGE
  pred BaseCommand'ACK_RESPONSE = BaseCommand'AUTH_RESPONSE
  pred BaseCommand'GET_OR_CREATE_SCHEMA = BaseCommand'ACK_RESPONSE
  pred BaseCommand'GET_OR_CREATE_SCHEMA_RESPONSE
    = BaseCommand'GET_OR_CREATE_SCHEMA
  pred BaseCommand'NEW_TXN
    = BaseCommand'GET_OR_CREATE_SCHEMA_RESPONSE
  pred BaseCommand'NEW_TXN_RESPONSE = BaseCommand'NEW_TXN
  pred BaseCommand'ADD_PARTITION_TO_TXN
    = BaseCommand'NEW_TXN_RESPONSE
  pred BaseCommand'ADD_PARTITION_TO_TXN_RESPONSE
    = BaseCommand'ADD_PARTITION_TO_TXN
  pred BaseCommand'ADD_SUBSCRIPTION_TO_TXN
    = BaseCommand'ADD_PARTITION_TO_TXN_RESPONSE
  pred BaseCommand'ADD_SUBSCRIPTION_TO_TXN_RESPONSE
    = BaseCommand'ADD_SUBSCRIPTION_TO_TXN
  pred BaseCommand'END_TXN
    = BaseCommand'ADD_SUBSCRIPTION_TO_TXN_RESPONSE
  pred BaseCommand'END_TXN_RESPONSE = BaseCommand'END_TXN
  pred BaseCommand'END_TXN_ON_PARTITION
    = BaseCommand'END_TXN_RESPONSE
  pred BaseCommand'END_TXN_ON_PARTITION_RESPONSE
    = BaseCommand'END_TXN_ON_PARTITION
  pred BaseCommand'END_TXN_ON_SUBSCRIPTION
    = BaseCommand'END_TXN_ON_PARTITION_RESPONSE
  pred BaseCommand'END_TXN_ON_SUBSCRIPTION_RESPONSE
    = BaseCommand'END_TXN_ON_SUBSCRIPTION
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault BaseCommand'Type where
  fieldDefault = BaseCommand'CONNECT
instance Control.DeepSeq.NFData BaseCommand'Type where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.consumerId' @:: Lens' CommandAck Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.ackType' @:: Lens' CommandAck CommandAck'AckType@
         * 'Proto.PulsarApi_Fields.messageId' @:: Lens' CommandAck [MessageIdData]@
         * 'Proto.PulsarApi_Fields.vec'messageId' @:: Lens' CommandAck (Data.Vector.Vector MessageIdData)@
         * 'Proto.PulsarApi_Fields.validationError' @:: Lens' CommandAck CommandAck'ValidationError@
         * 'Proto.PulsarApi_Fields.maybe'validationError' @:: Lens' CommandAck (Prelude.Maybe CommandAck'ValidationError)@
         * 'Proto.PulsarApi_Fields.properties' @:: Lens' CommandAck [KeyLongValue]@
         * 'Proto.PulsarApi_Fields.vec'properties' @:: Lens' CommandAck (Data.Vector.Vector KeyLongValue)@
         * 'Proto.PulsarApi_Fields.txnidLeastBits' @:: Lens' CommandAck Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidLeastBits' @:: Lens' CommandAck (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.txnidMostBits' @:: Lens' CommandAck Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidMostBits' @:: Lens' CommandAck (Prelude.Maybe Data.Word.Word64)@ -}
data CommandAck
  = CommandAck'_constructor {_CommandAck'consumerId :: !Data.Word.Word64,
                             _CommandAck'ackType :: !CommandAck'AckType,
                             _CommandAck'messageId :: !(Data.Vector.Vector MessageIdData),
                             _CommandAck'validationError :: !(Prelude.Maybe CommandAck'ValidationError),
                             _CommandAck'properties :: !(Data.Vector.Vector KeyLongValue),
                             _CommandAck'txnidLeastBits :: !(Prelude.Maybe Data.Word.Word64),
                             _CommandAck'txnidMostBits :: !(Prelude.Maybe Data.Word.Word64),
                             _CommandAck'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandAck where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandAck "consumerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAck'consumerId
           (\ x__ y__ -> x__ {_CommandAck'consumerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAck "ackType" CommandAck'AckType where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAck'ackType (\ x__ y__ -> x__ {_CommandAck'ackType = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAck "messageId" [MessageIdData] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAck'messageId
           (\ x__ y__ -> x__ {_CommandAck'messageId = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField CommandAck "vec'messageId" (Data.Vector.Vector MessageIdData) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAck'messageId
           (\ x__ y__ -> x__ {_CommandAck'messageId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAck "validationError" CommandAck'ValidationError where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAck'validationError
           (\ x__ y__ -> x__ {_CommandAck'validationError = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandAck "maybe'validationError" (Prelude.Maybe CommandAck'ValidationError) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAck'validationError
           (\ x__ y__ -> x__ {_CommandAck'validationError = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAck "properties" [KeyLongValue] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAck'properties
           (\ x__ y__ -> x__ {_CommandAck'properties = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField CommandAck "vec'properties" (Data.Vector.Vector KeyLongValue) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAck'properties
           (\ x__ y__ -> x__ {_CommandAck'properties = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAck "txnidLeastBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAck'txnidLeastBits
           (\ x__ y__ -> x__ {_CommandAck'txnidLeastBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandAck "maybe'txnidLeastBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAck'txnidLeastBits
           (\ x__ y__ -> x__ {_CommandAck'txnidLeastBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAck "txnidMostBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAck'txnidMostBits
           (\ x__ y__ -> x__ {_CommandAck'txnidMostBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandAck "maybe'txnidMostBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAck'txnidMostBits
           (\ x__ y__ -> x__ {_CommandAck'txnidMostBits = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandAck where
  messageName _ = Data.Text.pack "pulsar.proto.CommandAck"
  packedMessageDescriptor _
    = "\n\
      \\n\
      \CommandAck\DC2\US\n\
      \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
      \consumerId\DC2;\n\
      \\back_type\CAN\STX \STX(\SO2 .pulsar.proto.CommandAck.AckTypeR\aackType\DC2:\n\
      \\n\
      \message_id\CAN\ETX \ETX(\v2\ESC.pulsar.proto.MessageIdDataR\tmessageId\DC2S\n\
      \\DLEvalidation_error\CAN\EOT \SOH(\SO2(.pulsar.proto.CommandAck.ValidationErrorR\SIvalidationError\DC2:\n\
      \\n\
      \properties\CAN\ENQ \ETX(\v2\SUB.pulsar.proto.KeyLongValueR\n\
      \properties\DC2+\n\
      \\DLEtxnid_least_bits\CAN\ACK \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
      \\SItxnid_most_bits\CAN\a \SOH(\EOT:\SOH0R\rtxnidMostBits\")\n\
      \\aAckType\DC2\SO\n\
      \\n\
      \Individual\DLE\NUL\DC2\SO\n\
      \\n\
      \Cumulative\DLE\SOH\"\143\SOH\n\
      \\SIValidationError\DC2\RS\n\
      \\SUBUncompressedSizeCorruption\DLE\NUL\DC2\SYN\n\
      \\DC2DecompressionError\DLE\SOH\DC2\DC4\n\
      \\DLEChecksumMismatch\DLE\STX\DC2\EM\n\
      \\NAKBatchDeSerializeError\DLE\ETX\DC2\DC3\n\
      \\SIDecryptionError\DLE\EOT"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        consumerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "consumer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"consumerId")) ::
              Data.ProtoLens.FieldDescriptor CommandAck
        ackType__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ack_type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor CommandAck'AckType)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"ackType")) ::
              Data.ProtoLens.FieldDescriptor CommandAck
        messageId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message_id"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor MessageIdData)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"messageId")) ::
              Data.ProtoLens.FieldDescriptor CommandAck
        validationError__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "validation_error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor CommandAck'ValidationError)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'validationError")) ::
              Data.ProtoLens.FieldDescriptor CommandAck
        properties__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "properties"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor KeyLongValue)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"properties")) ::
              Data.ProtoLens.FieldDescriptor CommandAck
        txnidLeastBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_least_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidLeastBits")) ::
              Data.ProtoLens.FieldDescriptor CommandAck
        txnidMostBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_most_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidMostBits")) ::
              Data.ProtoLens.FieldDescriptor CommandAck
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, consumerId__field_descriptor),
           (Data.ProtoLens.Tag 2, ackType__field_descriptor),
           (Data.ProtoLens.Tag 3, messageId__field_descriptor),
           (Data.ProtoLens.Tag 4, validationError__field_descriptor),
           (Data.ProtoLens.Tag 5, properties__field_descriptor),
           (Data.ProtoLens.Tag 6, txnidLeastBits__field_descriptor),
           (Data.ProtoLens.Tag 7, txnidMostBits__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandAck'_unknownFields
        (\ x__ y__ -> x__ {_CommandAck'_unknownFields = y__})
  defMessage
    = CommandAck'_constructor
        {_CommandAck'consumerId = Data.ProtoLens.fieldDefault,
         _CommandAck'ackType = Data.ProtoLens.fieldDefault,
         _CommandAck'messageId = Data.Vector.Generic.empty,
         _CommandAck'validationError = Prelude.Nothing,
         _CommandAck'properties = Data.Vector.Generic.empty,
         _CommandAck'txnidLeastBits = Prelude.Nothing,
         _CommandAck'txnidMostBits = Prelude.Nothing,
         _CommandAck'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandAck
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld MessageIdData
                   -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld KeyLongValue
                      -> Data.ProtoLens.Encoding.Bytes.Parser CommandAck
        loop
          x
          required'ackType
          required'consumerId
          mutable'messageId
          mutable'properties
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'messageId <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                            (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                               mutable'messageId)
                      frozen'properties <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                mutable'properties)
                      (let
                         missing
                           = (if required'ackType then (:) "ack_type" else Prelude.id)
                               ((if required'consumerId then (:) "consumer_id" else Prelude.id)
                                  [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'messageId")
                              frozen'messageId
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'properties")
                                 frozen'properties
                                 x)))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "consumer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"consumerId") y x)
                                  required'ackType
                                  Prelude.False
                                  mutable'messageId
                                  mutable'properties
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "ack_type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"ackType") y x)
                                  Prelude.False
                                  required'consumerId
                                  mutable'messageId
                                  mutable'properties
                        26
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "message_id"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'messageId y)
                                loop x required'ackType required'consumerId v mutable'properties
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "validation_error"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"validationError") y x)
                                  required'ackType
                                  required'consumerId
                                  mutable'messageId
                                  mutable'properties
                        42
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "properties"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'properties y)
                                loop x required'ackType required'consumerId mutable'messageId v
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_least_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidLeastBits") y x)
                                  required'ackType
                                  required'consumerId
                                  mutable'messageId
                                  mutable'properties
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_most_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidMostBits") y x)
                                  required'ackType
                                  required'consumerId
                                  mutable'messageId
                                  mutable'properties
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'ackType
                                  required'consumerId
                                  mutable'messageId
                                  mutable'properties
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'messageId <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                     Data.ProtoLens.Encoding.Growing.new
              mutable'properties <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage
                Prelude.True
                Prelude.True
                mutable'messageId
                mutable'properties)
          "CommandAck"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"consumerId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   ((Prelude..)
                      ((Prelude..)
                         Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                      Prelude.fromEnum
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"ackType") _x)))
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                      (\ _v
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                              ((Prelude..)
                                 (\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                 Data.ProtoLens.encodeMessage
                                 _v))
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"vec'messageId") _x))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'validationError") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                   Prelude.fromEnum
                                   _v))
                      ((Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                            (\ _v
                               -> (Data.Monoid.<>)
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                    ((Prelude..)
                                       (\ bs
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  (Prelude.fromIntegral
                                                     (Data.ByteString.length bs)))
                                               (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                       Data.ProtoLens.encodeMessage
                                       _v))
                            (Lens.Family2.view
                               (Data.ProtoLens.Field.field @"vec'properties") _x))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'txnidLeastBits") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'txnidMostBits") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                               (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                  (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))
instance Control.DeepSeq.NFData CommandAck where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandAck'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandAck'consumerId x__)
                (Control.DeepSeq.deepseq
                   (_CommandAck'ackType x__)
                   (Control.DeepSeq.deepseq
                      (_CommandAck'messageId x__)
                      (Control.DeepSeq.deepseq
                         (_CommandAck'validationError x__)
                         (Control.DeepSeq.deepseq
                            (_CommandAck'properties x__)
                            (Control.DeepSeq.deepseq
                               (_CommandAck'txnidLeastBits x__)
                               (Control.DeepSeq.deepseq (_CommandAck'txnidMostBits x__) ())))))))
data CommandAck'AckType
  = CommandAck'Individual | CommandAck'Cumulative
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum CommandAck'AckType where
  maybeToEnum 0 = Prelude.Just CommandAck'Individual
  maybeToEnum 1 = Prelude.Just CommandAck'Cumulative
  maybeToEnum _ = Prelude.Nothing
  showEnum CommandAck'Individual = "Individual"
  showEnum CommandAck'Cumulative = "Cumulative"
  readEnum k
    | (Prelude.==) k "Individual" = Prelude.Just CommandAck'Individual
    | (Prelude.==) k "Cumulative" = Prelude.Just CommandAck'Cumulative
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded CommandAck'AckType where
  minBound = CommandAck'Individual
  maxBound = CommandAck'Cumulative
instance Prelude.Enum CommandAck'AckType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum AckType: " (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum CommandAck'Individual = 0
  fromEnum CommandAck'Cumulative = 1
  succ CommandAck'Cumulative
    = Prelude.error
        "CommandAck'AckType.succ: bad argument CommandAck'Cumulative. This value would be out of bounds."
  succ CommandAck'Individual = CommandAck'Cumulative
  pred CommandAck'Individual
    = Prelude.error
        "CommandAck'AckType.pred: bad argument CommandAck'Individual. This value would be out of bounds."
  pred CommandAck'Cumulative = CommandAck'Individual
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault CommandAck'AckType where
  fieldDefault = CommandAck'Individual
instance Control.DeepSeq.NFData CommandAck'AckType where
  rnf x__ = Prelude.seq x__ ()
data CommandAck'ValidationError
  = CommandAck'UncompressedSizeCorruption |
    CommandAck'DecompressionError |
    CommandAck'ChecksumMismatch |
    CommandAck'BatchDeSerializeError |
    CommandAck'DecryptionError
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum CommandAck'ValidationError where
  maybeToEnum 0 = Prelude.Just CommandAck'UncompressedSizeCorruption
  maybeToEnum 1 = Prelude.Just CommandAck'DecompressionError
  maybeToEnum 2 = Prelude.Just CommandAck'ChecksumMismatch
  maybeToEnum 3 = Prelude.Just CommandAck'BatchDeSerializeError
  maybeToEnum 4 = Prelude.Just CommandAck'DecryptionError
  maybeToEnum _ = Prelude.Nothing
  showEnum CommandAck'UncompressedSizeCorruption
    = "UncompressedSizeCorruption"
  showEnum CommandAck'DecompressionError = "DecompressionError"
  showEnum CommandAck'ChecksumMismatch = "ChecksumMismatch"
  showEnum CommandAck'BatchDeSerializeError = "BatchDeSerializeError"
  showEnum CommandAck'DecryptionError = "DecryptionError"
  readEnum k
    | (Prelude.==) k "UncompressedSizeCorruption"
    = Prelude.Just CommandAck'UncompressedSizeCorruption
    | (Prelude.==) k "DecompressionError"
    = Prelude.Just CommandAck'DecompressionError
    | (Prelude.==) k "ChecksumMismatch"
    = Prelude.Just CommandAck'ChecksumMismatch
    | (Prelude.==) k "BatchDeSerializeError"
    = Prelude.Just CommandAck'BatchDeSerializeError
    | (Prelude.==) k "DecryptionError"
    = Prelude.Just CommandAck'DecryptionError
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded CommandAck'ValidationError where
  minBound = CommandAck'UncompressedSizeCorruption
  maxBound = CommandAck'DecryptionError
instance Prelude.Enum CommandAck'ValidationError where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum ValidationError: "
              (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum CommandAck'UncompressedSizeCorruption = 0
  fromEnum CommandAck'DecompressionError = 1
  fromEnum CommandAck'ChecksumMismatch = 2
  fromEnum CommandAck'BatchDeSerializeError = 3
  fromEnum CommandAck'DecryptionError = 4
  succ CommandAck'DecryptionError
    = Prelude.error
        "CommandAck'ValidationError.succ: bad argument CommandAck'DecryptionError. This value would be out of bounds."
  succ CommandAck'UncompressedSizeCorruption
    = CommandAck'DecompressionError
  succ CommandAck'DecompressionError = CommandAck'ChecksumMismatch
  succ CommandAck'ChecksumMismatch = CommandAck'BatchDeSerializeError
  succ CommandAck'BatchDeSerializeError = CommandAck'DecryptionError
  pred CommandAck'UncompressedSizeCorruption
    = Prelude.error
        "CommandAck'ValidationError.pred: bad argument CommandAck'UncompressedSizeCorruption. This value would be out of bounds."
  pred CommandAck'DecompressionError
    = CommandAck'UncompressedSizeCorruption
  pred CommandAck'ChecksumMismatch = CommandAck'DecompressionError
  pred CommandAck'BatchDeSerializeError = CommandAck'ChecksumMismatch
  pred CommandAck'DecryptionError = CommandAck'BatchDeSerializeError
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault CommandAck'ValidationError where
  fieldDefault = CommandAck'UncompressedSizeCorruption
instance Control.DeepSeq.NFData CommandAck'ValidationError where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.consumerId' @:: Lens' CommandAckResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.txnidLeastBits' @:: Lens' CommandAckResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidLeastBits' @:: Lens' CommandAckResponse (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.txnidMostBits' @:: Lens' CommandAckResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidMostBits' @:: Lens' CommandAckResponse (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.error' @:: Lens' CommandAckResponse ServerError@
         * 'Proto.PulsarApi_Fields.maybe'error' @:: Lens' CommandAckResponse (Prelude.Maybe ServerError)@
         * 'Proto.PulsarApi_Fields.message' @:: Lens' CommandAckResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'message' @:: Lens' CommandAckResponse (Prelude.Maybe Data.Text.Text)@ -}
data CommandAckResponse
  = CommandAckResponse'_constructor {_CommandAckResponse'consumerId :: !Data.Word.Word64,
                                     _CommandAckResponse'txnidLeastBits :: !(Prelude.Maybe Data.Word.Word64),
                                     _CommandAckResponse'txnidMostBits :: !(Prelude.Maybe Data.Word.Word64),
                                     _CommandAckResponse'error :: !(Prelude.Maybe ServerError),
                                     _CommandAckResponse'message :: !(Prelude.Maybe Data.Text.Text),
                                     _CommandAckResponse'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandAckResponse where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandAckResponse "consumerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAckResponse'consumerId
           (\ x__ y__ -> x__ {_CommandAckResponse'consumerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAckResponse "txnidLeastBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAckResponse'txnidLeastBits
           (\ x__ y__ -> x__ {_CommandAckResponse'txnidLeastBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandAckResponse "maybe'txnidLeastBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAckResponse'txnidLeastBits
           (\ x__ y__ -> x__ {_CommandAckResponse'txnidLeastBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAckResponse "txnidMostBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAckResponse'txnidMostBits
           (\ x__ y__ -> x__ {_CommandAckResponse'txnidMostBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandAckResponse "maybe'txnidMostBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAckResponse'txnidMostBits
           (\ x__ y__ -> x__ {_CommandAckResponse'txnidMostBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAckResponse "error" ServerError where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAckResponse'error
           (\ x__ y__ -> x__ {_CommandAckResponse'error = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandAckResponse "maybe'error" (Prelude.Maybe ServerError) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAckResponse'error
           (\ x__ y__ -> x__ {_CommandAckResponse'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAckResponse "message" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAckResponse'message
           (\ x__ y__ -> x__ {_CommandAckResponse'message = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandAckResponse "maybe'message" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAckResponse'message
           (\ x__ y__ -> x__ {_CommandAckResponse'message = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandAckResponse where
  messageName _ = Data.Text.pack "pulsar.proto.CommandAckResponse"
  packedMessageDescriptor _
    = "\n\
      \\DC2CommandAckResponse\DC2\US\n\
      \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
      \consumerId\DC2+\n\
      \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
      \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2/\n\
      \\ENQerror\CAN\EOT \SOH(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
      \\amessage\CAN\ENQ \SOH(\tR\amessage"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        consumerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "consumer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"consumerId")) ::
              Data.ProtoLens.FieldDescriptor CommandAckResponse
        txnidLeastBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_least_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidLeastBits")) ::
              Data.ProtoLens.FieldDescriptor CommandAckResponse
        txnidMostBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_most_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidMostBits")) ::
              Data.ProtoLens.FieldDescriptor CommandAckResponse
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ServerError)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'error")) ::
              Data.ProtoLens.FieldDescriptor CommandAckResponse
        message__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'message")) ::
              Data.ProtoLens.FieldDescriptor CommandAckResponse
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, consumerId__field_descriptor),
           (Data.ProtoLens.Tag 2, txnidLeastBits__field_descriptor),
           (Data.ProtoLens.Tag 3, txnidMostBits__field_descriptor),
           (Data.ProtoLens.Tag 4, error__field_descriptor),
           (Data.ProtoLens.Tag 5, message__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandAckResponse'_unknownFields
        (\ x__ y__ -> x__ {_CommandAckResponse'_unknownFields = y__})
  defMessage
    = CommandAckResponse'_constructor
        {_CommandAckResponse'consumerId = Data.ProtoLens.fieldDefault,
         _CommandAckResponse'txnidLeastBits = Prelude.Nothing,
         _CommandAckResponse'txnidMostBits = Prelude.Nothing,
         _CommandAckResponse'error = Prelude.Nothing,
         _CommandAckResponse'message = Prelude.Nothing,
         _CommandAckResponse'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandAckResponse
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandAckResponse
        loop x required'consumerId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'consumerId then (:) "consumer_id" else Prelude.id)
                               []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "consumer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"consumerId") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_least_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidLeastBits") y x)
                                  required'consumerId
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_most_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidMostBits") y x)
                                  required'consumerId
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                                  required'consumerId
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "message"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"message") y x)
                                  required'consumerId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'consumerId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "CommandAckResponse"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"consumerId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'txnidLeastBits") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'txnidMostBits") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'error") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                   Prelude.fromEnum
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'message") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData CommandAckResponse where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandAckResponse'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandAckResponse'consumerId x__)
                (Control.DeepSeq.deepseq
                   (_CommandAckResponse'txnidLeastBits x__)
                   (Control.DeepSeq.deepseq
                      (_CommandAckResponse'txnidMostBits x__)
                      (Control.DeepSeq.deepseq
                         (_CommandAckResponse'error x__)
                         (Control.DeepSeq.deepseq (_CommandAckResponse'message x__) ())))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.consumerId' @:: Lens' CommandActiveConsumerChange Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.isActive' @:: Lens' CommandActiveConsumerChange Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'isActive' @:: Lens' CommandActiveConsumerChange (Prelude.Maybe Prelude.Bool)@ -}
data CommandActiveConsumerChange
  = CommandActiveConsumerChange'_constructor {_CommandActiveConsumerChange'consumerId :: !Data.Word.Word64,
                                              _CommandActiveConsumerChange'isActive :: !(Prelude.Maybe Prelude.Bool),
                                              _CommandActiveConsumerChange'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandActiveConsumerChange where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandActiveConsumerChange "consumerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandActiveConsumerChange'consumerId
           (\ x__ y__ -> x__ {_CommandActiveConsumerChange'consumerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandActiveConsumerChange "isActive" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandActiveConsumerChange'isActive
           (\ x__ y__ -> x__ {_CommandActiveConsumerChange'isActive = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField CommandActiveConsumerChange "maybe'isActive" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandActiveConsumerChange'isActive
           (\ x__ y__ -> x__ {_CommandActiveConsumerChange'isActive = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandActiveConsumerChange where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandActiveConsumerChange"
  packedMessageDescriptor _
    = "\n\
      \\ESCCommandActiveConsumerChange\DC2\US\n\
      \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
      \consumerId\DC2\"\n\
      \\tis_active\CAN\STX \SOH(\b:\ENQfalseR\bisActive"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        consumerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "consumer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"consumerId")) ::
              Data.ProtoLens.FieldDescriptor CommandActiveConsumerChange
        isActive__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "is_active"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'isActive")) ::
              Data.ProtoLens.FieldDescriptor CommandActiveConsumerChange
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, consumerId__field_descriptor),
           (Data.ProtoLens.Tag 2, isActive__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandActiveConsumerChange'_unknownFields
        (\ x__ y__
           -> x__ {_CommandActiveConsumerChange'_unknownFields = y__})
  defMessage
    = CommandActiveConsumerChange'_constructor
        {_CommandActiveConsumerChange'consumerId = Data.ProtoLens.fieldDefault,
         _CommandActiveConsumerChange'isActive = Prelude.Nothing,
         _CommandActiveConsumerChange'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandActiveConsumerChange
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandActiveConsumerChange
        loop x required'consumerId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'consumerId then (:) "consumer_id" else Prelude.id)
                               []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "consumer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"consumerId") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "is_active"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"isActive") y x)
                                  required'consumerId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'consumerId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "CommandActiveConsumerChange"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"consumerId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'isActive") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt
                             (\ b -> if b then 1 else 0)
                             _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData CommandActiveConsumerChange where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandActiveConsumerChange'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandActiveConsumerChange'consumerId x__)
                (Control.DeepSeq.deepseq
                   (_CommandActiveConsumerChange'isActive x__) ()))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandAddPartitionToTxn Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.txnidLeastBits' @:: Lens' CommandAddPartitionToTxn Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidLeastBits' @:: Lens' CommandAddPartitionToTxn (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.txnidMostBits' @:: Lens' CommandAddPartitionToTxn Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidMostBits' @:: Lens' CommandAddPartitionToTxn (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.partitions' @:: Lens' CommandAddPartitionToTxn [Data.Text.Text]@
         * 'Proto.PulsarApi_Fields.vec'partitions' @:: Lens' CommandAddPartitionToTxn (Data.Vector.Vector Data.Text.Text)@ -}
data CommandAddPartitionToTxn
  = CommandAddPartitionToTxn'_constructor {_CommandAddPartitionToTxn'requestId :: !Data.Word.Word64,
                                           _CommandAddPartitionToTxn'txnidLeastBits :: !(Prelude.Maybe Data.Word.Word64),
                                           _CommandAddPartitionToTxn'txnidMostBits :: !(Prelude.Maybe Data.Word.Word64),
                                           _CommandAddPartitionToTxn'partitions :: !(Data.Vector.Vector Data.Text.Text),
                                           _CommandAddPartitionToTxn'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandAddPartitionToTxn where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandAddPartitionToTxn "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddPartitionToTxn'requestId
           (\ x__ y__ -> x__ {_CommandAddPartitionToTxn'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAddPartitionToTxn "txnidLeastBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddPartitionToTxn'txnidLeastBits
           (\ x__ y__
              -> x__ {_CommandAddPartitionToTxn'txnidLeastBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandAddPartitionToTxn "maybe'txnidLeastBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddPartitionToTxn'txnidLeastBits
           (\ x__ y__
              -> x__ {_CommandAddPartitionToTxn'txnidLeastBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAddPartitionToTxn "txnidMostBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddPartitionToTxn'txnidMostBits
           (\ x__ y__ -> x__ {_CommandAddPartitionToTxn'txnidMostBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandAddPartitionToTxn "maybe'txnidMostBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddPartitionToTxn'txnidMostBits
           (\ x__ y__ -> x__ {_CommandAddPartitionToTxn'txnidMostBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAddPartitionToTxn "partitions" [Data.Text.Text] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddPartitionToTxn'partitions
           (\ x__ y__ -> x__ {_CommandAddPartitionToTxn'partitions = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField CommandAddPartitionToTxn "vec'partitions" (Data.Vector.Vector Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddPartitionToTxn'partitions
           (\ x__ y__ -> x__ {_CommandAddPartitionToTxn'partitions = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandAddPartitionToTxn where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandAddPartitionToTxn"
  packedMessageDescriptor _
    = "\n\
      \\CANCommandAddPartitionToTxn\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
      \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
      \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2\RS\n\
      \\n\
      \partitions\CAN\EOT \ETX(\tR\n\
      \partitions"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandAddPartitionToTxn
        txnidLeastBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_least_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidLeastBits")) ::
              Data.ProtoLens.FieldDescriptor CommandAddPartitionToTxn
        txnidMostBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_most_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidMostBits")) ::
              Data.ProtoLens.FieldDescriptor CommandAddPartitionToTxn
        partitions__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "partitions"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"partitions")) ::
              Data.ProtoLens.FieldDescriptor CommandAddPartitionToTxn
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, txnidLeastBits__field_descriptor),
           (Data.ProtoLens.Tag 3, txnidMostBits__field_descriptor),
           (Data.ProtoLens.Tag 4, partitions__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandAddPartitionToTxn'_unknownFields
        (\ x__ y__ -> x__ {_CommandAddPartitionToTxn'_unknownFields = y__})
  defMessage
    = CommandAddPartitionToTxn'_constructor
        {_CommandAddPartitionToTxn'requestId = Data.ProtoLens.fieldDefault,
         _CommandAddPartitionToTxn'txnidLeastBits = Prelude.Nothing,
         _CommandAddPartitionToTxn'txnidMostBits = Prelude.Nothing,
         _CommandAddPartitionToTxn'partitions = Data.Vector.Generic.empty,
         _CommandAddPartitionToTxn'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandAddPartitionToTxn
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Text.Text
                -> Data.ProtoLens.Encoding.Bytes.Parser CommandAddPartitionToTxn
        loop x required'requestId mutable'partitions
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'partitions <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                mutable'partitions)
                      (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'partitions")
                              frozen'partitions
                              x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                                  mutable'partitions
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_least_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidLeastBits") y x)
                                  required'requestId
                                  mutable'partitions
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_most_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidMostBits") y x)
                                  required'requestId
                                  mutable'partitions
                        34
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                        Data.ProtoLens.Encoding.Bytes.getBytes
                                                          (Prelude.fromIntegral len)
                                            Data.ProtoLens.Encoding.Bytes.runEither
                                              (case Data.Text.Encoding.decodeUtf8' value of
                                                 (Prelude.Left err)
                                                   -> Prelude.Left (Prelude.show err)
                                                 (Prelude.Right r) -> Prelude.Right r))
                                        "partitions"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'partitions y)
                                loop x required'requestId v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
                                  mutable'partitions
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'partitions <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage Prelude.True mutable'partitions)
          "CommandAddPartitionToTxn"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'txnidLeastBits") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'txnidMostBits") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                         (\ _v
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                 ((Prelude..)
                                    (\ bs
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                    Data.Text.Encoding.encodeUtf8
                                    _v))
                         (Lens.Family2.view
                            (Data.ProtoLens.Field.field @"vec'partitions") _x))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData CommandAddPartitionToTxn where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandAddPartitionToTxn'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandAddPartitionToTxn'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandAddPartitionToTxn'txnidLeastBits x__)
                   (Control.DeepSeq.deepseq
                      (_CommandAddPartitionToTxn'txnidMostBits x__)
                      (Control.DeepSeq.deepseq
                         (_CommandAddPartitionToTxn'partitions x__) ()))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandAddPartitionToTxnResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.txnidLeastBits' @:: Lens' CommandAddPartitionToTxnResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidLeastBits' @:: Lens' CommandAddPartitionToTxnResponse (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.txnidMostBits' @:: Lens' CommandAddPartitionToTxnResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidMostBits' @:: Lens' CommandAddPartitionToTxnResponse (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.error' @:: Lens' CommandAddPartitionToTxnResponse ServerError@
         * 'Proto.PulsarApi_Fields.maybe'error' @:: Lens' CommandAddPartitionToTxnResponse (Prelude.Maybe ServerError)@
         * 'Proto.PulsarApi_Fields.message' @:: Lens' CommandAddPartitionToTxnResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'message' @:: Lens' CommandAddPartitionToTxnResponse (Prelude.Maybe Data.Text.Text)@ -}
data CommandAddPartitionToTxnResponse
  = CommandAddPartitionToTxnResponse'_constructor {_CommandAddPartitionToTxnResponse'requestId :: !Data.Word.Word64,
                                                   _CommandAddPartitionToTxnResponse'txnidLeastBits :: !(Prelude.Maybe Data.Word.Word64),
                                                   _CommandAddPartitionToTxnResponse'txnidMostBits :: !(Prelude.Maybe Data.Word.Word64),
                                                   _CommandAddPartitionToTxnResponse'error :: !(Prelude.Maybe ServerError),
                                                   _CommandAddPartitionToTxnResponse'message :: !(Prelude.Maybe Data.Text.Text),
                                                   _CommandAddPartitionToTxnResponse'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandAddPartitionToTxnResponse where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandAddPartitionToTxnResponse "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddPartitionToTxnResponse'requestId
           (\ x__ y__
              -> x__ {_CommandAddPartitionToTxnResponse'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAddPartitionToTxnResponse "txnidLeastBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddPartitionToTxnResponse'txnidLeastBits
           (\ x__ y__
              -> x__ {_CommandAddPartitionToTxnResponse'txnidLeastBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandAddPartitionToTxnResponse "maybe'txnidLeastBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddPartitionToTxnResponse'txnidLeastBits
           (\ x__ y__
              -> x__ {_CommandAddPartitionToTxnResponse'txnidLeastBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAddPartitionToTxnResponse "txnidMostBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddPartitionToTxnResponse'txnidMostBits
           (\ x__ y__
              -> x__ {_CommandAddPartitionToTxnResponse'txnidMostBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandAddPartitionToTxnResponse "maybe'txnidMostBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddPartitionToTxnResponse'txnidMostBits
           (\ x__ y__
              -> x__ {_CommandAddPartitionToTxnResponse'txnidMostBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAddPartitionToTxnResponse "error" ServerError where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddPartitionToTxnResponse'error
           (\ x__ y__ -> x__ {_CommandAddPartitionToTxnResponse'error = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandAddPartitionToTxnResponse "maybe'error" (Prelude.Maybe ServerError) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddPartitionToTxnResponse'error
           (\ x__ y__ -> x__ {_CommandAddPartitionToTxnResponse'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAddPartitionToTxnResponse "message" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddPartitionToTxnResponse'message
           (\ x__ y__
              -> x__ {_CommandAddPartitionToTxnResponse'message = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandAddPartitionToTxnResponse "maybe'message" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddPartitionToTxnResponse'message
           (\ x__ y__
              -> x__ {_CommandAddPartitionToTxnResponse'message = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandAddPartitionToTxnResponse where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandAddPartitionToTxnResponse"
  packedMessageDescriptor _
    = "\n\
      \ CommandAddPartitionToTxnResponse\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
      \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
      \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2/\n\
      \\ENQerror\CAN\EOT \SOH(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
      \\amessage\CAN\ENQ \SOH(\tR\amessage"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandAddPartitionToTxnResponse
        txnidLeastBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_least_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidLeastBits")) ::
              Data.ProtoLens.FieldDescriptor CommandAddPartitionToTxnResponse
        txnidMostBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_most_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidMostBits")) ::
              Data.ProtoLens.FieldDescriptor CommandAddPartitionToTxnResponse
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ServerError)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'error")) ::
              Data.ProtoLens.FieldDescriptor CommandAddPartitionToTxnResponse
        message__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'message")) ::
              Data.ProtoLens.FieldDescriptor CommandAddPartitionToTxnResponse
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, txnidLeastBits__field_descriptor),
           (Data.ProtoLens.Tag 3, txnidMostBits__field_descriptor),
           (Data.ProtoLens.Tag 4, error__field_descriptor),
           (Data.ProtoLens.Tag 5, message__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandAddPartitionToTxnResponse'_unknownFields
        (\ x__ y__
           -> x__ {_CommandAddPartitionToTxnResponse'_unknownFields = y__})
  defMessage
    = CommandAddPartitionToTxnResponse'_constructor
        {_CommandAddPartitionToTxnResponse'requestId = Data.ProtoLens.fieldDefault,
         _CommandAddPartitionToTxnResponse'txnidLeastBits = Prelude.Nothing,
         _CommandAddPartitionToTxnResponse'txnidMostBits = Prelude.Nothing,
         _CommandAddPartitionToTxnResponse'error = Prelude.Nothing,
         _CommandAddPartitionToTxnResponse'message = Prelude.Nothing,
         _CommandAddPartitionToTxnResponse'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandAddPartitionToTxnResponse
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandAddPartitionToTxnResponse
        loop x required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_least_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidLeastBits") y x)
                                  required'requestId
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_most_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidMostBits") y x)
                                  required'requestId
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                                  required'requestId
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "message"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"message") y x)
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "CommandAddPartitionToTxnResponse"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'txnidLeastBits") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'txnidMostBits") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'error") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                   Prelude.fromEnum
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'message") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData CommandAddPartitionToTxnResponse where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandAddPartitionToTxnResponse'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandAddPartitionToTxnResponse'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandAddPartitionToTxnResponse'txnidLeastBits x__)
                   (Control.DeepSeq.deepseq
                      (_CommandAddPartitionToTxnResponse'txnidMostBits x__)
                      (Control.DeepSeq.deepseq
                         (_CommandAddPartitionToTxnResponse'error x__)
                         (Control.DeepSeq.deepseq
                            (_CommandAddPartitionToTxnResponse'message x__) ())))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandAddSubscriptionToTxn Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.txnidLeastBits' @:: Lens' CommandAddSubscriptionToTxn Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidLeastBits' @:: Lens' CommandAddSubscriptionToTxn (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.txnidMostBits' @:: Lens' CommandAddSubscriptionToTxn Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidMostBits' @:: Lens' CommandAddSubscriptionToTxn (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.subscription' @:: Lens' CommandAddSubscriptionToTxn [Subscription]@
         * 'Proto.PulsarApi_Fields.vec'subscription' @:: Lens' CommandAddSubscriptionToTxn (Data.Vector.Vector Subscription)@ -}
data CommandAddSubscriptionToTxn
  = CommandAddSubscriptionToTxn'_constructor {_CommandAddSubscriptionToTxn'requestId :: !Data.Word.Word64,
                                              _CommandAddSubscriptionToTxn'txnidLeastBits :: !(Prelude.Maybe Data.Word.Word64),
                                              _CommandAddSubscriptionToTxn'txnidMostBits :: !(Prelude.Maybe Data.Word.Word64),
                                              _CommandAddSubscriptionToTxn'subscription :: !(Data.Vector.Vector Subscription),
                                              _CommandAddSubscriptionToTxn'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandAddSubscriptionToTxn where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandAddSubscriptionToTxn "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddSubscriptionToTxn'requestId
           (\ x__ y__ -> x__ {_CommandAddSubscriptionToTxn'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAddSubscriptionToTxn "txnidLeastBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddSubscriptionToTxn'txnidLeastBits
           (\ x__ y__
              -> x__ {_CommandAddSubscriptionToTxn'txnidLeastBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandAddSubscriptionToTxn "maybe'txnidLeastBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddSubscriptionToTxn'txnidLeastBits
           (\ x__ y__
              -> x__ {_CommandAddSubscriptionToTxn'txnidLeastBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAddSubscriptionToTxn "txnidMostBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddSubscriptionToTxn'txnidMostBits
           (\ x__ y__
              -> x__ {_CommandAddSubscriptionToTxn'txnidMostBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandAddSubscriptionToTxn "maybe'txnidMostBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddSubscriptionToTxn'txnidMostBits
           (\ x__ y__
              -> x__ {_CommandAddSubscriptionToTxn'txnidMostBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAddSubscriptionToTxn "subscription" [Subscription] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddSubscriptionToTxn'subscription
           (\ x__ y__
              -> x__ {_CommandAddSubscriptionToTxn'subscription = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField CommandAddSubscriptionToTxn "vec'subscription" (Data.Vector.Vector Subscription) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddSubscriptionToTxn'subscription
           (\ x__ y__
              -> x__ {_CommandAddSubscriptionToTxn'subscription = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandAddSubscriptionToTxn where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandAddSubscriptionToTxn"
  packedMessageDescriptor _
    = "\n\
      \\ESCCommandAddSubscriptionToTxn\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
      \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
      \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2>\n\
      \\fsubscription\CAN\EOT \ETX(\v2\SUB.pulsar.proto.SubscriptionR\fsubscription"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandAddSubscriptionToTxn
        txnidLeastBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_least_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidLeastBits")) ::
              Data.ProtoLens.FieldDescriptor CommandAddSubscriptionToTxn
        txnidMostBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_most_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidMostBits")) ::
              Data.ProtoLens.FieldDescriptor CommandAddSubscriptionToTxn
        subscription__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "subscription"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Subscription)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"subscription")) ::
              Data.ProtoLens.FieldDescriptor CommandAddSubscriptionToTxn
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, txnidLeastBits__field_descriptor),
           (Data.ProtoLens.Tag 3, txnidMostBits__field_descriptor),
           (Data.ProtoLens.Tag 4, subscription__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandAddSubscriptionToTxn'_unknownFields
        (\ x__ y__
           -> x__ {_CommandAddSubscriptionToTxn'_unknownFields = y__})
  defMessage
    = CommandAddSubscriptionToTxn'_constructor
        {_CommandAddSubscriptionToTxn'requestId = Data.ProtoLens.fieldDefault,
         _CommandAddSubscriptionToTxn'txnidLeastBits = Prelude.Nothing,
         _CommandAddSubscriptionToTxn'txnidMostBits = Prelude.Nothing,
         _CommandAddSubscriptionToTxn'subscription = Data.Vector.Generic.empty,
         _CommandAddSubscriptionToTxn'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandAddSubscriptionToTxn
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Subscription
                -> Data.ProtoLens.Encoding.Bytes.Parser CommandAddSubscriptionToTxn
        loop x required'requestId mutable'subscription
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'subscription <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                               (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                  mutable'subscription)
                      (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'subscription")
                              frozen'subscription
                              x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                                  mutable'subscription
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_least_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidLeastBits") y x)
                                  required'requestId
                                  mutable'subscription
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_most_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidMostBits") y x)
                                  required'requestId
                                  mutable'subscription
                        34
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "subscription"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'subscription y)
                                loop x required'requestId v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
                                  mutable'subscription
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'subscription <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage Prelude.True mutable'subscription)
          "CommandAddSubscriptionToTxn"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'txnidLeastBits") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'txnidMostBits") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                         (\ _v
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                 ((Prelude..)
                                    (\ bs
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                    Data.ProtoLens.encodeMessage
                                    _v))
                         (Lens.Family2.view
                            (Data.ProtoLens.Field.field @"vec'subscription") _x))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData CommandAddSubscriptionToTxn where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandAddSubscriptionToTxn'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandAddSubscriptionToTxn'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandAddSubscriptionToTxn'txnidLeastBits x__)
                   (Control.DeepSeq.deepseq
                      (_CommandAddSubscriptionToTxn'txnidMostBits x__)
                      (Control.DeepSeq.deepseq
                         (_CommandAddSubscriptionToTxn'subscription x__) ()))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandAddSubscriptionToTxnResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.txnidLeastBits' @:: Lens' CommandAddSubscriptionToTxnResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidLeastBits' @:: Lens' CommandAddSubscriptionToTxnResponse (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.txnidMostBits' @:: Lens' CommandAddSubscriptionToTxnResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidMostBits' @:: Lens' CommandAddSubscriptionToTxnResponse (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.error' @:: Lens' CommandAddSubscriptionToTxnResponse ServerError@
         * 'Proto.PulsarApi_Fields.maybe'error' @:: Lens' CommandAddSubscriptionToTxnResponse (Prelude.Maybe ServerError)@
         * 'Proto.PulsarApi_Fields.message' @:: Lens' CommandAddSubscriptionToTxnResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'message' @:: Lens' CommandAddSubscriptionToTxnResponse (Prelude.Maybe Data.Text.Text)@ -}
data CommandAddSubscriptionToTxnResponse
  = CommandAddSubscriptionToTxnResponse'_constructor {_CommandAddSubscriptionToTxnResponse'requestId :: !Data.Word.Word64,
                                                      _CommandAddSubscriptionToTxnResponse'txnidLeastBits :: !(Prelude.Maybe Data.Word.Word64),
                                                      _CommandAddSubscriptionToTxnResponse'txnidMostBits :: !(Prelude.Maybe Data.Word.Word64),
                                                      _CommandAddSubscriptionToTxnResponse'error :: !(Prelude.Maybe ServerError),
                                                      _CommandAddSubscriptionToTxnResponse'message :: !(Prelude.Maybe Data.Text.Text),
                                                      _CommandAddSubscriptionToTxnResponse'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandAddSubscriptionToTxnResponse where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandAddSubscriptionToTxnResponse "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddSubscriptionToTxnResponse'requestId
           (\ x__ y__
              -> x__ {_CommandAddSubscriptionToTxnResponse'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAddSubscriptionToTxnResponse "txnidLeastBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddSubscriptionToTxnResponse'txnidLeastBits
           (\ x__ y__
              -> x__
                   {_CommandAddSubscriptionToTxnResponse'txnidLeastBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandAddSubscriptionToTxnResponse "maybe'txnidLeastBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddSubscriptionToTxnResponse'txnidLeastBits
           (\ x__ y__
              -> x__
                   {_CommandAddSubscriptionToTxnResponse'txnidLeastBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAddSubscriptionToTxnResponse "txnidMostBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddSubscriptionToTxnResponse'txnidMostBits
           (\ x__ y__
              -> x__ {_CommandAddSubscriptionToTxnResponse'txnidMostBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandAddSubscriptionToTxnResponse "maybe'txnidMostBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddSubscriptionToTxnResponse'txnidMostBits
           (\ x__ y__
              -> x__ {_CommandAddSubscriptionToTxnResponse'txnidMostBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAddSubscriptionToTxnResponse "error" ServerError where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddSubscriptionToTxnResponse'error
           (\ x__ y__
              -> x__ {_CommandAddSubscriptionToTxnResponse'error = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandAddSubscriptionToTxnResponse "maybe'error" (Prelude.Maybe ServerError) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddSubscriptionToTxnResponse'error
           (\ x__ y__
              -> x__ {_CommandAddSubscriptionToTxnResponse'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAddSubscriptionToTxnResponse "message" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddSubscriptionToTxnResponse'message
           (\ x__ y__
              -> x__ {_CommandAddSubscriptionToTxnResponse'message = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandAddSubscriptionToTxnResponse "maybe'message" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAddSubscriptionToTxnResponse'message
           (\ x__ y__
              -> x__ {_CommandAddSubscriptionToTxnResponse'message = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandAddSubscriptionToTxnResponse where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandAddSubscriptionToTxnResponse"
  packedMessageDescriptor _
    = "\n\
      \#CommandAddSubscriptionToTxnResponse\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
      \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
      \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2/\n\
      \\ENQerror\CAN\EOT \SOH(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
      \\amessage\CAN\ENQ \SOH(\tR\amessage"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandAddSubscriptionToTxnResponse
        txnidLeastBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_least_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidLeastBits")) ::
              Data.ProtoLens.FieldDescriptor CommandAddSubscriptionToTxnResponse
        txnidMostBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_most_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidMostBits")) ::
              Data.ProtoLens.FieldDescriptor CommandAddSubscriptionToTxnResponse
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ServerError)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'error")) ::
              Data.ProtoLens.FieldDescriptor CommandAddSubscriptionToTxnResponse
        message__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'message")) ::
              Data.ProtoLens.FieldDescriptor CommandAddSubscriptionToTxnResponse
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, txnidLeastBits__field_descriptor),
           (Data.ProtoLens.Tag 3, txnidMostBits__field_descriptor),
           (Data.ProtoLens.Tag 4, error__field_descriptor),
           (Data.ProtoLens.Tag 5, message__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandAddSubscriptionToTxnResponse'_unknownFields
        (\ x__ y__
           -> x__ {_CommandAddSubscriptionToTxnResponse'_unknownFields = y__})
  defMessage
    = CommandAddSubscriptionToTxnResponse'_constructor
        {_CommandAddSubscriptionToTxnResponse'requestId = Data.ProtoLens.fieldDefault,
         _CommandAddSubscriptionToTxnResponse'txnidLeastBits = Prelude.Nothing,
         _CommandAddSubscriptionToTxnResponse'txnidMostBits = Prelude.Nothing,
         _CommandAddSubscriptionToTxnResponse'error = Prelude.Nothing,
         _CommandAddSubscriptionToTxnResponse'message = Prelude.Nothing,
         _CommandAddSubscriptionToTxnResponse'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandAddSubscriptionToTxnResponse
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandAddSubscriptionToTxnResponse
        loop x required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_least_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidLeastBits") y x)
                                  required'requestId
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_most_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidMostBits") y x)
                                  required'requestId
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                                  required'requestId
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "message"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"message") y x)
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "CommandAddSubscriptionToTxnResponse"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'txnidLeastBits") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'txnidMostBits") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'error") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                   Prelude.fromEnum
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'message") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData CommandAddSubscriptionToTxnResponse where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandAddSubscriptionToTxnResponse'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandAddSubscriptionToTxnResponse'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandAddSubscriptionToTxnResponse'txnidLeastBits x__)
                   (Control.DeepSeq.deepseq
                      (_CommandAddSubscriptionToTxnResponse'txnidMostBits x__)
                      (Control.DeepSeq.deepseq
                         (_CommandAddSubscriptionToTxnResponse'error x__)
                         (Control.DeepSeq.deepseq
                            (_CommandAddSubscriptionToTxnResponse'message x__) ())))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.serverVersion' @:: Lens' CommandAuthChallenge Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'serverVersion' @:: Lens' CommandAuthChallenge (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.challenge' @:: Lens' CommandAuthChallenge AuthData@
         * 'Proto.PulsarApi_Fields.maybe'challenge' @:: Lens' CommandAuthChallenge (Prelude.Maybe AuthData)@
         * 'Proto.PulsarApi_Fields.protocolVersion' @:: Lens' CommandAuthChallenge Data.Int.Int32@
         * 'Proto.PulsarApi_Fields.maybe'protocolVersion' @:: Lens' CommandAuthChallenge (Prelude.Maybe Data.Int.Int32)@ -}
data CommandAuthChallenge
  = CommandAuthChallenge'_constructor {_CommandAuthChallenge'serverVersion :: !(Prelude.Maybe Data.Text.Text),
                                       _CommandAuthChallenge'challenge :: !(Prelude.Maybe AuthData),
                                       _CommandAuthChallenge'protocolVersion :: !(Prelude.Maybe Data.Int.Int32),
                                       _CommandAuthChallenge'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandAuthChallenge where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandAuthChallenge "serverVersion" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAuthChallenge'serverVersion
           (\ x__ y__ -> x__ {_CommandAuthChallenge'serverVersion = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandAuthChallenge "maybe'serverVersion" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAuthChallenge'serverVersion
           (\ x__ y__ -> x__ {_CommandAuthChallenge'serverVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAuthChallenge "challenge" AuthData where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAuthChallenge'challenge
           (\ x__ y__ -> x__ {_CommandAuthChallenge'challenge = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField CommandAuthChallenge "maybe'challenge" (Prelude.Maybe AuthData) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAuthChallenge'challenge
           (\ x__ y__ -> x__ {_CommandAuthChallenge'challenge = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAuthChallenge "protocolVersion" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAuthChallenge'protocolVersion
           (\ x__ y__ -> x__ {_CommandAuthChallenge'protocolVersion = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandAuthChallenge "maybe'protocolVersion" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAuthChallenge'protocolVersion
           (\ x__ y__ -> x__ {_CommandAuthChallenge'protocolVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandAuthChallenge where
  messageName _ = Data.Text.pack "pulsar.proto.CommandAuthChallenge"
  packedMessageDescriptor _
    = "\n\
      \\DC4CommandAuthChallenge\DC2%\n\
      \\SOserver_version\CAN\SOH \SOH(\tR\rserverVersion\DC24\n\
      \\tchallenge\CAN\STX \SOH(\v2\SYN.pulsar.proto.AuthDataR\tchallenge\DC2,\n\
      \\DLEprotocol_version\CAN\ETX \SOH(\ENQ:\SOH0R\SIprotocolVersion"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        serverVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "server_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'serverVersion")) ::
              Data.ProtoLens.FieldDescriptor CommandAuthChallenge
        challenge__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "challenge"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor AuthData)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'challenge")) ::
              Data.ProtoLens.FieldDescriptor CommandAuthChallenge
        protocolVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "protocol_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'protocolVersion")) ::
              Data.ProtoLens.FieldDescriptor CommandAuthChallenge
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, serverVersion__field_descriptor),
           (Data.ProtoLens.Tag 2, challenge__field_descriptor),
           (Data.ProtoLens.Tag 3, protocolVersion__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandAuthChallenge'_unknownFields
        (\ x__ y__ -> x__ {_CommandAuthChallenge'_unknownFields = y__})
  defMessage
    = CommandAuthChallenge'_constructor
        {_CommandAuthChallenge'serverVersion = Prelude.Nothing,
         _CommandAuthChallenge'challenge = Prelude.Nothing,
         _CommandAuthChallenge'protocolVersion = Prelude.Nothing,
         _CommandAuthChallenge'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandAuthChallenge
          -> Data.ProtoLens.Encoding.Bytes.Parser CommandAuthChallenge
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "server_version"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"serverVersion") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "challenge"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"challenge") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "protocol_version"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"protocolVersion") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "CommandAuthChallenge"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'serverVersion") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8
                          _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'challenge") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'protocolVersion") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData CommandAuthChallenge where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandAuthChallenge'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandAuthChallenge'serverVersion x__)
                (Control.DeepSeq.deepseq
                   (_CommandAuthChallenge'challenge x__)
                   (Control.DeepSeq.deepseq
                      (_CommandAuthChallenge'protocolVersion x__) ())))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.clientVersion' @:: Lens' CommandAuthResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'clientVersion' @:: Lens' CommandAuthResponse (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.response' @:: Lens' CommandAuthResponse AuthData@
         * 'Proto.PulsarApi_Fields.maybe'response' @:: Lens' CommandAuthResponse (Prelude.Maybe AuthData)@
         * 'Proto.PulsarApi_Fields.protocolVersion' @:: Lens' CommandAuthResponse Data.Int.Int32@
         * 'Proto.PulsarApi_Fields.maybe'protocolVersion' @:: Lens' CommandAuthResponse (Prelude.Maybe Data.Int.Int32)@ -}
data CommandAuthResponse
  = CommandAuthResponse'_constructor {_CommandAuthResponse'clientVersion :: !(Prelude.Maybe Data.Text.Text),
                                      _CommandAuthResponse'response :: !(Prelude.Maybe AuthData),
                                      _CommandAuthResponse'protocolVersion :: !(Prelude.Maybe Data.Int.Int32),
                                      _CommandAuthResponse'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandAuthResponse where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandAuthResponse "clientVersion" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAuthResponse'clientVersion
           (\ x__ y__ -> x__ {_CommandAuthResponse'clientVersion = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandAuthResponse "maybe'clientVersion" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAuthResponse'clientVersion
           (\ x__ y__ -> x__ {_CommandAuthResponse'clientVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAuthResponse "response" AuthData where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAuthResponse'response
           (\ x__ y__ -> x__ {_CommandAuthResponse'response = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField CommandAuthResponse "maybe'response" (Prelude.Maybe AuthData) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAuthResponse'response
           (\ x__ y__ -> x__ {_CommandAuthResponse'response = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandAuthResponse "protocolVersion" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAuthResponse'protocolVersion
           (\ x__ y__ -> x__ {_CommandAuthResponse'protocolVersion = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandAuthResponse "maybe'protocolVersion" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandAuthResponse'protocolVersion
           (\ x__ y__ -> x__ {_CommandAuthResponse'protocolVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandAuthResponse where
  messageName _ = Data.Text.pack "pulsar.proto.CommandAuthResponse"
  packedMessageDescriptor _
    = "\n\
      \\DC3CommandAuthResponse\DC2%\n\
      \\SOclient_version\CAN\SOH \SOH(\tR\rclientVersion\DC22\n\
      \\bresponse\CAN\STX \SOH(\v2\SYN.pulsar.proto.AuthDataR\bresponse\DC2,\n\
      \\DLEprotocol_version\CAN\ETX \SOH(\ENQ:\SOH0R\SIprotocolVersion"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        clientVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "client_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'clientVersion")) ::
              Data.ProtoLens.FieldDescriptor CommandAuthResponse
        response__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "response"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor AuthData)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'response")) ::
              Data.ProtoLens.FieldDescriptor CommandAuthResponse
        protocolVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "protocol_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'protocolVersion")) ::
              Data.ProtoLens.FieldDescriptor CommandAuthResponse
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, clientVersion__field_descriptor),
           (Data.ProtoLens.Tag 2, response__field_descriptor),
           (Data.ProtoLens.Tag 3, protocolVersion__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandAuthResponse'_unknownFields
        (\ x__ y__ -> x__ {_CommandAuthResponse'_unknownFields = y__})
  defMessage
    = CommandAuthResponse'_constructor
        {_CommandAuthResponse'clientVersion = Prelude.Nothing,
         _CommandAuthResponse'response = Prelude.Nothing,
         _CommandAuthResponse'protocolVersion = Prelude.Nothing,
         _CommandAuthResponse'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandAuthResponse
          -> Data.ProtoLens.Encoding.Bytes.Parser CommandAuthResponse
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "client_version"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"clientVersion") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "response"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"response") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "protocol_version"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"protocolVersion") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "CommandAuthResponse"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'clientVersion") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8
                          _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'response") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'protocolVersion") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData CommandAuthResponse where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandAuthResponse'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandAuthResponse'clientVersion x__)
                (Control.DeepSeq.deepseq
                   (_CommandAuthResponse'response x__)
                   (Control.DeepSeq.deepseq
                      (_CommandAuthResponse'protocolVersion x__) ())))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.consumerId' @:: Lens' CommandCloseConsumer Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandCloseConsumer Data.Word.Word64@ -}
data CommandCloseConsumer
  = CommandCloseConsumer'_constructor {_CommandCloseConsumer'consumerId :: !Data.Word.Word64,
                                       _CommandCloseConsumer'requestId :: !Data.Word.Word64,
                                       _CommandCloseConsumer'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandCloseConsumer where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandCloseConsumer "consumerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandCloseConsumer'consumerId
           (\ x__ y__ -> x__ {_CommandCloseConsumer'consumerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandCloseConsumer "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandCloseConsumer'requestId
           (\ x__ y__ -> x__ {_CommandCloseConsumer'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandCloseConsumer where
  messageName _ = Data.Text.pack "pulsar.proto.CommandCloseConsumer"
  packedMessageDescriptor _
    = "\n\
      \\DC4CommandCloseConsumer\DC2\US\n\
      \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
      \consumerId\DC2\GS\n\
      \\n\
      \request_id\CAN\STX \STX(\EOTR\trequestId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        consumerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "consumer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"consumerId")) ::
              Data.ProtoLens.FieldDescriptor CommandCloseConsumer
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandCloseConsumer
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, consumerId__field_descriptor),
           (Data.ProtoLens.Tag 2, requestId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandCloseConsumer'_unknownFields
        (\ x__ y__ -> x__ {_CommandCloseConsumer'_unknownFields = y__})
  defMessage
    = CommandCloseConsumer'_constructor
        {_CommandCloseConsumer'consumerId = Data.ProtoLens.fieldDefault,
         _CommandCloseConsumer'requestId = Data.ProtoLens.fieldDefault,
         _CommandCloseConsumer'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandCloseConsumer
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser CommandCloseConsumer
        loop x required'consumerId required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'consumerId then (:) "consumer_id" else Prelude.id)
                               ((if required'requestId then (:) "request_id" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "consumer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"consumerId") y x)
                                  Prelude.False
                                  required'requestId
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  required'consumerId
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'consumerId
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "CommandCloseConsumer"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"consumerId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData CommandCloseConsumer where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandCloseConsumer'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandCloseConsumer'consumerId x__)
                (Control.DeepSeq.deepseq (_CommandCloseConsumer'requestId x__) ()))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.producerId' @:: Lens' CommandCloseProducer Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandCloseProducer Data.Word.Word64@ -}
data CommandCloseProducer
  = CommandCloseProducer'_constructor {_CommandCloseProducer'producerId :: !Data.Word.Word64,
                                       _CommandCloseProducer'requestId :: !Data.Word.Word64,
                                       _CommandCloseProducer'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandCloseProducer where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandCloseProducer "producerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandCloseProducer'producerId
           (\ x__ y__ -> x__ {_CommandCloseProducer'producerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandCloseProducer "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandCloseProducer'requestId
           (\ x__ y__ -> x__ {_CommandCloseProducer'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandCloseProducer where
  messageName _ = Data.Text.pack "pulsar.proto.CommandCloseProducer"
  packedMessageDescriptor _
    = "\n\
      \\DC4CommandCloseProducer\DC2\US\n\
      \\vproducer_id\CAN\SOH \STX(\EOTR\n\
      \producerId\DC2\GS\n\
      \\n\
      \request_id\CAN\STX \STX(\EOTR\trequestId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        producerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "producer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"producerId")) ::
              Data.ProtoLens.FieldDescriptor CommandCloseProducer
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandCloseProducer
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, producerId__field_descriptor),
           (Data.ProtoLens.Tag 2, requestId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandCloseProducer'_unknownFields
        (\ x__ y__ -> x__ {_CommandCloseProducer'_unknownFields = y__})
  defMessage
    = CommandCloseProducer'_constructor
        {_CommandCloseProducer'producerId = Data.ProtoLens.fieldDefault,
         _CommandCloseProducer'requestId = Data.ProtoLens.fieldDefault,
         _CommandCloseProducer'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandCloseProducer
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser CommandCloseProducer
        loop x required'producerId required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'producerId then (:) "producer_id" else Prelude.id)
                               ((if required'requestId then (:) "request_id" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "producer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"producerId") y x)
                                  Prelude.False
                                  required'requestId
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  required'producerId
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'producerId
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "CommandCloseProducer"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"producerId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData CommandCloseProducer where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandCloseProducer'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandCloseProducer'producerId x__)
                (Control.DeepSeq.deepseq (_CommandCloseProducer'requestId x__) ()))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.clientVersion' @:: Lens' CommandConnect Data.Text.Text@
         * 'Proto.PulsarApi_Fields.authMethod' @:: Lens' CommandConnect AuthMethod@
         * 'Proto.PulsarApi_Fields.maybe'authMethod' @:: Lens' CommandConnect (Prelude.Maybe AuthMethod)@
         * 'Proto.PulsarApi_Fields.authMethodName' @:: Lens' CommandConnect Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'authMethodName' @:: Lens' CommandConnect (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.authData' @:: Lens' CommandConnect Data.ByteString.ByteString@
         * 'Proto.PulsarApi_Fields.maybe'authData' @:: Lens' CommandConnect (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.PulsarApi_Fields.protocolVersion' @:: Lens' CommandConnect Data.Int.Int32@
         * 'Proto.PulsarApi_Fields.maybe'protocolVersion' @:: Lens' CommandConnect (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.PulsarApi_Fields.proxyToBrokerUrl' @:: Lens' CommandConnect Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'proxyToBrokerUrl' @:: Lens' CommandConnect (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.originalPrincipal' @:: Lens' CommandConnect Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'originalPrincipal' @:: Lens' CommandConnect (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.originalAuthData' @:: Lens' CommandConnect Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'originalAuthData' @:: Lens' CommandConnect (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.originalAuthMethod' @:: Lens' CommandConnect Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'originalAuthMethod' @:: Lens' CommandConnect (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.featureFlags' @:: Lens' CommandConnect FeatureFlags@
         * 'Proto.PulsarApi_Fields.maybe'featureFlags' @:: Lens' CommandConnect (Prelude.Maybe FeatureFlags)@ -}
data CommandConnect
  = CommandConnect'_constructor {_CommandConnect'clientVersion :: !Data.Text.Text,
                                 _CommandConnect'authMethod :: !(Prelude.Maybe AuthMethod),
                                 _CommandConnect'authMethodName :: !(Prelude.Maybe Data.Text.Text),
                                 _CommandConnect'authData :: !(Prelude.Maybe Data.ByteString.ByteString),
                                 _CommandConnect'protocolVersion :: !(Prelude.Maybe Data.Int.Int32),
                                 _CommandConnect'proxyToBrokerUrl :: !(Prelude.Maybe Data.Text.Text),
                                 _CommandConnect'originalPrincipal :: !(Prelude.Maybe Data.Text.Text),
                                 _CommandConnect'originalAuthData :: !(Prelude.Maybe Data.Text.Text),
                                 _CommandConnect'originalAuthMethod :: !(Prelude.Maybe Data.Text.Text),
                                 _CommandConnect'featureFlags :: !(Prelude.Maybe FeatureFlags),
                                 _CommandConnect'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandConnect where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandConnect "clientVersion" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'clientVersion
           (\ x__ y__ -> x__ {_CommandConnect'clientVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConnect "authMethod" AuthMethod where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'authMethod
           (\ x__ y__ -> x__ {_CommandConnect'authMethod = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConnect "maybe'authMethod" (Prelude.Maybe AuthMethod) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'authMethod
           (\ x__ y__ -> x__ {_CommandConnect'authMethod = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConnect "authMethodName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'authMethodName
           (\ x__ y__ -> x__ {_CommandConnect'authMethodName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConnect "maybe'authMethodName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'authMethodName
           (\ x__ y__ -> x__ {_CommandConnect'authMethodName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConnect "authData" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'authData
           (\ x__ y__ -> x__ {_CommandConnect'authData = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConnect "maybe'authData" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'authData
           (\ x__ y__ -> x__ {_CommandConnect'authData = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConnect "protocolVersion" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'protocolVersion
           (\ x__ y__ -> x__ {_CommandConnect'protocolVersion = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandConnect "maybe'protocolVersion" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'protocolVersion
           (\ x__ y__ -> x__ {_CommandConnect'protocolVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConnect "proxyToBrokerUrl" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'proxyToBrokerUrl
           (\ x__ y__ -> x__ {_CommandConnect'proxyToBrokerUrl = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConnect "maybe'proxyToBrokerUrl" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'proxyToBrokerUrl
           (\ x__ y__ -> x__ {_CommandConnect'proxyToBrokerUrl = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConnect "originalPrincipal" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'originalPrincipal
           (\ x__ y__ -> x__ {_CommandConnect'originalPrincipal = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConnect "maybe'originalPrincipal" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'originalPrincipal
           (\ x__ y__ -> x__ {_CommandConnect'originalPrincipal = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConnect "originalAuthData" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'originalAuthData
           (\ x__ y__ -> x__ {_CommandConnect'originalAuthData = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConnect "maybe'originalAuthData" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'originalAuthData
           (\ x__ y__ -> x__ {_CommandConnect'originalAuthData = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConnect "originalAuthMethod" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'originalAuthMethod
           (\ x__ y__ -> x__ {_CommandConnect'originalAuthMethod = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConnect "maybe'originalAuthMethod" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'originalAuthMethod
           (\ x__ y__ -> x__ {_CommandConnect'originalAuthMethod = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConnect "featureFlags" FeatureFlags where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'featureFlags
           (\ x__ y__ -> x__ {_CommandConnect'featureFlags = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField CommandConnect "maybe'featureFlags" (Prelude.Maybe FeatureFlags) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnect'featureFlags
           (\ x__ y__ -> x__ {_CommandConnect'featureFlags = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandConnect where
  messageName _ = Data.Text.pack "pulsar.proto.CommandConnect"
  packedMessageDescriptor _
    = "\n\
      \\SOCommandConnect\DC2%\n\
      \\SOclient_version\CAN\SOH \STX(\tR\rclientVersion\DC29\n\
      \\vauth_method\CAN\STX \SOH(\SO2\CAN.pulsar.proto.AuthMethodR\n\
      \authMethod\DC2(\n\
      \\DLEauth_method_name\CAN\ENQ \SOH(\tR\SOauthMethodName\DC2\ESC\n\
      \\tauth_data\CAN\ETX \SOH(\fR\bauthData\DC2,\n\
      \\DLEprotocol_version\CAN\EOT \SOH(\ENQ:\SOH0R\SIprotocolVersion\DC2-\n\
      \\DC3proxy_to_broker_url\CAN\ACK \SOH(\tR\DLEproxyToBrokerUrl\DC2-\n\
      \\DC2original_principal\CAN\a \SOH(\tR\DC1originalPrincipal\DC2,\n\
      \\DC2original_auth_data\CAN\b \SOH(\tR\DLEoriginalAuthData\DC20\n\
      \\DC4original_auth_method\CAN\t \SOH(\tR\DC2originalAuthMethod\DC2?\n\
      \\rfeature_flags\CAN\n\
      \ \SOH(\v2\SUB.pulsar.proto.FeatureFlagsR\ffeatureFlags"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        clientVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "client_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"clientVersion")) ::
              Data.ProtoLens.FieldDescriptor CommandConnect
        authMethod__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "auth_method"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor AuthMethod)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'authMethod")) ::
              Data.ProtoLens.FieldDescriptor CommandConnect
        authMethodName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "auth_method_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'authMethodName")) ::
              Data.ProtoLens.FieldDescriptor CommandConnect
        authData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "auth_data"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'authData")) ::
              Data.ProtoLens.FieldDescriptor CommandConnect
        protocolVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "protocol_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'protocolVersion")) ::
              Data.ProtoLens.FieldDescriptor CommandConnect
        proxyToBrokerUrl__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "proxy_to_broker_url"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'proxyToBrokerUrl")) ::
              Data.ProtoLens.FieldDescriptor CommandConnect
        originalPrincipal__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "original_principal"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'originalPrincipal")) ::
              Data.ProtoLens.FieldDescriptor CommandConnect
        originalAuthData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "original_auth_data"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'originalAuthData")) ::
              Data.ProtoLens.FieldDescriptor CommandConnect
        originalAuthMethod__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "original_auth_method"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'originalAuthMethod")) ::
              Data.ProtoLens.FieldDescriptor CommandConnect
        featureFlags__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "feature_flags"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor FeatureFlags)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'featureFlags")) ::
              Data.ProtoLens.FieldDescriptor CommandConnect
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, clientVersion__field_descriptor),
           (Data.ProtoLens.Tag 2, authMethod__field_descriptor),
           (Data.ProtoLens.Tag 5, authMethodName__field_descriptor),
           (Data.ProtoLens.Tag 3, authData__field_descriptor),
           (Data.ProtoLens.Tag 4, protocolVersion__field_descriptor),
           (Data.ProtoLens.Tag 6, proxyToBrokerUrl__field_descriptor),
           (Data.ProtoLens.Tag 7, originalPrincipal__field_descriptor),
           (Data.ProtoLens.Tag 8, originalAuthData__field_descriptor),
           (Data.ProtoLens.Tag 9, originalAuthMethod__field_descriptor),
           (Data.ProtoLens.Tag 10, featureFlags__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandConnect'_unknownFields
        (\ x__ y__ -> x__ {_CommandConnect'_unknownFields = y__})
  defMessage
    = CommandConnect'_constructor
        {_CommandConnect'clientVersion = Data.ProtoLens.fieldDefault,
         _CommandConnect'authMethod = Prelude.Nothing,
         _CommandConnect'authMethodName = Prelude.Nothing,
         _CommandConnect'authData = Prelude.Nothing,
         _CommandConnect'protocolVersion = Prelude.Nothing,
         _CommandConnect'proxyToBrokerUrl = Prelude.Nothing,
         _CommandConnect'originalPrincipal = Prelude.Nothing,
         _CommandConnect'originalAuthData = Prelude.Nothing,
         _CommandConnect'originalAuthMethod = Prelude.Nothing,
         _CommandConnect'featureFlags = Prelude.Nothing,
         _CommandConnect'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandConnect
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandConnect
        loop x required'clientVersion
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'clientVersion then
                                  (:) "client_version"
                              else
                                  Prelude.id)
                               []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "client_version"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"clientVersion") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "auth_method"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"authMethod") y x)
                                  required'clientVersion
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "auth_method_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"authMethodName") y x)
                                  required'clientVersion
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "auth_data"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"authData") y x)
                                  required'clientVersion
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "protocol_version"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"protocolVersion") y x)
                                  required'clientVersion
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "proxy_to_broker_url"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"proxyToBrokerUrl") y x)
                                  required'clientVersion
                        58
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "original_principal"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"originalPrincipal") y x)
                                  required'clientVersion
                        66
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "original_auth_data"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"originalAuthData") y x)
                                  required'clientVersion
                        74
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "original_auth_method"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"originalAuthMethod") y x)
                                  required'clientVersion
                        82
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "feature_flags"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"featureFlags") y x)
                                  required'clientVersion
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'clientVersion
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "CommandConnect"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"clientVersion") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'authMethod") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                             Prelude.fromEnum
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'authMethodName") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8
                                _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'authData") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                                ((\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'protocolVersion") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                      Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'proxyToBrokerUrl") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                      ((Prelude..)
                                         (\ bs
                                            -> (Data.Monoid.<>)
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                    (Prelude.fromIntegral
                                                       (Data.ByteString.length bs)))
                                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         Data.Text.Encoding.encodeUtf8
                                         _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'originalPrincipal") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                         ((Prelude..)
                                            (\ bs
                                               -> (Data.Monoid.<>)
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                       (Prelude.fromIntegral
                                                          (Data.ByteString.length bs)))
                                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Data.Text.Encoding.encodeUtf8
                                            _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'originalAuthData") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 66)
                                            ((Prelude..)
                                               (\ bs
                                                  -> (Data.Monoid.<>)
                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                          (Prelude.fromIntegral
                                                             (Data.ByteString.length bs)))
                                                       (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                               Data.Text.Encoding.encodeUtf8
                                               _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'originalAuthMethod")
                                            _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 74)
                                               ((Prelude..)
                                                  (\ bs
                                                     -> (Data.Monoid.<>)
                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                             (Prelude.fromIntegral
                                                                (Data.ByteString.length bs)))
                                                          (Data.ProtoLens.Encoding.Bytes.putBytes
                                                             bs))
                                                  Data.Text.Encoding.encodeUtf8
                                                  _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'featureFlags") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 82)
                                                  ((Prelude..)
                                                     (\ bs
                                                        -> (Data.Monoid.<>)
                                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                (Prelude.fromIntegral
                                                                   (Data.ByteString.length bs)))
                                                             (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                bs))
                                                     Data.ProtoLens.encodeMessage
                                                     _v))
                                        (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                           (Lens.Family2.view
                                              Data.ProtoLens.unknownFields _x)))))))))))
instance Control.DeepSeq.NFData CommandConnect where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandConnect'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandConnect'clientVersion x__)
                (Control.DeepSeq.deepseq
                   (_CommandConnect'authMethod x__)
                   (Control.DeepSeq.deepseq
                      (_CommandConnect'authMethodName x__)
                      (Control.DeepSeq.deepseq
                         (_CommandConnect'authData x__)
                         (Control.DeepSeq.deepseq
                            (_CommandConnect'protocolVersion x__)
                            (Control.DeepSeq.deepseq
                               (_CommandConnect'proxyToBrokerUrl x__)
                               (Control.DeepSeq.deepseq
                                  (_CommandConnect'originalPrincipal x__)
                                  (Control.DeepSeq.deepseq
                                     (_CommandConnect'originalAuthData x__)
                                     (Control.DeepSeq.deepseq
                                        (_CommandConnect'originalAuthMethod x__)
                                        (Control.DeepSeq.deepseq
                                           (_CommandConnect'featureFlags x__) ()))))))))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.serverVersion' @:: Lens' CommandConnected Data.Text.Text@
         * 'Proto.PulsarApi_Fields.protocolVersion' @:: Lens' CommandConnected Data.Int.Int32@
         * 'Proto.PulsarApi_Fields.maybe'protocolVersion' @:: Lens' CommandConnected (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.PulsarApi_Fields.maxMessageSize' @:: Lens' CommandConnected Data.Int.Int32@
         * 'Proto.PulsarApi_Fields.maybe'maxMessageSize' @:: Lens' CommandConnected (Prelude.Maybe Data.Int.Int32)@ -}
data CommandConnected
  = CommandConnected'_constructor {_CommandConnected'serverVersion :: !Data.Text.Text,
                                   _CommandConnected'protocolVersion :: !(Prelude.Maybe Data.Int.Int32),
                                   _CommandConnected'maxMessageSize :: !(Prelude.Maybe Data.Int.Int32),
                                   _CommandConnected'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandConnected where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandConnected "serverVersion" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnected'serverVersion
           (\ x__ y__ -> x__ {_CommandConnected'serverVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConnected "protocolVersion" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnected'protocolVersion
           (\ x__ y__ -> x__ {_CommandConnected'protocolVersion = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandConnected "maybe'protocolVersion" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnected'protocolVersion
           (\ x__ y__ -> x__ {_CommandConnected'protocolVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConnected "maxMessageSize" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnected'maxMessageSize
           (\ x__ y__ -> x__ {_CommandConnected'maxMessageSize = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConnected "maybe'maxMessageSize" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConnected'maxMessageSize
           (\ x__ y__ -> x__ {_CommandConnected'maxMessageSize = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandConnected where
  messageName _ = Data.Text.pack "pulsar.proto.CommandConnected"
  packedMessageDescriptor _
    = "\n\
      \\DLECommandConnected\DC2%\n\
      \\SOserver_version\CAN\SOH \STX(\tR\rserverVersion\DC2,\n\
      \\DLEprotocol_version\CAN\STX \SOH(\ENQ:\SOH0R\SIprotocolVersion\DC2(\n\
      \\DLEmax_message_size\CAN\ETX \SOH(\ENQR\SOmaxMessageSize"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        serverVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "server_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"serverVersion")) ::
              Data.ProtoLens.FieldDescriptor CommandConnected
        protocolVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "protocol_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'protocolVersion")) ::
              Data.ProtoLens.FieldDescriptor CommandConnected
        maxMessageSize__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "max_message_size"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'maxMessageSize")) ::
              Data.ProtoLens.FieldDescriptor CommandConnected
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, serverVersion__field_descriptor),
           (Data.ProtoLens.Tag 2, protocolVersion__field_descriptor),
           (Data.ProtoLens.Tag 3, maxMessageSize__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandConnected'_unknownFields
        (\ x__ y__ -> x__ {_CommandConnected'_unknownFields = y__})
  defMessage
    = CommandConnected'_constructor
        {_CommandConnected'serverVersion = Data.ProtoLens.fieldDefault,
         _CommandConnected'protocolVersion = Prelude.Nothing,
         _CommandConnected'maxMessageSize = Prelude.Nothing,
         _CommandConnected'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandConnected
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandConnected
        loop x required'serverVersion
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'serverVersion then
                                  (:) "server_version"
                              else
                                  Prelude.id)
                               []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "server_version"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"serverVersion") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "protocol_version"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"protocolVersion") y x)
                                  required'serverVersion
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "max_message_size"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"maxMessageSize") y x)
                                  required'serverVersion
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'serverVersion
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "CommandConnected"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"serverVersion") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'protocolVersion") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'maxMessageSize") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData CommandConnected where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandConnected'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandConnected'serverVersion x__)
                (Control.DeepSeq.deepseq
                   (_CommandConnected'protocolVersion x__)
                   (Control.DeepSeq.deepseq
                      (_CommandConnected'maxMessageSize x__) ())))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandConsumerStats Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.consumerId' @:: Lens' CommandConsumerStats Data.Word.Word64@ -}
data CommandConsumerStats
  = CommandConsumerStats'_constructor {_CommandConsumerStats'requestId :: !Data.Word.Word64,
                                       _CommandConsumerStats'consumerId :: !Data.Word.Word64,
                                       _CommandConsumerStats'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandConsumerStats where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandConsumerStats "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStats'requestId
           (\ x__ y__ -> x__ {_CommandConsumerStats'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConsumerStats "consumerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStats'consumerId
           (\ x__ y__ -> x__ {_CommandConsumerStats'consumerId = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandConsumerStats where
  messageName _ = Data.Text.pack "pulsar.proto.CommandConsumerStats"
  packedMessageDescriptor _
    = "\n\
      \\DC4CommandConsumerStats\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2\US\n\
      \\vconsumer_id\CAN\EOT \STX(\EOTR\n\
      \consumerId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandConsumerStats
        consumerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "consumer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"consumerId")) ::
              Data.ProtoLens.FieldDescriptor CommandConsumerStats
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 4, consumerId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandConsumerStats'_unknownFields
        (\ x__ y__ -> x__ {_CommandConsumerStats'_unknownFields = y__})
  defMessage
    = CommandConsumerStats'_constructor
        {_CommandConsumerStats'requestId = Data.ProtoLens.fieldDefault,
         _CommandConsumerStats'consumerId = Data.ProtoLens.fieldDefault,
         _CommandConsumerStats'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandConsumerStats
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser CommandConsumerStats
        loop x required'consumerId required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'consumerId then (:) "consumer_id" else Prelude.id)
                               ((if required'requestId then (:) "request_id" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  required'consumerId
                                  Prelude.False
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "consumer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"consumerId") y x)
                                  Prelude.False
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'consumerId
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "CommandConsumerStats"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"consumerId") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData CommandConsumerStats where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandConsumerStats'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandConsumerStats'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandConsumerStats'consumerId x__) ()))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandConsumerStatsResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.errorCode' @:: Lens' CommandConsumerStatsResponse ServerError@
         * 'Proto.PulsarApi_Fields.maybe'errorCode' @:: Lens' CommandConsumerStatsResponse (Prelude.Maybe ServerError)@
         * 'Proto.PulsarApi_Fields.errorMessage' @:: Lens' CommandConsumerStatsResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'errorMessage' @:: Lens' CommandConsumerStatsResponse (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.msgRateOut' @:: Lens' CommandConsumerStatsResponse Prelude.Double@
         * 'Proto.PulsarApi_Fields.maybe'msgRateOut' @:: Lens' CommandConsumerStatsResponse (Prelude.Maybe Prelude.Double)@
         * 'Proto.PulsarApi_Fields.msgThroughputOut' @:: Lens' CommandConsumerStatsResponse Prelude.Double@
         * 'Proto.PulsarApi_Fields.maybe'msgThroughputOut' @:: Lens' CommandConsumerStatsResponse (Prelude.Maybe Prelude.Double)@
         * 'Proto.PulsarApi_Fields.msgRateRedeliver' @:: Lens' CommandConsumerStatsResponse Prelude.Double@
         * 'Proto.PulsarApi_Fields.maybe'msgRateRedeliver' @:: Lens' CommandConsumerStatsResponse (Prelude.Maybe Prelude.Double)@
         * 'Proto.PulsarApi_Fields.consumerName' @:: Lens' CommandConsumerStatsResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'consumerName' @:: Lens' CommandConsumerStatsResponse (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.availablePermits' @:: Lens' CommandConsumerStatsResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'availablePermits' @:: Lens' CommandConsumerStatsResponse (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.unackedMessages' @:: Lens' CommandConsumerStatsResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'unackedMessages' @:: Lens' CommandConsumerStatsResponse (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.blockedConsumerOnUnackedMsgs' @:: Lens' CommandConsumerStatsResponse Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'blockedConsumerOnUnackedMsgs' @:: Lens' CommandConsumerStatsResponse (Prelude.Maybe Prelude.Bool)@
         * 'Proto.PulsarApi_Fields.address' @:: Lens' CommandConsumerStatsResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'address' @:: Lens' CommandConsumerStatsResponse (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.connectedSince' @:: Lens' CommandConsumerStatsResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'connectedSince' @:: Lens' CommandConsumerStatsResponse (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.type'' @:: Lens' CommandConsumerStatsResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'type'' @:: Lens' CommandConsumerStatsResponse (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.msgRateExpired' @:: Lens' CommandConsumerStatsResponse Prelude.Double@
         * 'Proto.PulsarApi_Fields.maybe'msgRateExpired' @:: Lens' CommandConsumerStatsResponse (Prelude.Maybe Prelude.Double)@
         * 'Proto.PulsarApi_Fields.msgBacklog' @:: Lens' CommandConsumerStatsResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'msgBacklog' @:: Lens' CommandConsumerStatsResponse (Prelude.Maybe Data.Word.Word64)@ -}
data CommandConsumerStatsResponse
  = CommandConsumerStatsResponse'_constructor {_CommandConsumerStatsResponse'requestId :: !Data.Word.Word64,
                                               _CommandConsumerStatsResponse'errorCode :: !(Prelude.Maybe ServerError),
                                               _CommandConsumerStatsResponse'errorMessage :: !(Prelude.Maybe Data.Text.Text),
                                               _CommandConsumerStatsResponse'msgRateOut :: !(Prelude.Maybe Prelude.Double),
                                               _CommandConsumerStatsResponse'msgThroughputOut :: !(Prelude.Maybe Prelude.Double),
                                               _CommandConsumerStatsResponse'msgRateRedeliver :: !(Prelude.Maybe Prelude.Double),
                                               _CommandConsumerStatsResponse'consumerName :: !(Prelude.Maybe Data.Text.Text),
                                               _CommandConsumerStatsResponse'availablePermits :: !(Prelude.Maybe Data.Word.Word64),
                                               _CommandConsumerStatsResponse'unackedMessages :: !(Prelude.Maybe Data.Word.Word64),
                                               _CommandConsumerStatsResponse'blockedConsumerOnUnackedMsgs :: !(Prelude.Maybe Prelude.Bool),
                                               _CommandConsumerStatsResponse'address :: !(Prelude.Maybe Data.Text.Text),
                                               _CommandConsumerStatsResponse'connectedSince :: !(Prelude.Maybe Data.Text.Text),
                                               _CommandConsumerStatsResponse'type' :: !(Prelude.Maybe Data.Text.Text),
                                               _CommandConsumerStatsResponse'msgRateExpired :: !(Prelude.Maybe Prelude.Double),
                                               _CommandConsumerStatsResponse'msgBacklog :: !(Prelude.Maybe Data.Word.Word64),
                                               _CommandConsumerStatsResponse'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandConsumerStatsResponse where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'requestId
           (\ x__ y__ -> x__ {_CommandConsumerStatsResponse'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "errorCode" ServerError where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'errorCode
           (\ x__ y__ -> x__ {_CommandConsumerStatsResponse'errorCode = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "maybe'errorCode" (Prelude.Maybe ServerError) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'errorCode
           (\ x__ y__ -> x__ {_CommandConsumerStatsResponse'errorCode = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "errorMessage" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'errorMessage
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'errorMessage = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "maybe'errorMessage" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'errorMessage
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'errorMessage = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "msgRateOut" Prelude.Double where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'msgRateOut
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'msgRateOut = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "maybe'msgRateOut" (Prelude.Maybe Prelude.Double) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'msgRateOut
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'msgRateOut = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "msgThroughputOut" Prelude.Double where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'msgThroughputOut
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'msgThroughputOut = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "maybe'msgThroughputOut" (Prelude.Maybe Prelude.Double) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'msgThroughputOut
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'msgThroughputOut = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "msgRateRedeliver" Prelude.Double where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'msgRateRedeliver
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'msgRateRedeliver = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "maybe'msgRateRedeliver" (Prelude.Maybe Prelude.Double) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'msgRateRedeliver
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'msgRateRedeliver = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "consumerName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'consumerName
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'consumerName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "maybe'consumerName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'consumerName
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'consumerName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "availablePermits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'availablePermits
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'availablePermits = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "maybe'availablePermits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'availablePermits
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'availablePermits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "unackedMessages" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'unackedMessages
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'unackedMessages = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "maybe'unackedMessages" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'unackedMessages
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'unackedMessages = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "blockedConsumerOnUnackedMsgs" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'blockedConsumerOnUnackedMsgs
           (\ x__ y__
              -> x__
                   {_CommandConsumerStatsResponse'blockedConsumerOnUnackedMsgs = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "maybe'blockedConsumerOnUnackedMsgs" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'blockedConsumerOnUnackedMsgs
           (\ x__ y__
              -> x__
                   {_CommandConsumerStatsResponse'blockedConsumerOnUnackedMsgs = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "address" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'address
           (\ x__ y__ -> x__ {_CommandConsumerStatsResponse'address = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "maybe'address" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'address
           (\ x__ y__ -> x__ {_CommandConsumerStatsResponse'address = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "connectedSince" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'connectedSince
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'connectedSince = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "maybe'connectedSince" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'connectedSince
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'connectedSince = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "type'" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'type'
           (\ x__ y__ -> x__ {_CommandConsumerStatsResponse'type' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "maybe'type'" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'type'
           (\ x__ y__ -> x__ {_CommandConsumerStatsResponse'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "msgRateExpired" Prelude.Double where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'msgRateExpired
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'msgRateExpired = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "maybe'msgRateExpired" (Prelude.Maybe Prelude.Double) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'msgRateExpired
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'msgRateExpired = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "msgBacklog" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'msgBacklog
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'msgBacklog = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandConsumerStatsResponse "maybe'msgBacklog" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandConsumerStatsResponse'msgBacklog
           (\ x__ y__
              -> x__ {_CommandConsumerStatsResponse'msgBacklog = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandConsumerStatsResponse where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandConsumerStatsResponse"
  packedMessageDescriptor _
    = "\n\
      \\FSCommandConsumerStatsResponse\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC28\n\
      \\n\
      \error_code\CAN\STX \SOH(\SO2\EM.pulsar.proto.ServerErrorR\terrorCode\DC2#\n\
      \\rerror_message\CAN\ETX \SOH(\tR\ferrorMessage\DC2\RS\n\
      \\n\
      \msgRateOut\CAN\EOT \SOH(\SOHR\n\
      \msgRateOut\DC2*\n\
      \\DLEmsgThroughputOut\CAN\ENQ \SOH(\SOHR\DLEmsgThroughputOut\DC2*\n\
      \\DLEmsgRateRedeliver\CAN\ACK \SOH(\SOHR\DLEmsgRateRedeliver\DC2\"\n\
      \\fconsumerName\CAN\a \SOH(\tR\fconsumerName\DC2*\n\
      \\DLEavailablePermits\CAN\b \SOH(\EOTR\DLEavailablePermits\DC2(\n\
      \\SIunackedMessages\CAN\t \SOH(\EOTR\SIunackedMessages\DC2B\n\
      \\FSblockedConsumerOnUnackedMsgs\CAN\n\
      \ \SOH(\bR\FSblockedConsumerOnUnackedMsgs\DC2\CAN\n\
      \\aaddress\CAN\v \SOH(\tR\aaddress\DC2&\n\
      \\SOconnectedSince\CAN\f \SOH(\tR\SOconnectedSince\DC2\DC2\n\
      \\EOTtype\CAN\r \SOH(\tR\EOTtype\DC2&\n\
      \\SOmsgRateExpired\CAN\SO \SOH(\SOHR\SOmsgRateExpired\DC2\RS\n\
      \\n\
      \msgBacklog\CAN\SI \SOH(\EOTR\n\
      \msgBacklog"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandConsumerStatsResponse
        errorCode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error_code"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ServerError)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'errorCode")) ::
              Data.ProtoLens.FieldDescriptor CommandConsumerStatsResponse
        errorMessage__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error_message"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'errorMessage")) ::
              Data.ProtoLens.FieldDescriptor CommandConsumerStatsResponse
        msgRateOut__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "msgRateOut"
              (Data.ProtoLens.ScalarField Data.ProtoLens.DoubleField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Double)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'msgRateOut")) ::
              Data.ProtoLens.FieldDescriptor CommandConsumerStatsResponse
        msgThroughputOut__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "msgThroughputOut"
              (Data.ProtoLens.ScalarField Data.ProtoLens.DoubleField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Double)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'msgThroughputOut")) ::
              Data.ProtoLens.FieldDescriptor CommandConsumerStatsResponse
        msgRateRedeliver__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "msgRateRedeliver"
              (Data.ProtoLens.ScalarField Data.ProtoLens.DoubleField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Double)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'msgRateRedeliver")) ::
              Data.ProtoLens.FieldDescriptor CommandConsumerStatsResponse
        consumerName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "consumerName"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'consumerName")) ::
              Data.ProtoLens.FieldDescriptor CommandConsumerStatsResponse
        availablePermits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "availablePermits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'availablePermits")) ::
              Data.ProtoLens.FieldDescriptor CommandConsumerStatsResponse
        unackedMessages__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "unackedMessages"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'unackedMessages")) ::
              Data.ProtoLens.FieldDescriptor CommandConsumerStatsResponse
        blockedConsumerOnUnackedMsgs__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "blockedConsumerOnUnackedMsgs"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field
                    @"maybe'blockedConsumerOnUnackedMsgs")) ::
              Data.ProtoLens.FieldDescriptor CommandConsumerStatsResponse
        address__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "address"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'address")) ::
              Data.ProtoLens.FieldDescriptor CommandConsumerStatsResponse
        connectedSince__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "connectedSince"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'connectedSince")) ::
              Data.ProtoLens.FieldDescriptor CommandConsumerStatsResponse
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'type'")) ::
              Data.ProtoLens.FieldDescriptor CommandConsumerStatsResponse
        msgRateExpired__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "msgRateExpired"
              (Data.ProtoLens.ScalarField Data.ProtoLens.DoubleField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Double)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'msgRateExpired")) ::
              Data.ProtoLens.FieldDescriptor CommandConsumerStatsResponse
        msgBacklog__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "msgBacklog"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'msgBacklog")) ::
              Data.ProtoLens.FieldDescriptor CommandConsumerStatsResponse
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, errorCode__field_descriptor),
           (Data.ProtoLens.Tag 3, errorMessage__field_descriptor),
           (Data.ProtoLens.Tag 4, msgRateOut__field_descriptor),
           (Data.ProtoLens.Tag 5, msgThroughputOut__field_descriptor),
           (Data.ProtoLens.Tag 6, msgRateRedeliver__field_descriptor),
           (Data.ProtoLens.Tag 7, consumerName__field_descriptor),
           (Data.ProtoLens.Tag 8, availablePermits__field_descriptor),
           (Data.ProtoLens.Tag 9, unackedMessages__field_descriptor),
           (Data.ProtoLens.Tag 10, 
            blockedConsumerOnUnackedMsgs__field_descriptor),
           (Data.ProtoLens.Tag 11, address__field_descriptor),
           (Data.ProtoLens.Tag 12, connectedSince__field_descriptor),
           (Data.ProtoLens.Tag 13, type'__field_descriptor),
           (Data.ProtoLens.Tag 14, msgRateExpired__field_descriptor),
           (Data.ProtoLens.Tag 15, msgBacklog__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandConsumerStatsResponse'_unknownFields
        (\ x__ y__
           -> x__ {_CommandConsumerStatsResponse'_unknownFields = y__})
  defMessage
    = CommandConsumerStatsResponse'_constructor
        {_CommandConsumerStatsResponse'requestId = Data.ProtoLens.fieldDefault,
         _CommandConsumerStatsResponse'errorCode = Prelude.Nothing,
         _CommandConsumerStatsResponse'errorMessage = Prelude.Nothing,
         _CommandConsumerStatsResponse'msgRateOut = Prelude.Nothing,
         _CommandConsumerStatsResponse'msgThroughputOut = Prelude.Nothing,
         _CommandConsumerStatsResponse'msgRateRedeliver = Prelude.Nothing,
         _CommandConsumerStatsResponse'consumerName = Prelude.Nothing,
         _CommandConsumerStatsResponse'availablePermits = Prelude.Nothing,
         _CommandConsumerStatsResponse'unackedMessages = Prelude.Nothing,
         _CommandConsumerStatsResponse'blockedConsumerOnUnackedMsgs = Prelude.Nothing,
         _CommandConsumerStatsResponse'address = Prelude.Nothing,
         _CommandConsumerStatsResponse'connectedSince = Prelude.Nothing,
         _CommandConsumerStatsResponse'type' = Prelude.Nothing,
         _CommandConsumerStatsResponse'msgRateExpired = Prelude.Nothing,
         _CommandConsumerStatsResponse'msgBacklog = Prelude.Nothing,
         _CommandConsumerStatsResponse'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandConsumerStatsResponse
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandConsumerStatsResponse
        loop x required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error_code"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"errorCode") y x)
                                  required'requestId
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "error_message"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"errorMessage") y x)
                                  required'requestId
                        33
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToDouble
                                          Data.ProtoLens.Encoding.Bytes.getFixed64)
                                       "msgRateOut"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"msgRateOut") y x)
                                  required'requestId
                        41
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToDouble
                                          Data.ProtoLens.Encoding.Bytes.getFixed64)
                                       "msgThroughputOut"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"msgThroughputOut") y x)
                                  required'requestId
                        49
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToDouble
                                          Data.ProtoLens.Encoding.Bytes.getFixed64)
                                       "msgRateRedeliver"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"msgRateRedeliver") y x)
                                  required'requestId
                        58
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "consumerName"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"consumerName") y x)
                                  required'requestId
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "availablePermits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"availablePermits") y x)
                                  required'requestId
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "unackedMessages"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"unackedMessages") y x)
                                  required'requestId
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "blockedConsumerOnUnackedMsgs"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"blockedConsumerOnUnackedMsgs")
                                     y
                                     x)
                                  required'requestId
                        90
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "address"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"address") y x)
                                  required'requestId
                        98
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "connectedSince"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"connectedSince") y x)
                                  required'requestId
                        106
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'requestId
                        113
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToDouble
                                          Data.ProtoLens.Encoding.Bytes.getFixed64)
                                       "msgRateExpired"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"msgRateExpired") y x)
                                  required'requestId
                        120
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "msgBacklog"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"msgBacklog") y x)
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "CommandConsumerStatsResponse"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'errorCode") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                             Prelude.fromEnum
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'errorMessage") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8
                                _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'msgRateOut") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 33)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putFixed64
                                   Data.ProtoLens.Encoding.Bytes.doubleToWord
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'msgThroughputOut") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 41)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putFixed64
                                      Data.ProtoLens.Encoding.Bytes.doubleToWord
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'msgRateRedeliver") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 49)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putFixed64
                                         Data.ProtoLens.Encoding.Bytes.doubleToWord
                                         _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'consumerName") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                         ((Prelude..)
                                            (\ bs
                                               -> (Data.Monoid.<>)
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                       (Prelude.fromIntegral
                                                          (Data.ByteString.length bs)))
                                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Data.Text.Encoding.encodeUtf8
                                            _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'availablePermits") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'unackedMessages") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field
                                                  @"maybe'blockedConsumerOnUnackedMsgs")
                                               _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     (\ b -> if b then 1 else 0)
                                                     _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field @"maybe'address") _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 90)
                                                     ((Prelude..)
                                                        (\ bs
                                                           -> (Data.Monoid.<>)
                                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                   (Prelude.fromIntegral
                                                                      (Data.ByteString.length bs)))
                                                                (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                   bs))
                                                        Data.Text.Encoding.encodeUtf8
                                                        _v))
                                           ((Data.Monoid.<>)
                                              (case
                                                   Lens.Family2.view
                                                     (Data.ProtoLens.Field.field
                                                        @"maybe'connectedSince")
                                                     _x
                                               of
                                                 Prelude.Nothing -> Data.Monoid.mempty
                                                 (Prelude.Just _v)
                                                   -> (Data.Monoid.<>)
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt 98)
                                                        ((Prelude..)
                                                           (\ bs
                                                              -> (Data.Monoid.<>)
                                                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                      (Prelude.fromIntegral
                                                                         (Data.ByteString.length
                                                                            bs)))
                                                                   (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                      bs))
                                                           Data.Text.Encoding.encodeUtf8
                                                           _v))
                                              ((Data.Monoid.<>)
                                                 (case
                                                      Lens.Family2.view
                                                        (Data.ProtoLens.Field.field @"maybe'type'")
                                                        _x
                                                  of
                                                    Prelude.Nothing -> Data.Monoid.mempty
                                                    (Prelude.Just _v)
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              106)
                                                           ((Prelude..)
                                                              (\ bs
                                                                 -> (Data.Monoid.<>)
                                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                         (Prelude.fromIntegral
                                                                            (Data.ByteString.length
                                                                               bs)))
                                                                      (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                         bs))
                                                              Data.Text.Encoding.encodeUtf8
                                                              _v))
                                                 ((Data.Monoid.<>)
                                                    (case
                                                         Lens.Family2.view
                                                           (Data.ProtoLens.Field.field
                                                              @"maybe'msgRateExpired")
                                                           _x
                                                     of
                                                       Prelude.Nothing -> Data.Monoid.mempty
                                                       (Prelude.Just _v)
                                                         -> (Data.Monoid.<>)
                                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 113)
                                                              ((Prelude..)
                                                                 Data.ProtoLens.Encoding.Bytes.putFixed64
                                                                 Data.ProtoLens.Encoding.Bytes.doubleToWord
                                                                 _v))
                                                    ((Data.Monoid.<>)
                                                       (case
                                                            Lens.Family2.view
                                                              (Data.ProtoLens.Field.field
                                                                 @"maybe'msgBacklog")
                                                              _x
                                                        of
                                                          Prelude.Nothing -> Data.Monoid.mempty
                                                          (Prelude.Just _v)
                                                            -> (Data.Monoid.<>)
                                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    120)
                                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    _v))
                                                       (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                          (Lens.Family2.view
                                                             Data.ProtoLens.unknownFields
                                                             _x))))))))))))))))
instance Control.DeepSeq.NFData CommandConsumerStatsResponse where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandConsumerStatsResponse'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandConsumerStatsResponse'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandConsumerStatsResponse'errorCode x__)
                   (Control.DeepSeq.deepseq
                      (_CommandConsumerStatsResponse'errorMessage x__)
                      (Control.DeepSeq.deepseq
                         (_CommandConsumerStatsResponse'msgRateOut x__)
                         (Control.DeepSeq.deepseq
                            (_CommandConsumerStatsResponse'msgThroughputOut x__)
                            (Control.DeepSeq.deepseq
                               (_CommandConsumerStatsResponse'msgRateRedeliver x__)
                               (Control.DeepSeq.deepseq
                                  (_CommandConsumerStatsResponse'consumerName x__)
                                  (Control.DeepSeq.deepseq
                                     (_CommandConsumerStatsResponse'availablePermits x__)
                                     (Control.DeepSeq.deepseq
                                        (_CommandConsumerStatsResponse'unackedMessages x__)
                                        (Control.DeepSeq.deepseq
                                           (_CommandConsumerStatsResponse'blockedConsumerOnUnackedMsgs
                                              x__)
                                           (Control.DeepSeq.deepseq
                                              (_CommandConsumerStatsResponse'address x__)
                                              (Control.DeepSeq.deepseq
                                                 (_CommandConsumerStatsResponse'connectedSince x__)
                                                 (Control.DeepSeq.deepseq
                                                    (_CommandConsumerStatsResponse'type' x__)
                                                    (Control.DeepSeq.deepseq
                                                       (_CommandConsumerStatsResponse'msgRateExpired
                                                          x__)
                                                       (Control.DeepSeq.deepseq
                                                          (_CommandConsumerStatsResponse'msgBacklog
                                                             x__)
                                                          ())))))))))))))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandEndTxn Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.txnidLeastBits' @:: Lens' CommandEndTxn Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidLeastBits' @:: Lens' CommandEndTxn (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.txnidMostBits' @:: Lens' CommandEndTxn Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidMostBits' @:: Lens' CommandEndTxn (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.txnAction' @:: Lens' CommandEndTxn TxnAction@
         * 'Proto.PulsarApi_Fields.maybe'txnAction' @:: Lens' CommandEndTxn (Prelude.Maybe TxnAction)@ -}
data CommandEndTxn
  = CommandEndTxn'_constructor {_CommandEndTxn'requestId :: !Data.Word.Word64,
                                _CommandEndTxn'txnidLeastBits :: !(Prelude.Maybe Data.Word.Word64),
                                _CommandEndTxn'txnidMostBits :: !(Prelude.Maybe Data.Word.Word64),
                                _CommandEndTxn'txnAction :: !(Prelude.Maybe TxnAction),
                                _CommandEndTxn'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandEndTxn where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandEndTxn "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxn'requestId
           (\ x__ y__ -> x__ {_CommandEndTxn'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxn "txnidLeastBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxn'txnidLeastBits
           (\ x__ y__ -> x__ {_CommandEndTxn'txnidLeastBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandEndTxn "maybe'txnidLeastBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxn'txnidLeastBits
           (\ x__ y__ -> x__ {_CommandEndTxn'txnidLeastBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxn "txnidMostBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxn'txnidMostBits
           (\ x__ y__ -> x__ {_CommandEndTxn'txnidMostBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandEndTxn "maybe'txnidMostBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxn'txnidMostBits
           (\ x__ y__ -> x__ {_CommandEndTxn'txnidMostBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxn "txnAction" TxnAction where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxn'txnAction
           (\ x__ y__ -> x__ {_CommandEndTxn'txnAction = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandEndTxn "maybe'txnAction" (Prelude.Maybe TxnAction) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxn'txnAction
           (\ x__ y__ -> x__ {_CommandEndTxn'txnAction = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandEndTxn where
  messageName _ = Data.Text.pack "pulsar.proto.CommandEndTxn"
  packedMessageDescriptor _
    = "\n\
      \\rCommandEndTxn\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
      \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
      \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC26\n\
      \\n\
      \txn_action\CAN\EOT \SOH(\SO2\ETB.pulsar.proto.TxnActionR\ttxnAction"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxn
        txnidLeastBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_least_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidLeastBits")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxn
        txnidMostBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_most_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidMostBits")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxn
        txnAction__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txn_action"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor TxnAction)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnAction")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxn
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, txnidLeastBits__field_descriptor),
           (Data.ProtoLens.Tag 3, txnidMostBits__field_descriptor),
           (Data.ProtoLens.Tag 4, txnAction__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandEndTxn'_unknownFields
        (\ x__ y__ -> x__ {_CommandEndTxn'_unknownFields = y__})
  defMessage
    = CommandEndTxn'_constructor
        {_CommandEndTxn'requestId = Data.ProtoLens.fieldDefault,
         _CommandEndTxn'txnidLeastBits = Prelude.Nothing,
         _CommandEndTxn'txnidMostBits = Prelude.Nothing,
         _CommandEndTxn'txnAction = Prelude.Nothing,
         _CommandEndTxn'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandEndTxn
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandEndTxn
        loop x required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_least_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidLeastBits") y x)
                                  required'requestId
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_most_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidMostBits") y x)
                                  required'requestId
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "txn_action"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"txnAction") y x)
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "CommandEndTxn"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'txnidLeastBits") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'txnidMostBits") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'txnAction") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                   Prelude.fromEnum
                                   _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData CommandEndTxn where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandEndTxn'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandEndTxn'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandEndTxn'txnidLeastBits x__)
                   (Control.DeepSeq.deepseq
                      (_CommandEndTxn'txnidMostBits x__)
                      (Control.DeepSeq.deepseq (_CommandEndTxn'txnAction x__) ()))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandEndTxnOnPartition Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.txnidLeastBits' @:: Lens' CommandEndTxnOnPartition Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidLeastBits' @:: Lens' CommandEndTxnOnPartition (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.txnidMostBits' @:: Lens' CommandEndTxnOnPartition Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidMostBits' @:: Lens' CommandEndTxnOnPartition (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.topic' @:: Lens' CommandEndTxnOnPartition Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'topic' @:: Lens' CommandEndTxnOnPartition (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.txnAction' @:: Lens' CommandEndTxnOnPartition TxnAction@
         * 'Proto.PulsarApi_Fields.maybe'txnAction' @:: Lens' CommandEndTxnOnPartition (Prelude.Maybe TxnAction)@ -}
data CommandEndTxnOnPartition
  = CommandEndTxnOnPartition'_constructor {_CommandEndTxnOnPartition'requestId :: !Data.Word.Word64,
                                           _CommandEndTxnOnPartition'txnidLeastBits :: !(Prelude.Maybe Data.Word.Word64),
                                           _CommandEndTxnOnPartition'txnidMostBits :: !(Prelude.Maybe Data.Word.Word64),
                                           _CommandEndTxnOnPartition'topic :: !(Prelude.Maybe Data.Text.Text),
                                           _CommandEndTxnOnPartition'txnAction :: !(Prelude.Maybe TxnAction),
                                           _CommandEndTxnOnPartition'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandEndTxnOnPartition where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandEndTxnOnPartition "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnPartition'requestId
           (\ x__ y__ -> x__ {_CommandEndTxnOnPartition'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnOnPartition "txnidLeastBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnPartition'txnidLeastBits
           (\ x__ y__
              -> x__ {_CommandEndTxnOnPartition'txnidLeastBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandEndTxnOnPartition "maybe'txnidLeastBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnPartition'txnidLeastBits
           (\ x__ y__
              -> x__ {_CommandEndTxnOnPartition'txnidLeastBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnOnPartition "txnidMostBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnPartition'txnidMostBits
           (\ x__ y__ -> x__ {_CommandEndTxnOnPartition'txnidMostBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandEndTxnOnPartition "maybe'txnidMostBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnPartition'txnidMostBits
           (\ x__ y__ -> x__ {_CommandEndTxnOnPartition'txnidMostBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnOnPartition "topic" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnPartition'topic
           (\ x__ y__ -> x__ {_CommandEndTxnOnPartition'topic = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandEndTxnOnPartition "maybe'topic" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnPartition'topic
           (\ x__ y__ -> x__ {_CommandEndTxnOnPartition'topic = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnOnPartition "txnAction" TxnAction where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnPartition'txnAction
           (\ x__ y__ -> x__ {_CommandEndTxnOnPartition'txnAction = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandEndTxnOnPartition "maybe'txnAction" (Prelude.Maybe TxnAction) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnPartition'txnAction
           (\ x__ y__ -> x__ {_CommandEndTxnOnPartition'txnAction = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandEndTxnOnPartition where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandEndTxnOnPartition"
  packedMessageDescriptor _
    = "\n\
      \\CANCommandEndTxnOnPartition\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
      \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
      \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2\DC4\n\
      \\ENQtopic\CAN\EOT \SOH(\tR\ENQtopic\DC26\n\
      \\n\
      \txn_action\CAN\ENQ \SOH(\SO2\ETB.pulsar.proto.TxnActionR\ttxnAction"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnPartition
        txnidLeastBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_least_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidLeastBits")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnPartition
        txnidMostBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_most_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidMostBits")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnPartition
        topic__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "topic"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'topic")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnPartition
        txnAction__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txn_action"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor TxnAction)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnAction")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnPartition
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, txnidLeastBits__field_descriptor),
           (Data.ProtoLens.Tag 3, txnidMostBits__field_descriptor),
           (Data.ProtoLens.Tag 4, topic__field_descriptor),
           (Data.ProtoLens.Tag 5, txnAction__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandEndTxnOnPartition'_unknownFields
        (\ x__ y__ -> x__ {_CommandEndTxnOnPartition'_unknownFields = y__})
  defMessage
    = CommandEndTxnOnPartition'_constructor
        {_CommandEndTxnOnPartition'requestId = Data.ProtoLens.fieldDefault,
         _CommandEndTxnOnPartition'txnidLeastBits = Prelude.Nothing,
         _CommandEndTxnOnPartition'txnidMostBits = Prelude.Nothing,
         _CommandEndTxnOnPartition'topic = Prelude.Nothing,
         _CommandEndTxnOnPartition'txnAction = Prelude.Nothing,
         _CommandEndTxnOnPartition'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandEndTxnOnPartition
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandEndTxnOnPartition
        loop x required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_least_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidLeastBits") y x)
                                  required'requestId
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_most_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidMostBits") y x)
                                  required'requestId
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "topic"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"topic") y x)
                                  required'requestId
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "txn_action"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"txnAction") y x)
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "CommandEndTxnOnPartition"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'txnidLeastBits") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'txnidMostBits") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'topic") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.Text.Encoding.encodeUtf8
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'txnAction") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral)
                                      Prelude.fromEnum
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData CommandEndTxnOnPartition where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandEndTxnOnPartition'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandEndTxnOnPartition'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandEndTxnOnPartition'txnidLeastBits x__)
                   (Control.DeepSeq.deepseq
                      (_CommandEndTxnOnPartition'txnidMostBits x__)
                      (Control.DeepSeq.deepseq
                         (_CommandEndTxnOnPartition'topic x__)
                         (Control.DeepSeq.deepseq
                            (_CommandEndTxnOnPartition'txnAction x__) ())))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandEndTxnOnPartitionResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.txnidLeastBits' @:: Lens' CommandEndTxnOnPartitionResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidLeastBits' @:: Lens' CommandEndTxnOnPartitionResponse (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.txnidMostBits' @:: Lens' CommandEndTxnOnPartitionResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidMostBits' @:: Lens' CommandEndTxnOnPartitionResponse (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.error' @:: Lens' CommandEndTxnOnPartitionResponse ServerError@
         * 'Proto.PulsarApi_Fields.maybe'error' @:: Lens' CommandEndTxnOnPartitionResponse (Prelude.Maybe ServerError)@
         * 'Proto.PulsarApi_Fields.message' @:: Lens' CommandEndTxnOnPartitionResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'message' @:: Lens' CommandEndTxnOnPartitionResponse (Prelude.Maybe Data.Text.Text)@ -}
data CommandEndTxnOnPartitionResponse
  = CommandEndTxnOnPartitionResponse'_constructor {_CommandEndTxnOnPartitionResponse'requestId :: !Data.Word.Word64,
                                                   _CommandEndTxnOnPartitionResponse'txnidLeastBits :: !(Prelude.Maybe Data.Word.Word64),
                                                   _CommandEndTxnOnPartitionResponse'txnidMostBits :: !(Prelude.Maybe Data.Word.Word64),
                                                   _CommandEndTxnOnPartitionResponse'error :: !(Prelude.Maybe ServerError),
                                                   _CommandEndTxnOnPartitionResponse'message :: !(Prelude.Maybe Data.Text.Text),
                                                   _CommandEndTxnOnPartitionResponse'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandEndTxnOnPartitionResponse where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandEndTxnOnPartitionResponse "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnPartitionResponse'requestId
           (\ x__ y__
              -> x__ {_CommandEndTxnOnPartitionResponse'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnOnPartitionResponse "txnidLeastBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnPartitionResponse'txnidLeastBits
           (\ x__ y__
              -> x__ {_CommandEndTxnOnPartitionResponse'txnidLeastBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandEndTxnOnPartitionResponse "maybe'txnidLeastBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnPartitionResponse'txnidLeastBits
           (\ x__ y__
              -> x__ {_CommandEndTxnOnPartitionResponse'txnidLeastBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnOnPartitionResponse "txnidMostBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnPartitionResponse'txnidMostBits
           (\ x__ y__
              -> x__ {_CommandEndTxnOnPartitionResponse'txnidMostBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandEndTxnOnPartitionResponse "maybe'txnidMostBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnPartitionResponse'txnidMostBits
           (\ x__ y__
              -> x__ {_CommandEndTxnOnPartitionResponse'txnidMostBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnOnPartitionResponse "error" ServerError where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnPartitionResponse'error
           (\ x__ y__ -> x__ {_CommandEndTxnOnPartitionResponse'error = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandEndTxnOnPartitionResponse "maybe'error" (Prelude.Maybe ServerError) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnPartitionResponse'error
           (\ x__ y__ -> x__ {_CommandEndTxnOnPartitionResponse'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnOnPartitionResponse "message" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnPartitionResponse'message
           (\ x__ y__
              -> x__ {_CommandEndTxnOnPartitionResponse'message = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandEndTxnOnPartitionResponse "maybe'message" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnPartitionResponse'message
           (\ x__ y__
              -> x__ {_CommandEndTxnOnPartitionResponse'message = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandEndTxnOnPartitionResponse where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandEndTxnOnPartitionResponse"
  packedMessageDescriptor _
    = "\n\
      \ CommandEndTxnOnPartitionResponse\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
      \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
      \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2/\n\
      \\ENQerror\CAN\EOT \SOH(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
      \\amessage\CAN\ENQ \SOH(\tR\amessage"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnPartitionResponse
        txnidLeastBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_least_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidLeastBits")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnPartitionResponse
        txnidMostBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_most_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidMostBits")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnPartitionResponse
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ServerError)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'error")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnPartitionResponse
        message__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'message")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnPartitionResponse
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, txnidLeastBits__field_descriptor),
           (Data.ProtoLens.Tag 3, txnidMostBits__field_descriptor),
           (Data.ProtoLens.Tag 4, error__field_descriptor),
           (Data.ProtoLens.Tag 5, message__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandEndTxnOnPartitionResponse'_unknownFields
        (\ x__ y__
           -> x__ {_CommandEndTxnOnPartitionResponse'_unknownFields = y__})
  defMessage
    = CommandEndTxnOnPartitionResponse'_constructor
        {_CommandEndTxnOnPartitionResponse'requestId = Data.ProtoLens.fieldDefault,
         _CommandEndTxnOnPartitionResponse'txnidLeastBits = Prelude.Nothing,
         _CommandEndTxnOnPartitionResponse'txnidMostBits = Prelude.Nothing,
         _CommandEndTxnOnPartitionResponse'error = Prelude.Nothing,
         _CommandEndTxnOnPartitionResponse'message = Prelude.Nothing,
         _CommandEndTxnOnPartitionResponse'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandEndTxnOnPartitionResponse
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandEndTxnOnPartitionResponse
        loop x required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_least_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidLeastBits") y x)
                                  required'requestId
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_most_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidMostBits") y x)
                                  required'requestId
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                                  required'requestId
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "message"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"message") y x)
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "CommandEndTxnOnPartitionResponse"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'txnidLeastBits") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'txnidMostBits") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'error") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                   Prelude.fromEnum
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'message") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData CommandEndTxnOnPartitionResponse where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandEndTxnOnPartitionResponse'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandEndTxnOnPartitionResponse'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandEndTxnOnPartitionResponse'txnidLeastBits x__)
                   (Control.DeepSeq.deepseq
                      (_CommandEndTxnOnPartitionResponse'txnidMostBits x__)
                      (Control.DeepSeq.deepseq
                         (_CommandEndTxnOnPartitionResponse'error x__)
                         (Control.DeepSeq.deepseq
                            (_CommandEndTxnOnPartitionResponse'message x__) ())))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandEndTxnOnSubscription Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.txnidLeastBits' @:: Lens' CommandEndTxnOnSubscription Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidLeastBits' @:: Lens' CommandEndTxnOnSubscription (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.txnidMostBits' @:: Lens' CommandEndTxnOnSubscription Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidMostBits' @:: Lens' CommandEndTxnOnSubscription (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.subscription' @:: Lens' CommandEndTxnOnSubscription Subscription@
         * 'Proto.PulsarApi_Fields.maybe'subscription' @:: Lens' CommandEndTxnOnSubscription (Prelude.Maybe Subscription)@
         * 'Proto.PulsarApi_Fields.txnAction' @:: Lens' CommandEndTxnOnSubscription TxnAction@
         * 'Proto.PulsarApi_Fields.maybe'txnAction' @:: Lens' CommandEndTxnOnSubscription (Prelude.Maybe TxnAction)@ -}
data CommandEndTxnOnSubscription
  = CommandEndTxnOnSubscription'_constructor {_CommandEndTxnOnSubscription'requestId :: !Data.Word.Word64,
                                              _CommandEndTxnOnSubscription'txnidLeastBits :: !(Prelude.Maybe Data.Word.Word64),
                                              _CommandEndTxnOnSubscription'txnidMostBits :: !(Prelude.Maybe Data.Word.Word64),
                                              _CommandEndTxnOnSubscription'subscription :: !(Prelude.Maybe Subscription),
                                              _CommandEndTxnOnSubscription'txnAction :: !(Prelude.Maybe TxnAction),
                                              _CommandEndTxnOnSubscription'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandEndTxnOnSubscription where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandEndTxnOnSubscription "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnSubscription'requestId
           (\ x__ y__ -> x__ {_CommandEndTxnOnSubscription'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnOnSubscription "txnidLeastBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnSubscription'txnidLeastBits
           (\ x__ y__
              -> x__ {_CommandEndTxnOnSubscription'txnidLeastBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandEndTxnOnSubscription "maybe'txnidLeastBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnSubscription'txnidLeastBits
           (\ x__ y__
              -> x__ {_CommandEndTxnOnSubscription'txnidLeastBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnOnSubscription "txnidMostBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnSubscription'txnidMostBits
           (\ x__ y__
              -> x__ {_CommandEndTxnOnSubscription'txnidMostBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandEndTxnOnSubscription "maybe'txnidMostBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnSubscription'txnidMostBits
           (\ x__ y__
              -> x__ {_CommandEndTxnOnSubscription'txnidMostBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnOnSubscription "subscription" Subscription where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnSubscription'subscription
           (\ x__ y__
              -> x__ {_CommandEndTxnOnSubscription'subscription = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField CommandEndTxnOnSubscription "maybe'subscription" (Prelude.Maybe Subscription) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnSubscription'subscription
           (\ x__ y__
              -> x__ {_CommandEndTxnOnSubscription'subscription = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnOnSubscription "txnAction" TxnAction where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnSubscription'txnAction
           (\ x__ y__ -> x__ {_CommandEndTxnOnSubscription'txnAction = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandEndTxnOnSubscription "maybe'txnAction" (Prelude.Maybe TxnAction) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnSubscription'txnAction
           (\ x__ y__ -> x__ {_CommandEndTxnOnSubscription'txnAction = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandEndTxnOnSubscription where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandEndTxnOnSubscription"
  packedMessageDescriptor _
    = "\n\
      \\ESCCommandEndTxnOnSubscription\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
      \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
      \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2>\n\
      \\fsubscription\CAN\EOT \SOH(\v2\SUB.pulsar.proto.SubscriptionR\fsubscription\DC26\n\
      \\n\
      \txn_action\CAN\ENQ \SOH(\SO2\ETB.pulsar.proto.TxnActionR\ttxnAction"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnSubscription
        txnidLeastBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_least_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidLeastBits")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnSubscription
        txnidMostBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_most_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidMostBits")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnSubscription
        subscription__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "subscription"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Subscription)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'subscription")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnSubscription
        txnAction__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txn_action"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor TxnAction)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnAction")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnSubscription
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, txnidLeastBits__field_descriptor),
           (Data.ProtoLens.Tag 3, txnidMostBits__field_descriptor),
           (Data.ProtoLens.Tag 4, subscription__field_descriptor),
           (Data.ProtoLens.Tag 5, txnAction__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandEndTxnOnSubscription'_unknownFields
        (\ x__ y__
           -> x__ {_CommandEndTxnOnSubscription'_unknownFields = y__})
  defMessage
    = CommandEndTxnOnSubscription'_constructor
        {_CommandEndTxnOnSubscription'requestId = Data.ProtoLens.fieldDefault,
         _CommandEndTxnOnSubscription'txnidLeastBits = Prelude.Nothing,
         _CommandEndTxnOnSubscription'txnidMostBits = Prelude.Nothing,
         _CommandEndTxnOnSubscription'subscription = Prelude.Nothing,
         _CommandEndTxnOnSubscription'txnAction = Prelude.Nothing,
         _CommandEndTxnOnSubscription'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandEndTxnOnSubscription
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandEndTxnOnSubscription
        loop x required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_least_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidLeastBits") y x)
                                  required'requestId
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_most_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidMostBits") y x)
                                  required'requestId
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "subscription"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"subscription") y x)
                                  required'requestId
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "txn_action"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"txnAction") y x)
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "CommandEndTxnOnSubscription"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'txnidLeastBits") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'txnidMostBits") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'subscription") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'txnAction") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral)
                                      Prelude.fromEnum
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData CommandEndTxnOnSubscription where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandEndTxnOnSubscription'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandEndTxnOnSubscription'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandEndTxnOnSubscription'txnidLeastBits x__)
                   (Control.DeepSeq.deepseq
                      (_CommandEndTxnOnSubscription'txnidMostBits x__)
                      (Control.DeepSeq.deepseq
                         (_CommandEndTxnOnSubscription'subscription x__)
                         (Control.DeepSeq.deepseq
                            (_CommandEndTxnOnSubscription'txnAction x__) ())))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandEndTxnOnSubscriptionResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.txnidLeastBits' @:: Lens' CommandEndTxnOnSubscriptionResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidLeastBits' @:: Lens' CommandEndTxnOnSubscriptionResponse (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.txnidMostBits' @:: Lens' CommandEndTxnOnSubscriptionResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidMostBits' @:: Lens' CommandEndTxnOnSubscriptionResponse (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.error' @:: Lens' CommandEndTxnOnSubscriptionResponse ServerError@
         * 'Proto.PulsarApi_Fields.maybe'error' @:: Lens' CommandEndTxnOnSubscriptionResponse (Prelude.Maybe ServerError)@
         * 'Proto.PulsarApi_Fields.message' @:: Lens' CommandEndTxnOnSubscriptionResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'message' @:: Lens' CommandEndTxnOnSubscriptionResponse (Prelude.Maybe Data.Text.Text)@ -}
data CommandEndTxnOnSubscriptionResponse
  = CommandEndTxnOnSubscriptionResponse'_constructor {_CommandEndTxnOnSubscriptionResponse'requestId :: !Data.Word.Word64,
                                                      _CommandEndTxnOnSubscriptionResponse'txnidLeastBits :: !(Prelude.Maybe Data.Word.Word64),
                                                      _CommandEndTxnOnSubscriptionResponse'txnidMostBits :: !(Prelude.Maybe Data.Word.Word64),
                                                      _CommandEndTxnOnSubscriptionResponse'error :: !(Prelude.Maybe ServerError),
                                                      _CommandEndTxnOnSubscriptionResponse'message :: !(Prelude.Maybe Data.Text.Text),
                                                      _CommandEndTxnOnSubscriptionResponse'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandEndTxnOnSubscriptionResponse where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandEndTxnOnSubscriptionResponse "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnSubscriptionResponse'requestId
           (\ x__ y__
              -> x__ {_CommandEndTxnOnSubscriptionResponse'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnOnSubscriptionResponse "txnidLeastBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnSubscriptionResponse'txnidLeastBits
           (\ x__ y__
              -> x__
                   {_CommandEndTxnOnSubscriptionResponse'txnidLeastBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandEndTxnOnSubscriptionResponse "maybe'txnidLeastBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnSubscriptionResponse'txnidLeastBits
           (\ x__ y__
              -> x__
                   {_CommandEndTxnOnSubscriptionResponse'txnidLeastBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnOnSubscriptionResponse "txnidMostBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnSubscriptionResponse'txnidMostBits
           (\ x__ y__
              -> x__ {_CommandEndTxnOnSubscriptionResponse'txnidMostBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandEndTxnOnSubscriptionResponse "maybe'txnidMostBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnSubscriptionResponse'txnidMostBits
           (\ x__ y__
              -> x__ {_CommandEndTxnOnSubscriptionResponse'txnidMostBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnOnSubscriptionResponse "error" ServerError where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnSubscriptionResponse'error
           (\ x__ y__
              -> x__ {_CommandEndTxnOnSubscriptionResponse'error = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandEndTxnOnSubscriptionResponse "maybe'error" (Prelude.Maybe ServerError) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnSubscriptionResponse'error
           (\ x__ y__
              -> x__ {_CommandEndTxnOnSubscriptionResponse'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnOnSubscriptionResponse "message" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnSubscriptionResponse'message
           (\ x__ y__
              -> x__ {_CommandEndTxnOnSubscriptionResponse'message = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandEndTxnOnSubscriptionResponse "maybe'message" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnOnSubscriptionResponse'message
           (\ x__ y__
              -> x__ {_CommandEndTxnOnSubscriptionResponse'message = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandEndTxnOnSubscriptionResponse where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandEndTxnOnSubscriptionResponse"
  packedMessageDescriptor _
    = "\n\
      \#CommandEndTxnOnSubscriptionResponse\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
      \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
      \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2/\n\
      \\ENQerror\CAN\EOT \SOH(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
      \\amessage\CAN\ENQ \SOH(\tR\amessage"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnSubscriptionResponse
        txnidLeastBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_least_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidLeastBits")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnSubscriptionResponse
        txnidMostBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_most_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidMostBits")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnSubscriptionResponse
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ServerError)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'error")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnSubscriptionResponse
        message__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'message")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnOnSubscriptionResponse
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, txnidLeastBits__field_descriptor),
           (Data.ProtoLens.Tag 3, txnidMostBits__field_descriptor),
           (Data.ProtoLens.Tag 4, error__field_descriptor),
           (Data.ProtoLens.Tag 5, message__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandEndTxnOnSubscriptionResponse'_unknownFields
        (\ x__ y__
           -> x__ {_CommandEndTxnOnSubscriptionResponse'_unknownFields = y__})
  defMessage
    = CommandEndTxnOnSubscriptionResponse'_constructor
        {_CommandEndTxnOnSubscriptionResponse'requestId = Data.ProtoLens.fieldDefault,
         _CommandEndTxnOnSubscriptionResponse'txnidLeastBits = Prelude.Nothing,
         _CommandEndTxnOnSubscriptionResponse'txnidMostBits = Prelude.Nothing,
         _CommandEndTxnOnSubscriptionResponse'error = Prelude.Nothing,
         _CommandEndTxnOnSubscriptionResponse'message = Prelude.Nothing,
         _CommandEndTxnOnSubscriptionResponse'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandEndTxnOnSubscriptionResponse
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandEndTxnOnSubscriptionResponse
        loop x required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_least_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidLeastBits") y x)
                                  required'requestId
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_most_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidMostBits") y x)
                                  required'requestId
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                                  required'requestId
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "message"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"message") y x)
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "CommandEndTxnOnSubscriptionResponse"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'txnidLeastBits") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'txnidMostBits") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'error") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                   Prelude.fromEnum
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'message") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData CommandEndTxnOnSubscriptionResponse where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandEndTxnOnSubscriptionResponse'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandEndTxnOnSubscriptionResponse'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandEndTxnOnSubscriptionResponse'txnidLeastBits x__)
                   (Control.DeepSeq.deepseq
                      (_CommandEndTxnOnSubscriptionResponse'txnidMostBits x__)
                      (Control.DeepSeq.deepseq
                         (_CommandEndTxnOnSubscriptionResponse'error x__)
                         (Control.DeepSeq.deepseq
                            (_CommandEndTxnOnSubscriptionResponse'message x__) ())))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandEndTxnResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.txnidLeastBits' @:: Lens' CommandEndTxnResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidLeastBits' @:: Lens' CommandEndTxnResponse (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.txnidMostBits' @:: Lens' CommandEndTxnResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidMostBits' @:: Lens' CommandEndTxnResponse (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.error' @:: Lens' CommandEndTxnResponse ServerError@
         * 'Proto.PulsarApi_Fields.maybe'error' @:: Lens' CommandEndTxnResponse (Prelude.Maybe ServerError)@
         * 'Proto.PulsarApi_Fields.message' @:: Lens' CommandEndTxnResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'message' @:: Lens' CommandEndTxnResponse (Prelude.Maybe Data.Text.Text)@ -}
data CommandEndTxnResponse
  = CommandEndTxnResponse'_constructor {_CommandEndTxnResponse'requestId :: !Data.Word.Word64,
                                        _CommandEndTxnResponse'txnidLeastBits :: !(Prelude.Maybe Data.Word.Word64),
                                        _CommandEndTxnResponse'txnidMostBits :: !(Prelude.Maybe Data.Word.Word64),
                                        _CommandEndTxnResponse'error :: !(Prelude.Maybe ServerError),
                                        _CommandEndTxnResponse'message :: !(Prelude.Maybe Data.Text.Text),
                                        _CommandEndTxnResponse'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandEndTxnResponse where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandEndTxnResponse "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnResponse'requestId
           (\ x__ y__ -> x__ {_CommandEndTxnResponse'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnResponse "txnidLeastBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnResponse'txnidLeastBits
           (\ x__ y__ -> x__ {_CommandEndTxnResponse'txnidLeastBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandEndTxnResponse "maybe'txnidLeastBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnResponse'txnidLeastBits
           (\ x__ y__ -> x__ {_CommandEndTxnResponse'txnidLeastBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnResponse "txnidMostBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnResponse'txnidMostBits
           (\ x__ y__ -> x__ {_CommandEndTxnResponse'txnidMostBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandEndTxnResponse "maybe'txnidMostBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnResponse'txnidMostBits
           (\ x__ y__ -> x__ {_CommandEndTxnResponse'txnidMostBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnResponse "error" ServerError where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnResponse'error
           (\ x__ y__ -> x__ {_CommandEndTxnResponse'error = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandEndTxnResponse "maybe'error" (Prelude.Maybe ServerError) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnResponse'error
           (\ x__ y__ -> x__ {_CommandEndTxnResponse'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandEndTxnResponse "message" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnResponse'message
           (\ x__ y__ -> x__ {_CommandEndTxnResponse'message = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandEndTxnResponse "maybe'message" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandEndTxnResponse'message
           (\ x__ y__ -> x__ {_CommandEndTxnResponse'message = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandEndTxnResponse where
  messageName _ = Data.Text.pack "pulsar.proto.CommandEndTxnResponse"
  packedMessageDescriptor _
    = "\n\
      \\NAKCommandEndTxnResponse\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
      \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
      \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2/\n\
      \\ENQerror\CAN\EOT \SOH(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
      \\amessage\CAN\ENQ \SOH(\tR\amessage"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnResponse
        txnidLeastBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_least_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidLeastBits")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnResponse
        txnidMostBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_most_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidMostBits")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnResponse
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ServerError)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'error")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnResponse
        message__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'message")) ::
              Data.ProtoLens.FieldDescriptor CommandEndTxnResponse
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, txnidLeastBits__field_descriptor),
           (Data.ProtoLens.Tag 3, txnidMostBits__field_descriptor),
           (Data.ProtoLens.Tag 4, error__field_descriptor),
           (Data.ProtoLens.Tag 5, message__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandEndTxnResponse'_unknownFields
        (\ x__ y__ -> x__ {_CommandEndTxnResponse'_unknownFields = y__})
  defMessage
    = CommandEndTxnResponse'_constructor
        {_CommandEndTxnResponse'requestId = Data.ProtoLens.fieldDefault,
         _CommandEndTxnResponse'txnidLeastBits = Prelude.Nothing,
         _CommandEndTxnResponse'txnidMostBits = Prelude.Nothing,
         _CommandEndTxnResponse'error = Prelude.Nothing,
         _CommandEndTxnResponse'message = Prelude.Nothing,
         _CommandEndTxnResponse'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandEndTxnResponse
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandEndTxnResponse
        loop x required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_least_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidLeastBits") y x)
                                  required'requestId
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_most_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidMostBits") y x)
                                  required'requestId
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                                  required'requestId
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "message"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"message") y x)
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "CommandEndTxnResponse"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'txnidLeastBits") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'txnidMostBits") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'error") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                   Prelude.fromEnum
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'message") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData CommandEndTxnResponse where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandEndTxnResponse'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandEndTxnResponse'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandEndTxnResponse'txnidLeastBits x__)
                   (Control.DeepSeq.deepseq
                      (_CommandEndTxnResponse'txnidMostBits x__)
                      (Control.DeepSeq.deepseq
                         (_CommandEndTxnResponse'error x__)
                         (Control.DeepSeq.deepseq
                            (_CommandEndTxnResponse'message x__) ())))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandError Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.error' @:: Lens' CommandError ServerError@
         * 'Proto.PulsarApi_Fields.message' @:: Lens' CommandError Data.Text.Text@ -}
data CommandError
  = CommandError'_constructor {_CommandError'requestId :: !Data.Word.Word64,
                               _CommandError'error :: !ServerError,
                               _CommandError'message :: !Data.Text.Text,
                               _CommandError'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandError where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandError "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandError'requestId
           (\ x__ y__ -> x__ {_CommandError'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandError "error" ServerError where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandError'error (\ x__ y__ -> x__ {_CommandError'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandError "message" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandError'message
           (\ x__ y__ -> x__ {_CommandError'message = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandError where
  messageName _ = Data.Text.pack "pulsar.proto.CommandError"
  packedMessageDescriptor _
    = "\n\
      \\fCommandError\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2/\n\
      \\ENQerror\CAN\STX \STX(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
      \\amessage\CAN\ETX \STX(\tR\amessage"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandError
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ServerError)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"error")) ::
              Data.ProtoLens.FieldDescriptor CommandError
        message__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"message")) ::
              Data.ProtoLens.FieldDescriptor CommandError
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, error__field_descriptor),
           (Data.ProtoLens.Tag 3, message__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandError'_unknownFields
        (\ x__ y__ -> x__ {_CommandError'_unknownFields = y__})
  defMessage
    = CommandError'_constructor
        {_CommandError'requestId = Data.ProtoLens.fieldDefault,
         _CommandError'error = Data.ProtoLens.fieldDefault,
         _CommandError'message = Data.ProtoLens.fieldDefault,
         _CommandError'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandError
          -> Prelude.Bool
             -> Prelude.Bool
                -> Prelude.Bool
                   -> Data.ProtoLens.Encoding.Bytes.Parser CommandError
        loop x required'error required'message required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'error then (:) "error" else Prelude.id)
                               ((if required'message then (:) "message" else Prelude.id)
                                  ((if required'requestId then (:) "request_id" else Prelude.id)
                                     []))
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  required'error
                                  required'message
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                                  Prelude.False
                                  required'message
                                  required'requestId
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "message"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"message") y x)
                                  required'error
                                  Prelude.False
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'error
                                  required'message
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop
                Data.ProtoLens.defMessage Prelude.True Prelude.True Prelude.True)
          "CommandError"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   ((Prelude..)
                      ((Prelude..)
                         Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                      Prelude.fromEnum
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"error") _x)))
                ((Data.Monoid.<>)
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                      ((Prelude..)
                         (\ bs
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                    (Prelude.fromIntegral (Data.ByteString.length bs)))
                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Data.Text.Encoding.encodeUtf8
                         (Lens.Family2.view (Data.ProtoLens.Field.field @"message") _x)))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData CommandError where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandError'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandError'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandError'error x__)
                   (Control.DeepSeq.deepseq (_CommandError'message x__) ())))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.consumerId' @:: Lens' CommandFlow Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.messagePermits' @:: Lens' CommandFlow Data.Word.Word32@ -}
data CommandFlow
  = CommandFlow'_constructor {_CommandFlow'consumerId :: !Data.Word.Word64,
                              _CommandFlow'messagePermits :: !Data.Word.Word32,
                              _CommandFlow'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandFlow where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandFlow "consumerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandFlow'consumerId
           (\ x__ y__ -> x__ {_CommandFlow'consumerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandFlow "messagePermits" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandFlow'messagePermits
           (\ x__ y__ -> x__ {_CommandFlow'messagePermits = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandFlow where
  messageName _ = Data.Text.pack "pulsar.proto.CommandFlow"
  packedMessageDescriptor _
    = "\n\
      \\vCommandFlow\DC2\US\n\
      \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
      \consumerId\DC2&\n\
      \\SOmessagePermits\CAN\STX \STX(\rR\SOmessagePermits"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        consumerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "consumer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"consumerId")) ::
              Data.ProtoLens.FieldDescriptor CommandFlow
        messagePermits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "messagePermits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"messagePermits")) ::
              Data.ProtoLens.FieldDescriptor CommandFlow
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, consumerId__field_descriptor),
           (Data.ProtoLens.Tag 2, messagePermits__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandFlow'_unknownFields
        (\ x__ y__ -> x__ {_CommandFlow'_unknownFields = y__})
  defMessage
    = CommandFlow'_constructor
        {_CommandFlow'consumerId = Data.ProtoLens.fieldDefault,
         _CommandFlow'messagePermits = Data.ProtoLens.fieldDefault,
         _CommandFlow'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandFlow
          -> Prelude.Bool
             -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser CommandFlow
        loop x required'consumerId required'messagePermits
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'consumerId then (:) "consumer_id" else Prelude.id)
                               ((if required'messagePermits then
                                     (:) "messagePermits"
                                 else
                                     Prelude.id)
                                  [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "consumer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"consumerId") y x)
                                  Prelude.False
                                  required'messagePermits
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "messagePermits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"messagePermits") y x)
                                  required'consumerId
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'consumerId
                                  required'messagePermits
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "CommandFlow"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"consumerId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   ((Prelude..)
                      Data.ProtoLens.Encoding.Bytes.putVarInt
                      Prelude.fromIntegral
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"messagePermits") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData CommandFlow where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandFlow'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandFlow'consumerId x__)
                (Control.DeepSeq.deepseq (_CommandFlow'messagePermits x__) ()))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.consumerId' @:: Lens' CommandGetLastMessageId Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandGetLastMessageId Data.Word.Word64@ -}
data CommandGetLastMessageId
  = CommandGetLastMessageId'_constructor {_CommandGetLastMessageId'consumerId :: !Data.Word.Word64,
                                          _CommandGetLastMessageId'requestId :: !Data.Word.Word64,
                                          _CommandGetLastMessageId'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandGetLastMessageId where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandGetLastMessageId "consumerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetLastMessageId'consumerId
           (\ x__ y__ -> x__ {_CommandGetLastMessageId'consumerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandGetLastMessageId "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetLastMessageId'requestId
           (\ x__ y__ -> x__ {_CommandGetLastMessageId'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandGetLastMessageId where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandGetLastMessageId"
  packedMessageDescriptor _
    = "\n\
      \\ETBCommandGetLastMessageId\DC2\US\n\
      \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
      \consumerId\DC2\GS\n\
      \\n\
      \request_id\CAN\STX \STX(\EOTR\trequestId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        consumerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "consumer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"consumerId")) ::
              Data.ProtoLens.FieldDescriptor CommandGetLastMessageId
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandGetLastMessageId
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, consumerId__field_descriptor),
           (Data.ProtoLens.Tag 2, requestId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandGetLastMessageId'_unknownFields
        (\ x__ y__ -> x__ {_CommandGetLastMessageId'_unknownFields = y__})
  defMessage
    = CommandGetLastMessageId'_constructor
        {_CommandGetLastMessageId'consumerId = Data.ProtoLens.fieldDefault,
         _CommandGetLastMessageId'requestId = Data.ProtoLens.fieldDefault,
         _CommandGetLastMessageId'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandGetLastMessageId
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser CommandGetLastMessageId
        loop x required'consumerId required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'consumerId then (:) "consumer_id" else Prelude.id)
                               ((if required'requestId then (:) "request_id" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "consumer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"consumerId") y x)
                                  Prelude.False
                                  required'requestId
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  required'consumerId
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'consumerId
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "CommandGetLastMessageId"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"consumerId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData CommandGetLastMessageId where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandGetLastMessageId'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandGetLastMessageId'consumerId x__)
                (Control.DeepSeq.deepseq
                   (_CommandGetLastMessageId'requestId x__) ()))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.lastMessageId' @:: Lens' CommandGetLastMessageIdResponse MessageIdData@
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandGetLastMessageIdResponse Data.Word.Word64@ -}
data CommandGetLastMessageIdResponse
  = CommandGetLastMessageIdResponse'_constructor {_CommandGetLastMessageIdResponse'lastMessageId :: !MessageIdData,
                                                  _CommandGetLastMessageIdResponse'requestId :: !Data.Word.Word64,
                                                  _CommandGetLastMessageIdResponse'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandGetLastMessageIdResponse where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandGetLastMessageIdResponse "lastMessageId" MessageIdData where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetLastMessageIdResponse'lastMessageId
           (\ x__ y__
              -> x__ {_CommandGetLastMessageIdResponse'lastMessageId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandGetLastMessageIdResponse "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetLastMessageIdResponse'requestId
           (\ x__ y__
              -> x__ {_CommandGetLastMessageIdResponse'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandGetLastMessageIdResponse where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandGetLastMessageIdResponse"
  packedMessageDescriptor _
    = "\n\
      \\USCommandGetLastMessageIdResponse\DC2C\n\
      \\SIlast_message_id\CAN\SOH \STX(\v2\ESC.pulsar.proto.MessageIdDataR\rlastMessageId\DC2\GS\n\
      \\n\
      \request_id\CAN\STX \STX(\EOTR\trequestId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        lastMessageId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "last_message_id"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor MessageIdData)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"lastMessageId")) ::
              Data.ProtoLens.FieldDescriptor CommandGetLastMessageIdResponse
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandGetLastMessageIdResponse
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, lastMessageId__field_descriptor),
           (Data.ProtoLens.Tag 2, requestId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandGetLastMessageIdResponse'_unknownFields
        (\ x__ y__
           -> x__ {_CommandGetLastMessageIdResponse'_unknownFields = y__})
  defMessage
    = CommandGetLastMessageIdResponse'_constructor
        {_CommandGetLastMessageIdResponse'lastMessageId = Data.ProtoLens.defMessage,
         _CommandGetLastMessageIdResponse'requestId = Data.ProtoLens.fieldDefault,
         _CommandGetLastMessageIdResponse'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandGetLastMessageIdResponse
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser CommandGetLastMessageIdResponse
        loop x required'lastMessageId required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'lastMessageId then
                                  (:) "last_message_id"
                              else
                                  Prelude.id)
                               ((if required'requestId then (:) "request_id" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "last_message_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"lastMessageId") y x)
                                  Prelude.False
                                  required'requestId
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  required'lastMessageId
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'lastMessageId
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "CommandGetLastMessageIdResponse"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.ProtoLens.encodeMessage
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"lastMessageId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData CommandGetLastMessageIdResponse where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandGetLastMessageIdResponse'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandGetLastMessageIdResponse'lastMessageId x__)
                (Control.DeepSeq.deepseq
                   (_CommandGetLastMessageIdResponse'requestId x__) ()))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandGetOrCreateSchema Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.topic' @:: Lens' CommandGetOrCreateSchema Data.Text.Text@
         * 'Proto.PulsarApi_Fields.schema' @:: Lens' CommandGetOrCreateSchema Schema@ -}
data CommandGetOrCreateSchema
  = CommandGetOrCreateSchema'_constructor {_CommandGetOrCreateSchema'requestId :: !Data.Word.Word64,
                                           _CommandGetOrCreateSchema'topic :: !Data.Text.Text,
                                           _CommandGetOrCreateSchema'schema :: !Schema,
                                           _CommandGetOrCreateSchema'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandGetOrCreateSchema where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandGetOrCreateSchema "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetOrCreateSchema'requestId
           (\ x__ y__ -> x__ {_CommandGetOrCreateSchema'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandGetOrCreateSchema "topic" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetOrCreateSchema'topic
           (\ x__ y__ -> x__ {_CommandGetOrCreateSchema'topic = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandGetOrCreateSchema "schema" Schema where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetOrCreateSchema'schema
           (\ x__ y__ -> x__ {_CommandGetOrCreateSchema'schema = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandGetOrCreateSchema where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandGetOrCreateSchema"
  packedMessageDescriptor _
    = "\n\
      \\CANCommandGetOrCreateSchema\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2\DC4\n\
      \\ENQtopic\CAN\STX \STX(\tR\ENQtopic\DC2,\n\
      \\ACKschema\CAN\ETX \STX(\v2\DC4.pulsar.proto.SchemaR\ACKschema"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandGetOrCreateSchema
        topic__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "topic"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"topic")) ::
              Data.ProtoLens.FieldDescriptor CommandGetOrCreateSchema
        schema__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "schema"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Schema)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"schema")) ::
              Data.ProtoLens.FieldDescriptor CommandGetOrCreateSchema
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, topic__field_descriptor),
           (Data.ProtoLens.Tag 3, schema__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandGetOrCreateSchema'_unknownFields
        (\ x__ y__ -> x__ {_CommandGetOrCreateSchema'_unknownFields = y__})
  defMessage
    = CommandGetOrCreateSchema'_constructor
        {_CommandGetOrCreateSchema'requestId = Data.ProtoLens.fieldDefault,
         _CommandGetOrCreateSchema'topic = Data.ProtoLens.fieldDefault,
         _CommandGetOrCreateSchema'schema = Data.ProtoLens.defMessage,
         _CommandGetOrCreateSchema'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandGetOrCreateSchema
          -> Prelude.Bool
             -> Prelude.Bool
                -> Prelude.Bool
                   -> Data.ProtoLens.Encoding.Bytes.Parser CommandGetOrCreateSchema
        loop x required'requestId required'schema required'topic
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id)
                               ((if required'schema then (:) "schema" else Prelude.id)
                                  ((if required'topic then (:) "topic" else Prelude.id) []))
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                                  required'schema
                                  required'topic
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "topic"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"topic") y x)
                                  required'requestId
                                  required'schema
                                  Prelude.False
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "schema"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"schema") y x)
                                  required'requestId
                                  Prelude.False
                                  required'topic
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
                                  required'schema
                                  required'topic
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop
                Data.ProtoLens.defMessage Prelude.True Prelude.True Prelude.True)
          "CommandGetOrCreateSchema"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((Prelude..)
                      (\ bs
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      Data.Text.Encoding.encodeUtf8
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"topic") _x)))
                ((Data.Monoid.<>)
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                      ((Prelude..)
                         (\ bs
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                    (Prelude.fromIntegral (Data.ByteString.length bs)))
                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Data.ProtoLens.encodeMessage
                         (Lens.Family2.view (Data.ProtoLens.Field.field @"schema") _x)))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData CommandGetOrCreateSchema where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandGetOrCreateSchema'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandGetOrCreateSchema'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandGetOrCreateSchema'topic x__)
                   (Control.DeepSeq.deepseq
                      (_CommandGetOrCreateSchema'schema x__) ())))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandGetOrCreateSchemaResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.errorCode' @:: Lens' CommandGetOrCreateSchemaResponse ServerError@
         * 'Proto.PulsarApi_Fields.maybe'errorCode' @:: Lens' CommandGetOrCreateSchemaResponse (Prelude.Maybe ServerError)@
         * 'Proto.PulsarApi_Fields.errorMessage' @:: Lens' CommandGetOrCreateSchemaResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'errorMessage' @:: Lens' CommandGetOrCreateSchemaResponse (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.schemaVersion' @:: Lens' CommandGetOrCreateSchemaResponse Data.ByteString.ByteString@
         * 'Proto.PulsarApi_Fields.maybe'schemaVersion' @:: Lens' CommandGetOrCreateSchemaResponse (Prelude.Maybe Data.ByteString.ByteString)@ -}
data CommandGetOrCreateSchemaResponse
  = CommandGetOrCreateSchemaResponse'_constructor {_CommandGetOrCreateSchemaResponse'requestId :: !Data.Word.Word64,
                                                   _CommandGetOrCreateSchemaResponse'errorCode :: !(Prelude.Maybe ServerError),
                                                   _CommandGetOrCreateSchemaResponse'errorMessage :: !(Prelude.Maybe Data.Text.Text),
                                                   _CommandGetOrCreateSchemaResponse'schemaVersion :: !(Prelude.Maybe Data.ByteString.ByteString),
                                                   _CommandGetOrCreateSchemaResponse'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandGetOrCreateSchemaResponse where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandGetOrCreateSchemaResponse "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetOrCreateSchemaResponse'requestId
           (\ x__ y__
              -> x__ {_CommandGetOrCreateSchemaResponse'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandGetOrCreateSchemaResponse "errorCode" ServerError where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetOrCreateSchemaResponse'errorCode
           (\ x__ y__
              -> x__ {_CommandGetOrCreateSchemaResponse'errorCode = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandGetOrCreateSchemaResponse "maybe'errorCode" (Prelude.Maybe ServerError) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetOrCreateSchemaResponse'errorCode
           (\ x__ y__
              -> x__ {_CommandGetOrCreateSchemaResponse'errorCode = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandGetOrCreateSchemaResponse "errorMessage" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetOrCreateSchemaResponse'errorMessage
           (\ x__ y__
              -> x__ {_CommandGetOrCreateSchemaResponse'errorMessage = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandGetOrCreateSchemaResponse "maybe'errorMessage" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetOrCreateSchemaResponse'errorMessage
           (\ x__ y__
              -> x__ {_CommandGetOrCreateSchemaResponse'errorMessage = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandGetOrCreateSchemaResponse "schemaVersion" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetOrCreateSchemaResponse'schemaVersion
           (\ x__ y__
              -> x__ {_CommandGetOrCreateSchemaResponse'schemaVersion = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandGetOrCreateSchemaResponse "maybe'schemaVersion" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetOrCreateSchemaResponse'schemaVersion
           (\ x__ y__
              -> x__ {_CommandGetOrCreateSchemaResponse'schemaVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandGetOrCreateSchemaResponse where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandGetOrCreateSchemaResponse"
  packedMessageDescriptor _
    = "\n\
      \ CommandGetOrCreateSchemaResponse\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC28\n\
      \\n\
      \error_code\CAN\STX \SOH(\SO2\EM.pulsar.proto.ServerErrorR\terrorCode\DC2#\n\
      \\rerror_message\CAN\ETX \SOH(\tR\ferrorMessage\DC2%\n\
      \\SOschema_version\CAN\EOT \SOH(\fR\rschemaVersion"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandGetOrCreateSchemaResponse
        errorCode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error_code"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ServerError)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'errorCode")) ::
              Data.ProtoLens.FieldDescriptor CommandGetOrCreateSchemaResponse
        errorMessage__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error_message"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'errorMessage")) ::
              Data.ProtoLens.FieldDescriptor CommandGetOrCreateSchemaResponse
        schemaVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "schema_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'schemaVersion")) ::
              Data.ProtoLens.FieldDescriptor CommandGetOrCreateSchemaResponse
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, errorCode__field_descriptor),
           (Data.ProtoLens.Tag 3, errorMessage__field_descriptor),
           (Data.ProtoLens.Tag 4, schemaVersion__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandGetOrCreateSchemaResponse'_unknownFields
        (\ x__ y__
           -> x__ {_CommandGetOrCreateSchemaResponse'_unknownFields = y__})
  defMessage
    = CommandGetOrCreateSchemaResponse'_constructor
        {_CommandGetOrCreateSchemaResponse'requestId = Data.ProtoLens.fieldDefault,
         _CommandGetOrCreateSchemaResponse'errorCode = Prelude.Nothing,
         _CommandGetOrCreateSchemaResponse'errorMessage = Prelude.Nothing,
         _CommandGetOrCreateSchemaResponse'schemaVersion = Prelude.Nothing,
         _CommandGetOrCreateSchemaResponse'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandGetOrCreateSchemaResponse
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandGetOrCreateSchemaResponse
        loop x required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error_code"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"errorCode") y x)
                                  required'requestId
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "error_message"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"errorMessage") y x)
                                  required'requestId
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "schema_version"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"schemaVersion") y x)
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "CommandGetOrCreateSchemaResponse"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'errorCode") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                             Prelude.fromEnum
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'errorMessage") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8
                                _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'schemaVersion") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData CommandGetOrCreateSchemaResponse where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandGetOrCreateSchemaResponse'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandGetOrCreateSchemaResponse'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandGetOrCreateSchemaResponse'errorCode x__)
                   (Control.DeepSeq.deepseq
                      (_CommandGetOrCreateSchemaResponse'errorMessage x__)
                      (Control.DeepSeq.deepseq
                         (_CommandGetOrCreateSchemaResponse'schemaVersion x__) ()))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandGetSchema Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.topic' @:: Lens' CommandGetSchema Data.Text.Text@
         * 'Proto.PulsarApi_Fields.schemaVersion' @:: Lens' CommandGetSchema Data.ByteString.ByteString@
         * 'Proto.PulsarApi_Fields.maybe'schemaVersion' @:: Lens' CommandGetSchema (Prelude.Maybe Data.ByteString.ByteString)@ -}
data CommandGetSchema
  = CommandGetSchema'_constructor {_CommandGetSchema'requestId :: !Data.Word.Word64,
                                   _CommandGetSchema'topic :: !Data.Text.Text,
                                   _CommandGetSchema'schemaVersion :: !(Prelude.Maybe Data.ByteString.ByteString),
                                   _CommandGetSchema'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandGetSchema where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandGetSchema "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetSchema'requestId
           (\ x__ y__ -> x__ {_CommandGetSchema'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandGetSchema "topic" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetSchema'topic
           (\ x__ y__ -> x__ {_CommandGetSchema'topic = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandGetSchema "schemaVersion" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetSchema'schemaVersion
           (\ x__ y__ -> x__ {_CommandGetSchema'schemaVersion = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandGetSchema "maybe'schemaVersion" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetSchema'schemaVersion
           (\ x__ y__ -> x__ {_CommandGetSchema'schemaVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandGetSchema where
  messageName _ = Data.Text.pack "pulsar.proto.CommandGetSchema"
  packedMessageDescriptor _
    = "\n\
      \\DLECommandGetSchema\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2\DC4\n\
      \\ENQtopic\CAN\STX \STX(\tR\ENQtopic\DC2%\n\
      \\SOschema_version\CAN\ETX \SOH(\fR\rschemaVersion"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandGetSchema
        topic__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "topic"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"topic")) ::
              Data.ProtoLens.FieldDescriptor CommandGetSchema
        schemaVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "schema_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'schemaVersion")) ::
              Data.ProtoLens.FieldDescriptor CommandGetSchema
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, topic__field_descriptor),
           (Data.ProtoLens.Tag 3, schemaVersion__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandGetSchema'_unknownFields
        (\ x__ y__ -> x__ {_CommandGetSchema'_unknownFields = y__})
  defMessage
    = CommandGetSchema'_constructor
        {_CommandGetSchema'requestId = Data.ProtoLens.fieldDefault,
         _CommandGetSchema'topic = Data.ProtoLens.fieldDefault,
         _CommandGetSchema'schemaVersion = Prelude.Nothing,
         _CommandGetSchema'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandGetSchema
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser CommandGetSchema
        loop x required'requestId required'topic
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id)
                               ((if required'topic then (:) "topic" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                                  required'topic
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "topic"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"topic") y x)
                                  required'requestId
                                  Prelude.False
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "schema_version"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"schemaVersion") y x)
                                  required'requestId
                                  required'topic
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
                                  required'topic
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "CommandGetSchema"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((Prelude..)
                      (\ bs
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      Data.Text.Encoding.encodeUtf8
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"topic") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'schemaVersion") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData CommandGetSchema where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandGetSchema'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandGetSchema'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandGetSchema'topic x__)
                   (Control.DeepSeq.deepseq
                      (_CommandGetSchema'schemaVersion x__) ())))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandGetSchemaResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.errorCode' @:: Lens' CommandGetSchemaResponse ServerError@
         * 'Proto.PulsarApi_Fields.maybe'errorCode' @:: Lens' CommandGetSchemaResponse (Prelude.Maybe ServerError)@
         * 'Proto.PulsarApi_Fields.errorMessage' @:: Lens' CommandGetSchemaResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'errorMessage' @:: Lens' CommandGetSchemaResponse (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.schema' @:: Lens' CommandGetSchemaResponse Schema@
         * 'Proto.PulsarApi_Fields.maybe'schema' @:: Lens' CommandGetSchemaResponse (Prelude.Maybe Schema)@
         * 'Proto.PulsarApi_Fields.schemaVersion' @:: Lens' CommandGetSchemaResponse Data.ByteString.ByteString@
         * 'Proto.PulsarApi_Fields.maybe'schemaVersion' @:: Lens' CommandGetSchemaResponse (Prelude.Maybe Data.ByteString.ByteString)@ -}
data CommandGetSchemaResponse
  = CommandGetSchemaResponse'_constructor {_CommandGetSchemaResponse'requestId :: !Data.Word.Word64,
                                           _CommandGetSchemaResponse'errorCode :: !(Prelude.Maybe ServerError),
                                           _CommandGetSchemaResponse'errorMessage :: !(Prelude.Maybe Data.Text.Text),
                                           _CommandGetSchemaResponse'schema :: !(Prelude.Maybe Schema),
                                           _CommandGetSchemaResponse'schemaVersion :: !(Prelude.Maybe Data.ByteString.ByteString),
                                           _CommandGetSchemaResponse'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandGetSchemaResponse where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandGetSchemaResponse "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetSchemaResponse'requestId
           (\ x__ y__ -> x__ {_CommandGetSchemaResponse'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandGetSchemaResponse "errorCode" ServerError where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetSchemaResponse'errorCode
           (\ x__ y__ -> x__ {_CommandGetSchemaResponse'errorCode = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandGetSchemaResponse "maybe'errorCode" (Prelude.Maybe ServerError) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetSchemaResponse'errorCode
           (\ x__ y__ -> x__ {_CommandGetSchemaResponse'errorCode = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandGetSchemaResponse "errorMessage" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetSchemaResponse'errorMessage
           (\ x__ y__ -> x__ {_CommandGetSchemaResponse'errorMessage = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandGetSchemaResponse "maybe'errorMessage" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetSchemaResponse'errorMessage
           (\ x__ y__ -> x__ {_CommandGetSchemaResponse'errorMessage = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandGetSchemaResponse "schema" Schema where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetSchemaResponse'schema
           (\ x__ y__ -> x__ {_CommandGetSchemaResponse'schema = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField CommandGetSchemaResponse "maybe'schema" (Prelude.Maybe Schema) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetSchemaResponse'schema
           (\ x__ y__ -> x__ {_CommandGetSchemaResponse'schema = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandGetSchemaResponse "schemaVersion" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetSchemaResponse'schemaVersion
           (\ x__ y__ -> x__ {_CommandGetSchemaResponse'schemaVersion = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandGetSchemaResponse "maybe'schemaVersion" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetSchemaResponse'schemaVersion
           (\ x__ y__ -> x__ {_CommandGetSchemaResponse'schemaVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandGetSchemaResponse where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandGetSchemaResponse"
  packedMessageDescriptor _
    = "\n\
      \\CANCommandGetSchemaResponse\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC28\n\
      \\n\
      \error_code\CAN\STX \SOH(\SO2\EM.pulsar.proto.ServerErrorR\terrorCode\DC2#\n\
      \\rerror_message\CAN\ETX \SOH(\tR\ferrorMessage\DC2,\n\
      \\ACKschema\CAN\EOT \SOH(\v2\DC4.pulsar.proto.SchemaR\ACKschema\DC2%\n\
      \\SOschema_version\CAN\ENQ \SOH(\fR\rschemaVersion"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandGetSchemaResponse
        errorCode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error_code"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ServerError)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'errorCode")) ::
              Data.ProtoLens.FieldDescriptor CommandGetSchemaResponse
        errorMessage__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error_message"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'errorMessage")) ::
              Data.ProtoLens.FieldDescriptor CommandGetSchemaResponse
        schema__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "schema"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Schema)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'schema")) ::
              Data.ProtoLens.FieldDescriptor CommandGetSchemaResponse
        schemaVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "schema_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'schemaVersion")) ::
              Data.ProtoLens.FieldDescriptor CommandGetSchemaResponse
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, errorCode__field_descriptor),
           (Data.ProtoLens.Tag 3, errorMessage__field_descriptor),
           (Data.ProtoLens.Tag 4, schema__field_descriptor),
           (Data.ProtoLens.Tag 5, schemaVersion__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandGetSchemaResponse'_unknownFields
        (\ x__ y__ -> x__ {_CommandGetSchemaResponse'_unknownFields = y__})
  defMessage
    = CommandGetSchemaResponse'_constructor
        {_CommandGetSchemaResponse'requestId = Data.ProtoLens.fieldDefault,
         _CommandGetSchemaResponse'errorCode = Prelude.Nothing,
         _CommandGetSchemaResponse'errorMessage = Prelude.Nothing,
         _CommandGetSchemaResponse'schema = Prelude.Nothing,
         _CommandGetSchemaResponse'schemaVersion = Prelude.Nothing,
         _CommandGetSchemaResponse'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandGetSchemaResponse
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandGetSchemaResponse
        loop x required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error_code"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"errorCode") y x)
                                  required'requestId
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "error_message"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"errorMessage") y x)
                                  required'requestId
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "schema"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"schema") y x)
                                  required'requestId
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "schema_version"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"schemaVersion") y x)
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "CommandGetSchemaResponse"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'errorCode") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                             Prelude.fromEnum
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'errorMessage") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8
                                _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'schema") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'schemaVersion") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((\ bs
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData CommandGetSchemaResponse where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandGetSchemaResponse'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandGetSchemaResponse'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandGetSchemaResponse'errorCode x__)
                   (Control.DeepSeq.deepseq
                      (_CommandGetSchemaResponse'errorMessage x__)
                      (Control.DeepSeq.deepseq
                         (_CommandGetSchemaResponse'schema x__)
                         (Control.DeepSeq.deepseq
                            (_CommandGetSchemaResponse'schemaVersion x__) ())))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandGetTopicsOfNamespace Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.namespace' @:: Lens' CommandGetTopicsOfNamespace Data.Text.Text@
         * 'Proto.PulsarApi_Fields.mode' @:: Lens' CommandGetTopicsOfNamespace CommandGetTopicsOfNamespace'Mode@
         * 'Proto.PulsarApi_Fields.maybe'mode' @:: Lens' CommandGetTopicsOfNamespace (Prelude.Maybe CommandGetTopicsOfNamespace'Mode)@ -}
data CommandGetTopicsOfNamespace
  = CommandGetTopicsOfNamespace'_constructor {_CommandGetTopicsOfNamespace'requestId :: !Data.Word.Word64,
                                              _CommandGetTopicsOfNamespace'namespace :: !Data.Text.Text,
                                              _CommandGetTopicsOfNamespace'mode :: !(Prelude.Maybe CommandGetTopicsOfNamespace'Mode),
                                              _CommandGetTopicsOfNamespace'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandGetTopicsOfNamespace where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandGetTopicsOfNamespace "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetTopicsOfNamespace'requestId
           (\ x__ y__ -> x__ {_CommandGetTopicsOfNamespace'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandGetTopicsOfNamespace "namespace" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetTopicsOfNamespace'namespace
           (\ x__ y__ -> x__ {_CommandGetTopicsOfNamespace'namespace = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandGetTopicsOfNamespace "mode" CommandGetTopicsOfNamespace'Mode where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetTopicsOfNamespace'mode
           (\ x__ y__ -> x__ {_CommandGetTopicsOfNamespace'mode = y__}))
        (Data.ProtoLens.maybeLens CommandGetTopicsOfNamespace'PERSISTENT)
instance Data.ProtoLens.Field.HasField CommandGetTopicsOfNamespace "maybe'mode" (Prelude.Maybe CommandGetTopicsOfNamespace'Mode) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetTopicsOfNamespace'mode
           (\ x__ y__ -> x__ {_CommandGetTopicsOfNamespace'mode = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandGetTopicsOfNamespace where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandGetTopicsOfNamespace"
  packedMessageDescriptor _
    = "\n\
      \\ESCCommandGetTopicsOfNamespace\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2\FS\n\
      \\tnamespace\CAN\STX \STX(\tR\tnamespace\DC2N\n\
      \\EOTmode\CAN\ETX \SOH(\SO2..pulsar.proto.CommandGetTopicsOfNamespace.Mode:\n\
      \PERSISTENTR\EOTmode\"3\n\
      \\EOTMode\DC2\SO\n\
      \\n\
      \PERSISTENT\DLE\NUL\DC2\DC2\n\
      \\SONON_PERSISTENT\DLE\SOH\DC2\a\n\
      \\ETXALL\DLE\STX"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandGetTopicsOfNamespace
        namespace__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "namespace"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"namespace")) ::
              Data.ProtoLens.FieldDescriptor CommandGetTopicsOfNamespace
        mode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "mode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor CommandGetTopicsOfNamespace'Mode)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mode")) ::
              Data.ProtoLens.FieldDescriptor CommandGetTopicsOfNamespace
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, namespace__field_descriptor),
           (Data.ProtoLens.Tag 3, mode__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandGetTopicsOfNamespace'_unknownFields
        (\ x__ y__
           -> x__ {_CommandGetTopicsOfNamespace'_unknownFields = y__})
  defMessage
    = CommandGetTopicsOfNamespace'_constructor
        {_CommandGetTopicsOfNamespace'requestId = Data.ProtoLens.fieldDefault,
         _CommandGetTopicsOfNamespace'namespace = Data.ProtoLens.fieldDefault,
         _CommandGetTopicsOfNamespace'mode = Prelude.Nothing,
         _CommandGetTopicsOfNamespace'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandGetTopicsOfNamespace
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser CommandGetTopicsOfNamespace
        loop x required'namespace required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'namespace then (:) "namespace" else Prelude.id)
                               ((if required'requestId then (:) "request_id" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  required'namespace
                                  Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "namespace"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"namespace") y x)
                                  Prelude.False
                                  required'requestId
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "mode"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"mode") y x)
                                  required'namespace
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'namespace
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "CommandGetTopicsOfNamespace"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((Prelude..)
                      (\ bs
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      Data.Text.Encoding.encodeUtf8
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"namespace") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mode") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                Prelude.fromEnum
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData CommandGetTopicsOfNamespace where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandGetTopicsOfNamespace'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandGetTopicsOfNamespace'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandGetTopicsOfNamespace'namespace x__)
                   (Control.DeepSeq.deepseq
                      (_CommandGetTopicsOfNamespace'mode x__) ())))
data CommandGetTopicsOfNamespace'Mode
  = CommandGetTopicsOfNamespace'PERSISTENT |
    CommandGetTopicsOfNamespace'NON_PERSISTENT |
    CommandGetTopicsOfNamespace'ALL
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum CommandGetTopicsOfNamespace'Mode where
  maybeToEnum 0 = Prelude.Just CommandGetTopicsOfNamespace'PERSISTENT
  maybeToEnum 1
    = Prelude.Just CommandGetTopicsOfNamespace'NON_PERSISTENT
  maybeToEnum 2 = Prelude.Just CommandGetTopicsOfNamespace'ALL
  maybeToEnum _ = Prelude.Nothing
  showEnum CommandGetTopicsOfNamespace'PERSISTENT = "PERSISTENT"
  showEnum CommandGetTopicsOfNamespace'NON_PERSISTENT
    = "NON_PERSISTENT"
  showEnum CommandGetTopicsOfNamespace'ALL = "ALL"
  readEnum k
    | (Prelude.==) k "PERSISTENT"
    = Prelude.Just CommandGetTopicsOfNamespace'PERSISTENT
    | (Prelude.==) k "NON_PERSISTENT"
    = Prelude.Just CommandGetTopicsOfNamespace'NON_PERSISTENT
    | (Prelude.==) k "ALL"
    = Prelude.Just CommandGetTopicsOfNamespace'ALL
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded CommandGetTopicsOfNamespace'Mode where
  minBound = CommandGetTopicsOfNamespace'PERSISTENT
  maxBound = CommandGetTopicsOfNamespace'ALL
instance Prelude.Enum CommandGetTopicsOfNamespace'Mode where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum Mode: " (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum CommandGetTopicsOfNamespace'PERSISTENT = 0
  fromEnum CommandGetTopicsOfNamespace'NON_PERSISTENT = 1
  fromEnum CommandGetTopicsOfNamespace'ALL = 2
  succ CommandGetTopicsOfNamespace'ALL
    = Prelude.error
        "CommandGetTopicsOfNamespace'Mode.succ: bad argument CommandGetTopicsOfNamespace'ALL. This value would be out of bounds."
  succ CommandGetTopicsOfNamespace'PERSISTENT
    = CommandGetTopicsOfNamespace'NON_PERSISTENT
  succ CommandGetTopicsOfNamespace'NON_PERSISTENT
    = CommandGetTopicsOfNamespace'ALL
  pred CommandGetTopicsOfNamespace'PERSISTENT
    = Prelude.error
        "CommandGetTopicsOfNamespace'Mode.pred: bad argument CommandGetTopicsOfNamespace'PERSISTENT. This value would be out of bounds."
  pred CommandGetTopicsOfNamespace'NON_PERSISTENT
    = CommandGetTopicsOfNamespace'PERSISTENT
  pred CommandGetTopicsOfNamespace'ALL
    = CommandGetTopicsOfNamespace'NON_PERSISTENT
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault CommandGetTopicsOfNamespace'Mode where
  fieldDefault = CommandGetTopicsOfNamespace'PERSISTENT
instance Control.DeepSeq.NFData CommandGetTopicsOfNamespace'Mode where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandGetTopicsOfNamespaceResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.topics' @:: Lens' CommandGetTopicsOfNamespaceResponse [Data.Text.Text]@
         * 'Proto.PulsarApi_Fields.vec'topics' @:: Lens' CommandGetTopicsOfNamespaceResponse (Data.Vector.Vector Data.Text.Text)@ -}
data CommandGetTopicsOfNamespaceResponse
  = CommandGetTopicsOfNamespaceResponse'_constructor {_CommandGetTopicsOfNamespaceResponse'requestId :: !Data.Word.Word64,
                                                      _CommandGetTopicsOfNamespaceResponse'topics :: !(Data.Vector.Vector Data.Text.Text),
                                                      _CommandGetTopicsOfNamespaceResponse'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandGetTopicsOfNamespaceResponse where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandGetTopicsOfNamespaceResponse "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetTopicsOfNamespaceResponse'requestId
           (\ x__ y__
              -> x__ {_CommandGetTopicsOfNamespaceResponse'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandGetTopicsOfNamespaceResponse "topics" [Data.Text.Text] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetTopicsOfNamespaceResponse'topics
           (\ x__ y__
              -> x__ {_CommandGetTopicsOfNamespaceResponse'topics = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField CommandGetTopicsOfNamespaceResponse "vec'topics" (Data.Vector.Vector Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandGetTopicsOfNamespaceResponse'topics
           (\ x__ y__
              -> x__ {_CommandGetTopicsOfNamespaceResponse'topics = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandGetTopicsOfNamespaceResponse where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandGetTopicsOfNamespaceResponse"
  packedMessageDescriptor _
    = "\n\
      \#CommandGetTopicsOfNamespaceResponse\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2\SYN\n\
      \\ACKtopics\CAN\STX \ETX(\tR\ACKtopics"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandGetTopicsOfNamespaceResponse
        topics__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "topics"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"topics")) ::
              Data.ProtoLens.FieldDescriptor CommandGetTopicsOfNamespaceResponse
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, topics__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandGetTopicsOfNamespaceResponse'_unknownFields
        (\ x__ y__
           -> x__ {_CommandGetTopicsOfNamespaceResponse'_unknownFields = y__})
  defMessage
    = CommandGetTopicsOfNamespaceResponse'_constructor
        {_CommandGetTopicsOfNamespaceResponse'requestId = Data.ProtoLens.fieldDefault,
         _CommandGetTopicsOfNamespaceResponse'topics = Data.Vector.Generic.empty,
         _CommandGetTopicsOfNamespaceResponse'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandGetTopicsOfNamespaceResponse
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Text.Text
                -> Data.ProtoLens.Encoding.Bytes.Parser CommandGetTopicsOfNamespaceResponse
        loop x required'requestId mutable'topics
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'topics <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                         (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                            mutable'topics)
                      (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'topics") frozen'topics x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                                  mutable'topics
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                        Data.ProtoLens.Encoding.Bytes.getBytes
                                                          (Prelude.fromIntegral len)
                                            Data.ProtoLens.Encoding.Bytes.runEither
                                              (case Data.Text.Encoding.decodeUtf8' value of
                                                 (Prelude.Left err)
                                                   -> Prelude.Left (Prelude.show err)
                                                 (Prelude.Right r) -> Prelude.Right r))
                                        "topics"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'topics y)
                                loop x required'requestId v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
                                  mutable'topics
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'topics <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                  Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage Prelude.True mutable'topics)
          "CommandGetTopicsOfNamespaceResponse"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.Text.Encoding.encodeUtf8
                              _v))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'topics") _x))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData CommandGetTopicsOfNamespaceResponse where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandGetTopicsOfNamespaceResponse'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandGetTopicsOfNamespaceResponse'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandGetTopicsOfNamespaceResponse'topics x__) ()))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.topic' @:: Lens' CommandLookupTopic Data.Text.Text@
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandLookupTopic Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.authoritative' @:: Lens' CommandLookupTopic Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'authoritative' @:: Lens' CommandLookupTopic (Prelude.Maybe Prelude.Bool)@
         * 'Proto.PulsarApi_Fields.originalPrincipal' @:: Lens' CommandLookupTopic Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'originalPrincipal' @:: Lens' CommandLookupTopic (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.originalAuthData' @:: Lens' CommandLookupTopic Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'originalAuthData' @:: Lens' CommandLookupTopic (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.originalAuthMethod' @:: Lens' CommandLookupTopic Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'originalAuthMethod' @:: Lens' CommandLookupTopic (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.advertisedListenerName' @:: Lens' CommandLookupTopic Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'advertisedListenerName' @:: Lens' CommandLookupTopic (Prelude.Maybe Data.Text.Text)@ -}
data CommandLookupTopic
  = CommandLookupTopic'_constructor {_CommandLookupTopic'topic :: !Data.Text.Text,
                                     _CommandLookupTopic'requestId :: !Data.Word.Word64,
                                     _CommandLookupTopic'authoritative :: !(Prelude.Maybe Prelude.Bool),
                                     _CommandLookupTopic'originalPrincipal :: !(Prelude.Maybe Data.Text.Text),
                                     _CommandLookupTopic'originalAuthData :: !(Prelude.Maybe Data.Text.Text),
                                     _CommandLookupTopic'originalAuthMethod :: !(Prelude.Maybe Data.Text.Text),
                                     _CommandLookupTopic'advertisedListenerName :: !(Prelude.Maybe Data.Text.Text),
                                     _CommandLookupTopic'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandLookupTopic where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandLookupTopic "topic" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopic'topic
           (\ x__ y__ -> x__ {_CommandLookupTopic'topic = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandLookupTopic "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopic'requestId
           (\ x__ y__ -> x__ {_CommandLookupTopic'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandLookupTopic "authoritative" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopic'authoritative
           (\ x__ y__ -> x__ {_CommandLookupTopic'authoritative = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField CommandLookupTopic "maybe'authoritative" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopic'authoritative
           (\ x__ y__ -> x__ {_CommandLookupTopic'authoritative = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandLookupTopic "originalPrincipal" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopic'originalPrincipal
           (\ x__ y__ -> x__ {_CommandLookupTopic'originalPrincipal = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandLookupTopic "maybe'originalPrincipal" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopic'originalPrincipal
           (\ x__ y__ -> x__ {_CommandLookupTopic'originalPrincipal = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandLookupTopic "originalAuthData" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopic'originalAuthData
           (\ x__ y__ -> x__ {_CommandLookupTopic'originalAuthData = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandLookupTopic "maybe'originalAuthData" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopic'originalAuthData
           (\ x__ y__ -> x__ {_CommandLookupTopic'originalAuthData = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandLookupTopic "originalAuthMethod" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopic'originalAuthMethod
           (\ x__ y__ -> x__ {_CommandLookupTopic'originalAuthMethod = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandLookupTopic "maybe'originalAuthMethod" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopic'originalAuthMethod
           (\ x__ y__ -> x__ {_CommandLookupTopic'originalAuthMethod = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandLookupTopic "advertisedListenerName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopic'advertisedListenerName
           (\ x__ y__
              -> x__ {_CommandLookupTopic'advertisedListenerName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandLookupTopic "maybe'advertisedListenerName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopic'advertisedListenerName
           (\ x__ y__
              -> x__ {_CommandLookupTopic'advertisedListenerName = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandLookupTopic where
  messageName _ = Data.Text.pack "pulsar.proto.CommandLookupTopic"
  packedMessageDescriptor _
    = "\n\
      \\DC2CommandLookupTopic\DC2\DC4\n\
      \\ENQtopic\CAN\SOH \STX(\tR\ENQtopic\DC2\GS\n\
      \\n\
      \request_id\CAN\STX \STX(\EOTR\trequestId\DC2+\n\
      \\rauthoritative\CAN\ETX \SOH(\b:\ENQfalseR\rauthoritative\DC2-\n\
      \\DC2original_principal\CAN\EOT \SOH(\tR\DC1originalPrincipal\DC2,\n\
      \\DC2original_auth_data\CAN\ENQ \SOH(\tR\DLEoriginalAuthData\DC20\n\
      \\DC4original_auth_method\CAN\ACK \SOH(\tR\DC2originalAuthMethod\DC28\n\
      \\CANadvertised_listener_name\CAN\a \SOH(\tR\SYNadvertisedListenerName"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        topic__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "topic"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"topic")) ::
              Data.ProtoLens.FieldDescriptor CommandLookupTopic
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandLookupTopic
        authoritative__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "authoritative"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'authoritative")) ::
              Data.ProtoLens.FieldDescriptor CommandLookupTopic
        originalPrincipal__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "original_principal"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'originalPrincipal")) ::
              Data.ProtoLens.FieldDescriptor CommandLookupTopic
        originalAuthData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "original_auth_data"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'originalAuthData")) ::
              Data.ProtoLens.FieldDescriptor CommandLookupTopic
        originalAuthMethod__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "original_auth_method"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'originalAuthMethod")) ::
              Data.ProtoLens.FieldDescriptor CommandLookupTopic
        advertisedListenerName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "advertised_listener_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'advertisedListenerName")) ::
              Data.ProtoLens.FieldDescriptor CommandLookupTopic
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, topic__field_descriptor),
           (Data.ProtoLens.Tag 2, requestId__field_descriptor),
           (Data.ProtoLens.Tag 3, authoritative__field_descriptor),
           (Data.ProtoLens.Tag 4, originalPrincipal__field_descriptor),
           (Data.ProtoLens.Tag 5, originalAuthData__field_descriptor),
           (Data.ProtoLens.Tag 6, originalAuthMethod__field_descriptor),
           (Data.ProtoLens.Tag 7, advertisedListenerName__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandLookupTopic'_unknownFields
        (\ x__ y__ -> x__ {_CommandLookupTopic'_unknownFields = y__})
  defMessage
    = CommandLookupTopic'_constructor
        {_CommandLookupTopic'topic = Data.ProtoLens.fieldDefault,
         _CommandLookupTopic'requestId = Data.ProtoLens.fieldDefault,
         _CommandLookupTopic'authoritative = Prelude.Nothing,
         _CommandLookupTopic'originalPrincipal = Prelude.Nothing,
         _CommandLookupTopic'originalAuthData = Prelude.Nothing,
         _CommandLookupTopic'originalAuthMethod = Prelude.Nothing,
         _CommandLookupTopic'advertisedListenerName = Prelude.Nothing,
         _CommandLookupTopic'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandLookupTopic
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser CommandLookupTopic
        loop x required'requestId required'topic
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id)
                               ((if required'topic then (:) "topic" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "topic"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"topic") y x)
                                  required'requestId
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                                  required'topic
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "authoritative"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"authoritative") y x)
                                  required'requestId
                                  required'topic
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "original_principal"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"originalPrincipal") y x)
                                  required'requestId
                                  required'topic
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "original_auth_data"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"originalAuthData") y x)
                                  required'requestId
                                  required'topic
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "original_auth_method"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"originalAuthMethod") y x)
                                  required'requestId
                                  required'topic
                        58
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "advertised_listener_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"advertisedListenerName") y x)
                                  required'requestId
                                  required'topic
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
                                  required'topic
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "CommandLookupTopic"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"topic") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'authoritative") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt
                                (\ b -> if b then 1 else 0)
                                _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'originalPrincipal") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.Text.Encoding.encodeUtf8
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'originalAuthData") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'originalAuthMethod") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                      ((Prelude..)
                                         (\ bs
                                            -> (Data.Monoid.<>)
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                    (Prelude.fromIntegral
                                                       (Data.ByteString.length bs)))
                                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         Data.Text.Encoding.encodeUtf8
                                         _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'advertisedListenerName")
                                      _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                         ((Prelude..)
                                            (\ bs
                                               -> (Data.Monoid.<>)
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                       (Prelude.fromIntegral
                                                          (Data.ByteString.length bs)))
                                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Data.Text.Encoding.encodeUtf8
                                            _v))
                               (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                  (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))
instance Control.DeepSeq.NFData CommandLookupTopic where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandLookupTopic'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandLookupTopic'topic x__)
                (Control.DeepSeq.deepseq
                   (_CommandLookupTopic'requestId x__)
                   (Control.DeepSeq.deepseq
                      (_CommandLookupTopic'authoritative x__)
                      (Control.DeepSeq.deepseq
                         (_CommandLookupTopic'originalPrincipal x__)
                         (Control.DeepSeq.deepseq
                            (_CommandLookupTopic'originalAuthData x__)
                            (Control.DeepSeq.deepseq
                               (_CommandLookupTopic'originalAuthMethod x__)
                               (Control.DeepSeq.deepseq
                                  (_CommandLookupTopic'advertisedListenerName x__) ())))))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.brokerServiceUrl' @:: Lens' CommandLookupTopicResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'brokerServiceUrl' @:: Lens' CommandLookupTopicResponse (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.brokerServiceUrlTls' @:: Lens' CommandLookupTopicResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'brokerServiceUrlTls' @:: Lens' CommandLookupTopicResponse (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.response' @:: Lens' CommandLookupTopicResponse CommandLookupTopicResponse'LookupType@
         * 'Proto.PulsarApi_Fields.maybe'response' @:: Lens' CommandLookupTopicResponse (Prelude.Maybe CommandLookupTopicResponse'LookupType)@
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandLookupTopicResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.authoritative' @:: Lens' CommandLookupTopicResponse Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'authoritative' @:: Lens' CommandLookupTopicResponse (Prelude.Maybe Prelude.Bool)@
         * 'Proto.PulsarApi_Fields.error' @:: Lens' CommandLookupTopicResponse ServerError@
         * 'Proto.PulsarApi_Fields.maybe'error' @:: Lens' CommandLookupTopicResponse (Prelude.Maybe ServerError)@
         * 'Proto.PulsarApi_Fields.message' @:: Lens' CommandLookupTopicResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'message' @:: Lens' CommandLookupTopicResponse (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.proxyThroughServiceUrl' @:: Lens' CommandLookupTopicResponse Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'proxyThroughServiceUrl' @:: Lens' CommandLookupTopicResponse (Prelude.Maybe Prelude.Bool)@ -}
data CommandLookupTopicResponse
  = CommandLookupTopicResponse'_constructor {_CommandLookupTopicResponse'brokerServiceUrl :: !(Prelude.Maybe Data.Text.Text),
                                             _CommandLookupTopicResponse'brokerServiceUrlTls :: !(Prelude.Maybe Data.Text.Text),
                                             _CommandLookupTopicResponse'response :: !(Prelude.Maybe CommandLookupTopicResponse'LookupType),
                                             _CommandLookupTopicResponse'requestId :: !Data.Word.Word64,
                                             _CommandLookupTopicResponse'authoritative :: !(Prelude.Maybe Prelude.Bool),
                                             _CommandLookupTopicResponse'error :: !(Prelude.Maybe ServerError),
                                             _CommandLookupTopicResponse'message :: !(Prelude.Maybe Data.Text.Text),
                                             _CommandLookupTopicResponse'proxyThroughServiceUrl :: !(Prelude.Maybe Prelude.Bool),
                                             _CommandLookupTopicResponse'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandLookupTopicResponse where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandLookupTopicResponse "brokerServiceUrl" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopicResponse'brokerServiceUrl
           (\ x__ y__
              -> x__ {_CommandLookupTopicResponse'brokerServiceUrl = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandLookupTopicResponse "maybe'brokerServiceUrl" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopicResponse'brokerServiceUrl
           (\ x__ y__
              -> x__ {_CommandLookupTopicResponse'brokerServiceUrl = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandLookupTopicResponse "brokerServiceUrlTls" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopicResponse'brokerServiceUrlTls
           (\ x__ y__
              -> x__ {_CommandLookupTopicResponse'brokerServiceUrlTls = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandLookupTopicResponse "maybe'brokerServiceUrlTls" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopicResponse'brokerServiceUrlTls
           (\ x__ y__
              -> x__ {_CommandLookupTopicResponse'brokerServiceUrlTls = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandLookupTopicResponse "response" CommandLookupTopicResponse'LookupType where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopicResponse'response
           (\ x__ y__ -> x__ {_CommandLookupTopicResponse'response = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandLookupTopicResponse "maybe'response" (Prelude.Maybe CommandLookupTopicResponse'LookupType) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopicResponse'response
           (\ x__ y__ -> x__ {_CommandLookupTopicResponse'response = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandLookupTopicResponse "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopicResponse'requestId
           (\ x__ y__ -> x__ {_CommandLookupTopicResponse'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandLookupTopicResponse "authoritative" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopicResponse'authoritative
           (\ x__ y__
              -> x__ {_CommandLookupTopicResponse'authoritative = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField CommandLookupTopicResponse "maybe'authoritative" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopicResponse'authoritative
           (\ x__ y__
              -> x__ {_CommandLookupTopicResponse'authoritative = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandLookupTopicResponse "error" ServerError where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopicResponse'error
           (\ x__ y__ -> x__ {_CommandLookupTopicResponse'error = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandLookupTopicResponse "maybe'error" (Prelude.Maybe ServerError) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopicResponse'error
           (\ x__ y__ -> x__ {_CommandLookupTopicResponse'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandLookupTopicResponse "message" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopicResponse'message
           (\ x__ y__ -> x__ {_CommandLookupTopicResponse'message = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandLookupTopicResponse "maybe'message" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopicResponse'message
           (\ x__ y__ -> x__ {_CommandLookupTopicResponse'message = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandLookupTopicResponse "proxyThroughServiceUrl" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopicResponse'proxyThroughServiceUrl
           (\ x__ y__
              -> x__ {_CommandLookupTopicResponse'proxyThroughServiceUrl = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField CommandLookupTopicResponse "maybe'proxyThroughServiceUrl" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandLookupTopicResponse'proxyThroughServiceUrl
           (\ x__ y__
              -> x__ {_CommandLookupTopicResponse'proxyThroughServiceUrl = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandLookupTopicResponse where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandLookupTopicResponse"
  packedMessageDescriptor _
    = "\n\
      \\SUBCommandLookupTopicResponse\DC2*\n\
      \\DLEbrokerServiceUrl\CAN\SOH \SOH(\tR\DLEbrokerServiceUrl\DC20\n\
      \\DC3brokerServiceUrlTls\CAN\STX \SOH(\tR\DC3brokerServiceUrlTls\DC2O\n\
      \\bresponse\CAN\ETX \SOH(\SO23.pulsar.proto.CommandLookupTopicResponse.LookupTypeR\bresponse\DC2\GS\n\
      \\n\
      \request_id\CAN\EOT \STX(\EOTR\trequestId\DC2+\n\
      \\rauthoritative\CAN\ENQ \SOH(\b:\ENQfalseR\rauthoritative\DC2/\n\
      \\ENQerror\CAN\ACK \SOH(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
      \\amessage\CAN\a \SOH(\tR\amessage\DC2@\n\
      \\EMproxy_through_service_url\CAN\b \SOH(\b:\ENQfalseR\SYNproxyThroughServiceUrl\"3\n\
      \\n\
      \LookupType\DC2\f\n\
      \\bRedirect\DLE\NUL\DC2\v\n\
      \\aConnect\DLE\SOH\DC2\n\
      \\n\
      \\ACKFailed\DLE\STX"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        brokerServiceUrl__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "brokerServiceUrl"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'brokerServiceUrl")) ::
              Data.ProtoLens.FieldDescriptor CommandLookupTopicResponse
        brokerServiceUrlTls__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "brokerServiceUrlTls"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'brokerServiceUrlTls")) ::
              Data.ProtoLens.FieldDescriptor CommandLookupTopicResponse
        response__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "response"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor CommandLookupTopicResponse'LookupType)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'response")) ::
              Data.ProtoLens.FieldDescriptor CommandLookupTopicResponse
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandLookupTopicResponse
        authoritative__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "authoritative"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'authoritative")) ::
              Data.ProtoLens.FieldDescriptor CommandLookupTopicResponse
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ServerError)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'error")) ::
              Data.ProtoLens.FieldDescriptor CommandLookupTopicResponse
        message__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'message")) ::
              Data.ProtoLens.FieldDescriptor CommandLookupTopicResponse
        proxyThroughServiceUrl__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "proxy_through_service_url"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'proxyThroughServiceUrl")) ::
              Data.ProtoLens.FieldDescriptor CommandLookupTopicResponse
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, brokerServiceUrl__field_descriptor),
           (Data.ProtoLens.Tag 2, brokerServiceUrlTls__field_descriptor),
           (Data.ProtoLens.Tag 3, response__field_descriptor),
           (Data.ProtoLens.Tag 4, requestId__field_descriptor),
           (Data.ProtoLens.Tag 5, authoritative__field_descriptor),
           (Data.ProtoLens.Tag 6, error__field_descriptor),
           (Data.ProtoLens.Tag 7, message__field_descriptor),
           (Data.ProtoLens.Tag 8, proxyThroughServiceUrl__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandLookupTopicResponse'_unknownFields
        (\ x__ y__
           -> x__ {_CommandLookupTopicResponse'_unknownFields = y__})
  defMessage
    = CommandLookupTopicResponse'_constructor
        {_CommandLookupTopicResponse'brokerServiceUrl = Prelude.Nothing,
         _CommandLookupTopicResponse'brokerServiceUrlTls = Prelude.Nothing,
         _CommandLookupTopicResponse'response = Prelude.Nothing,
         _CommandLookupTopicResponse'requestId = Data.ProtoLens.fieldDefault,
         _CommandLookupTopicResponse'authoritative = Prelude.Nothing,
         _CommandLookupTopicResponse'error = Prelude.Nothing,
         _CommandLookupTopicResponse'message = Prelude.Nothing,
         _CommandLookupTopicResponse'proxyThroughServiceUrl = Prelude.Nothing,
         _CommandLookupTopicResponse'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandLookupTopicResponse
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandLookupTopicResponse
        loop x required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "brokerServiceUrl"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"brokerServiceUrl") y x)
                                  required'requestId
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "brokerServiceUrlTls"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"brokerServiceUrlTls") y x)
                                  required'requestId
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "response"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"response") y x)
                                  required'requestId
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "authoritative"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"authoritative") y x)
                                  required'requestId
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                                  required'requestId
                        58
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "message"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"message") y x)
                                  required'requestId
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "proxy_through_service_url"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"proxyThroughServiceUrl") y x)
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "CommandLookupTopicResponse"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'brokerServiceUrl") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8
                          _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'brokerServiceUrlTls") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'response") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                Prelude.fromEnum
                                _v))
                   ((Data.Monoid.<>)
                      ((Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'authoritative") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (\ b -> if b then 1 else 0)
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'error") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral)
                                         Prelude.fromEnum
                                         _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'message") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                         ((Prelude..)
                                            (\ bs
                                               -> (Data.Monoid.<>)
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                       (Prelude.fromIntegral
                                                          (Data.ByteString.length bs)))
                                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Data.Text.Encoding.encodeUtf8
                                            _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field
                                            @"maybe'proxyThroughServiceUrl")
                                         _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (\ b -> if b then 1 else 0)
                                               _v))
                                  (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                     (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))))
instance Control.DeepSeq.NFData CommandLookupTopicResponse where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandLookupTopicResponse'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandLookupTopicResponse'brokerServiceUrl x__)
                (Control.DeepSeq.deepseq
                   (_CommandLookupTopicResponse'brokerServiceUrlTls x__)
                   (Control.DeepSeq.deepseq
                      (_CommandLookupTopicResponse'response x__)
                      (Control.DeepSeq.deepseq
                         (_CommandLookupTopicResponse'requestId x__)
                         (Control.DeepSeq.deepseq
                            (_CommandLookupTopicResponse'authoritative x__)
                            (Control.DeepSeq.deepseq
                               (_CommandLookupTopicResponse'error x__)
                               (Control.DeepSeq.deepseq
                                  (_CommandLookupTopicResponse'message x__)
                                  (Control.DeepSeq.deepseq
                                     (_CommandLookupTopicResponse'proxyThroughServiceUrl x__)
                                     ()))))))))
data CommandLookupTopicResponse'LookupType
  = CommandLookupTopicResponse'Redirect |
    CommandLookupTopicResponse'Connect |
    CommandLookupTopicResponse'Failed
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum CommandLookupTopicResponse'LookupType where
  maybeToEnum 0 = Prelude.Just CommandLookupTopicResponse'Redirect
  maybeToEnum 1 = Prelude.Just CommandLookupTopicResponse'Connect
  maybeToEnum 2 = Prelude.Just CommandLookupTopicResponse'Failed
  maybeToEnum _ = Prelude.Nothing
  showEnum CommandLookupTopicResponse'Redirect = "Redirect"
  showEnum CommandLookupTopicResponse'Connect = "Connect"
  showEnum CommandLookupTopicResponse'Failed = "Failed"
  readEnum k
    | (Prelude.==) k "Redirect"
    = Prelude.Just CommandLookupTopicResponse'Redirect
    | (Prelude.==) k "Connect"
    = Prelude.Just CommandLookupTopicResponse'Connect
    | (Prelude.==) k "Failed"
    = Prelude.Just CommandLookupTopicResponse'Failed
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded CommandLookupTopicResponse'LookupType where
  minBound = CommandLookupTopicResponse'Redirect
  maxBound = CommandLookupTopicResponse'Failed
instance Prelude.Enum CommandLookupTopicResponse'LookupType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum LookupType: " (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum CommandLookupTopicResponse'Redirect = 0
  fromEnum CommandLookupTopicResponse'Connect = 1
  fromEnum CommandLookupTopicResponse'Failed = 2
  succ CommandLookupTopicResponse'Failed
    = Prelude.error
        "CommandLookupTopicResponse'LookupType.succ: bad argument CommandLookupTopicResponse'Failed. This value would be out of bounds."
  succ CommandLookupTopicResponse'Redirect
    = CommandLookupTopicResponse'Connect
  succ CommandLookupTopicResponse'Connect
    = CommandLookupTopicResponse'Failed
  pred CommandLookupTopicResponse'Redirect
    = Prelude.error
        "CommandLookupTopicResponse'LookupType.pred: bad argument CommandLookupTopicResponse'Redirect. This value would be out of bounds."
  pred CommandLookupTopicResponse'Connect
    = CommandLookupTopicResponse'Redirect
  pred CommandLookupTopicResponse'Failed
    = CommandLookupTopicResponse'Connect
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault CommandLookupTopicResponse'LookupType where
  fieldDefault = CommandLookupTopicResponse'Redirect
instance Control.DeepSeq.NFData CommandLookupTopicResponse'LookupType where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.consumerId' @:: Lens' CommandMessage Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.messageId' @:: Lens' CommandMessage MessageIdData@
         * 'Proto.PulsarApi_Fields.redeliveryCount' @:: Lens' CommandMessage Data.Word.Word32@
         * 'Proto.PulsarApi_Fields.maybe'redeliveryCount' @:: Lens' CommandMessage (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.PulsarApi_Fields.ackSet' @:: Lens' CommandMessage [Data.Int.Int64]@
         * 'Proto.PulsarApi_Fields.vec'ackSet' @:: Lens' CommandMessage (Data.Vector.Unboxed.Vector Data.Int.Int64)@ -}
data CommandMessage
  = CommandMessage'_constructor {_CommandMessage'consumerId :: !Data.Word.Word64,
                                 _CommandMessage'messageId :: !MessageIdData,
                                 _CommandMessage'redeliveryCount :: !(Prelude.Maybe Data.Word.Word32),
                                 _CommandMessage'ackSet :: !(Data.Vector.Unboxed.Vector Data.Int.Int64),
                                 _CommandMessage'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandMessage where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandMessage "consumerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandMessage'consumerId
           (\ x__ y__ -> x__ {_CommandMessage'consumerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandMessage "messageId" MessageIdData where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandMessage'messageId
           (\ x__ y__ -> x__ {_CommandMessage'messageId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandMessage "redeliveryCount" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandMessage'redeliveryCount
           (\ x__ y__ -> x__ {_CommandMessage'redeliveryCount = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandMessage "maybe'redeliveryCount" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandMessage'redeliveryCount
           (\ x__ y__ -> x__ {_CommandMessage'redeliveryCount = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandMessage "ackSet" [Data.Int.Int64] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandMessage'ackSet
           (\ x__ y__ -> x__ {_CommandMessage'ackSet = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField CommandMessage "vec'ackSet" (Data.Vector.Unboxed.Vector Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandMessage'ackSet
           (\ x__ y__ -> x__ {_CommandMessage'ackSet = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandMessage where
  messageName _ = Data.Text.pack "pulsar.proto.CommandMessage"
  packedMessageDescriptor _
    = "\n\
      \\SOCommandMessage\DC2\US\n\
      \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
      \consumerId\DC2:\n\
      \\n\
      \message_id\CAN\STX \STX(\v2\ESC.pulsar.proto.MessageIdDataR\tmessageId\DC2,\n\
      \\DLEredelivery_count\CAN\ETX \SOH(\r:\SOH0R\SIredeliveryCount\DC2\ETB\n\
      \\aack_set\CAN\EOT \ETX(\ETXR\ACKackSet"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        consumerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "consumer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"consumerId")) ::
              Data.ProtoLens.FieldDescriptor CommandMessage
        messageId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message_id"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor MessageIdData)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"messageId")) ::
              Data.ProtoLens.FieldDescriptor CommandMessage
        redeliveryCount__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "redelivery_count"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'redeliveryCount")) ::
              Data.ProtoLens.FieldDescriptor CommandMessage
        ackSet__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ack_set"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"ackSet")) ::
              Data.ProtoLens.FieldDescriptor CommandMessage
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, consumerId__field_descriptor),
           (Data.ProtoLens.Tag 2, messageId__field_descriptor),
           (Data.ProtoLens.Tag 3, redeliveryCount__field_descriptor),
           (Data.ProtoLens.Tag 4, ackSet__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandMessage'_unknownFields
        (\ x__ y__ -> x__ {_CommandMessage'_unknownFields = y__})
  defMessage
    = CommandMessage'_constructor
        {_CommandMessage'consumerId = Data.ProtoLens.fieldDefault,
         _CommandMessage'messageId = Data.ProtoLens.defMessage,
         _CommandMessage'redeliveryCount = Prelude.Nothing,
         _CommandMessage'ackSet = Data.Vector.Generic.empty,
         _CommandMessage'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandMessage
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Unboxed.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Int.Int64
                   -> Data.ProtoLens.Encoding.Bytes.Parser CommandMessage
        loop x required'consumerId required'messageId mutable'ackSet
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'ackSet <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                         (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                            mutable'ackSet)
                      (let
                         missing
                           = (if required'consumerId then (:) "consumer_id" else Prelude.id)
                               ((if required'messageId then (:) "message_id" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'ackSet") frozen'ackSet x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "consumer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"consumerId") y x)
                                  Prelude.False
                                  required'messageId
                                  mutable'ackSet
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "message_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"messageId") y x)
                                  required'consumerId
                                  Prelude.False
                                  mutable'ackSet
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "redelivery_count"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"redeliveryCount") y x)
                                  required'consumerId
                                  required'messageId
                                  mutable'ackSet
                        32
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (Prelude.fmap
                                           Prelude.fromIntegral
                                           Data.ProtoLens.Encoding.Bytes.getVarInt)
                                        "ack_set"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'ackSet y)
                                loop x required'consumerId required'messageId v
                        34
                          -> do y <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                        Data.ProtoLens.Encoding.Bytes.isolate
                                          (Prelude.fromIntegral len)
                                          ((let
                                              ploop qs
                                                = do packedEnd <- Data.ProtoLens.Encoding.Bytes.atEnd
                                                     if packedEnd then
                                                         Prelude.return qs
                                                     else
                                                         do !q <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                                                    (Prelude.fmap
                                                                       Prelude.fromIntegral
                                                                       Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                                    "ack_set"
                                                            qs' <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                     (Data.ProtoLens.Encoding.Growing.append
                                                                        qs q)
                                                            ploop qs'
                                            in ploop)
                                             mutable'ackSet)
                                loop x required'consumerId required'messageId y
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'consumerId
                                  required'messageId
                                  mutable'ackSet
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'ackSet <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                  Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage Prelude.True Prelude.True mutable'ackSet)
          "CommandMessage"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"consumerId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((Prelude..)
                      (\ bs
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      Data.ProtoLens.encodeMessage
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"messageId") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'redeliveryCount") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                         (\ _v
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                 ((Prelude..)
                                    Data.ProtoLens.Encoding.Bytes.putVarInt
                                    Prelude.fromIntegral
                                    _v))
                         (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'ackSet") _x))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData CommandMessage where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandMessage'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandMessage'consumerId x__)
                (Control.DeepSeq.deepseq
                   (_CommandMessage'messageId x__)
                   (Control.DeepSeq.deepseq
                      (_CommandMessage'redeliveryCount x__)
                      (Control.DeepSeq.deepseq (_CommandMessage'ackSet x__) ()))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandNewTxn Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.txnTtlSeconds' @:: Lens' CommandNewTxn Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnTtlSeconds' @:: Lens' CommandNewTxn (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.tcId' @:: Lens' CommandNewTxn Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'tcId' @:: Lens' CommandNewTxn (Prelude.Maybe Data.Word.Word64)@ -}
data CommandNewTxn
  = CommandNewTxn'_constructor {_CommandNewTxn'requestId :: !Data.Word.Word64,
                                _CommandNewTxn'txnTtlSeconds :: !(Prelude.Maybe Data.Word.Word64),
                                _CommandNewTxn'tcId :: !(Prelude.Maybe Data.Word.Word64),
                                _CommandNewTxn'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandNewTxn where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandNewTxn "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandNewTxn'requestId
           (\ x__ y__ -> x__ {_CommandNewTxn'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandNewTxn "txnTtlSeconds" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandNewTxn'txnTtlSeconds
           (\ x__ y__ -> x__ {_CommandNewTxn'txnTtlSeconds = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandNewTxn "maybe'txnTtlSeconds" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandNewTxn'txnTtlSeconds
           (\ x__ y__ -> x__ {_CommandNewTxn'txnTtlSeconds = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandNewTxn "tcId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandNewTxn'tcId (\ x__ y__ -> x__ {_CommandNewTxn'tcId = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandNewTxn "maybe'tcId" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandNewTxn'tcId (\ x__ y__ -> x__ {_CommandNewTxn'tcId = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandNewTxn where
  messageName _ = Data.Text.pack "pulsar.proto.CommandNewTxn"
  packedMessageDescriptor _
    = "\n\
      \\rCommandNewTxn\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2)\n\
      \\SItxn_ttl_seconds\CAN\STX \SOH(\EOT:\SOH0R\rtxnTtlSeconds\DC2\SYN\n\
      \\ENQtc_id\CAN\ETX \SOH(\EOT:\SOH0R\EOTtcId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandNewTxn
        txnTtlSeconds__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txn_ttl_seconds"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnTtlSeconds")) ::
              Data.ProtoLens.FieldDescriptor CommandNewTxn
        tcId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "tc_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'tcId")) ::
              Data.ProtoLens.FieldDescriptor CommandNewTxn
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, txnTtlSeconds__field_descriptor),
           (Data.ProtoLens.Tag 3, tcId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandNewTxn'_unknownFields
        (\ x__ y__ -> x__ {_CommandNewTxn'_unknownFields = y__})
  defMessage
    = CommandNewTxn'_constructor
        {_CommandNewTxn'requestId = Data.ProtoLens.fieldDefault,
         _CommandNewTxn'txnTtlSeconds = Prelude.Nothing,
         _CommandNewTxn'tcId = Prelude.Nothing,
         _CommandNewTxn'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandNewTxn
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandNewTxn
        loop x required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txn_ttl_seconds"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnTtlSeconds") y x)
                                  required'requestId
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "tc_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"tcId") y x)
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "CommandNewTxn"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'txnTtlSeconds") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'tcId") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData CommandNewTxn where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandNewTxn'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandNewTxn'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandNewTxn'txnTtlSeconds x__)
                   (Control.DeepSeq.deepseq (_CommandNewTxn'tcId x__) ())))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandNewTxnResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.txnidLeastBits' @:: Lens' CommandNewTxnResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidLeastBits' @:: Lens' CommandNewTxnResponse (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.txnidMostBits' @:: Lens' CommandNewTxnResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidMostBits' @:: Lens' CommandNewTxnResponse (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.error' @:: Lens' CommandNewTxnResponse ServerError@
         * 'Proto.PulsarApi_Fields.maybe'error' @:: Lens' CommandNewTxnResponse (Prelude.Maybe ServerError)@
         * 'Proto.PulsarApi_Fields.message' @:: Lens' CommandNewTxnResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'message' @:: Lens' CommandNewTxnResponse (Prelude.Maybe Data.Text.Text)@ -}
data CommandNewTxnResponse
  = CommandNewTxnResponse'_constructor {_CommandNewTxnResponse'requestId :: !Data.Word.Word64,
                                        _CommandNewTxnResponse'txnidLeastBits :: !(Prelude.Maybe Data.Word.Word64),
                                        _CommandNewTxnResponse'txnidMostBits :: !(Prelude.Maybe Data.Word.Word64),
                                        _CommandNewTxnResponse'error :: !(Prelude.Maybe ServerError),
                                        _CommandNewTxnResponse'message :: !(Prelude.Maybe Data.Text.Text),
                                        _CommandNewTxnResponse'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandNewTxnResponse where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandNewTxnResponse "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandNewTxnResponse'requestId
           (\ x__ y__ -> x__ {_CommandNewTxnResponse'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandNewTxnResponse "txnidLeastBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandNewTxnResponse'txnidLeastBits
           (\ x__ y__ -> x__ {_CommandNewTxnResponse'txnidLeastBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandNewTxnResponse "maybe'txnidLeastBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandNewTxnResponse'txnidLeastBits
           (\ x__ y__ -> x__ {_CommandNewTxnResponse'txnidLeastBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandNewTxnResponse "txnidMostBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandNewTxnResponse'txnidMostBits
           (\ x__ y__ -> x__ {_CommandNewTxnResponse'txnidMostBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandNewTxnResponse "maybe'txnidMostBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandNewTxnResponse'txnidMostBits
           (\ x__ y__ -> x__ {_CommandNewTxnResponse'txnidMostBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandNewTxnResponse "error" ServerError where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandNewTxnResponse'error
           (\ x__ y__ -> x__ {_CommandNewTxnResponse'error = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandNewTxnResponse "maybe'error" (Prelude.Maybe ServerError) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandNewTxnResponse'error
           (\ x__ y__ -> x__ {_CommandNewTxnResponse'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandNewTxnResponse "message" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandNewTxnResponse'message
           (\ x__ y__ -> x__ {_CommandNewTxnResponse'message = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandNewTxnResponse "maybe'message" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandNewTxnResponse'message
           (\ x__ y__ -> x__ {_CommandNewTxnResponse'message = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandNewTxnResponse where
  messageName _ = Data.Text.pack "pulsar.proto.CommandNewTxnResponse"
  packedMessageDescriptor _
    = "\n\
      \\NAKCommandNewTxnResponse\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
      \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
      \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2/\n\
      \\ENQerror\CAN\EOT \SOH(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
      \\amessage\CAN\ENQ \SOH(\tR\amessage"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandNewTxnResponse
        txnidLeastBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_least_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidLeastBits")) ::
              Data.ProtoLens.FieldDescriptor CommandNewTxnResponse
        txnidMostBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_most_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidMostBits")) ::
              Data.ProtoLens.FieldDescriptor CommandNewTxnResponse
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ServerError)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'error")) ::
              Data.ProtoLens.FieldDescriptor CommandNewTxnResponse
        message__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'message")) ::
              Data.ProtoLens.FieldDescriptor CommandNewTxnResponse
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, txnidLeastBits__field_descriptor),
           (Data.ProtoLens.Tag 3, txnidMostBits__field_descriptor),
           (Data.ProtoLens.Tag 4, error__field_descriptor),
           (Data.ProtoLens.Tag 5, message__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandNewTxnResponse'_unknownFields
        (\ x__ y__ -> x__ {_CommandNewTxnResponse'_unknownFields = y__})
  defMessage
    = CommandNewTxnResponse'_constructor
        {_CommandNewTxnResponse'requestId = Data.ProtoLens.fieldDefault,
         _CommandNewTxnResponse'txnidLeastBits = Prelude.Nothing,
         _CommandNewTxnResponse'txnidMostBits = Prelude.Nothing,
         _CommandNewTxnResponse'error = Prelude.Nothing,
         _CommandNewTxnResponse'message = Prelude.Nothing,
         _CommandNewTxnResponse'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandNewTxnResponse
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandNewTxnResponse
        loop x required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_least_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidLeastBits") y x)
                                  required'requestId
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_most_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidMostBits") y x)
                                  required'requestId
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                                  required'requestId
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "message"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"message") y x)
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "CommandNewTxnResponse"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'txnidLeastBits") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'txnidMostBits") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'error") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                   Prelude.fromEnum
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'message") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData CommandNewTxnResponse where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandNewTxnResponse'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandNewTxnResponse'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandNewTxnResponse'txnidLeastBits x__)
                   (Control.DeepSeq.deepseq
                      (_CommandNewTxnResponse'txnidMostBits x__)
                      (Control.DeepSeq.deepseq
                         (_CommandNewTxnResponse'error x__)
                         (Control.DeepSeq.deepseq
                            (_CommandNewTxnResponse'message x__) ())))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.topic' @:: Lens' CommandPartitionedTopicMetadata Data.Text.Text@
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandPartitionedTopicMetadata Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.originalPrincipal' @:: Lens' CommandPartitionedTopicMetadata Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'originalPrincipal' @:: Lens' CommandPartitionedTopicMetadata (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.originalAuthData' @:: Lens' CommandPartitionedTopicMetadata Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'originalAuthData' @:: Lens' CommandPartitionedTopicMetadata (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.originalAuthMethod' @:: Lens' CommandPartitionedTopicMetadata Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'originalAuthMethod' @:: Lens' CommandPartitionedTopicMetadata (Prelude.Maybe Data.Text.Text)@ -}
data CommandPartitionedTopicMetadata
  = CommandPartitionedTopicMetadata'_constructor {_CommandPartitionedTopicMetadata'topic :: !Data.Text.Text,
                                                  _CommandPartitionedTopicMetadata'requestId :: !Data.Word.Word64,
                                                  _CommandPartitionedTopicMetadata'originalPrincipal :: !(Prelude.Maybe Data.Text.Text),
                                                  _CommandPartitionedTopicMetadata'originalAuthData :: !(Prelude.Maybe Data.Text.Text),
                                                  _CommandPartitionedTopicMetadata'originalAuthMethod :: !(Prelude.Maybe Data.Text.Text),
                                                  _CommandPartitionedTopicMetadata'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandPartitionedTopicMetadata where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandPartitionedTopicMetadata "topic" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandPartitionedTopicMetadata'topic
           (\ x__ y__ -> x__ {_CommandPartitionedTopicMetadata'topic = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandPartitionedTopicMetadata "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandPartitionedTopicMetadata'requestId
           (\ x__ y__
              -> x__ {_CommandPartitionedTopicMetadata'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandPartitionedTopicMetadata "originalPrincipal" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandPartitionedTopicMetadata'originalPrincipal
           (\ x__ y__
              -> x__ {_CommandPartitionedTopicMetadata'originalPrincipal = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandPartitionedTopicMetadata "maybe'originalPrincipal" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandPartitionedTopicMetadata'originalPrincipal
           (\ x__ y__
              -> x__ {_CommandPartitionedTopicMetadata'originalPrincipal = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandPartitionedTopicMetadata "originalAuthData" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandPartitionedTopicMetadata'originalAuthData
           (\ x__ y__
              -> x__ {_CommandPartitionedTopicMetadata'originalAuthData = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandPartitionedTopicMetadata "maybe'originalAuthData" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandPartitionedTopicMetadata'originalAuthData
           (\ x__ y__
              -> x__ {_CommandPartitionedTopicMetadata'originalAuthData = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandPartitionedTopicMetadata "originalAuthMethod" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandPartitionedTopicMetadata'originalAuthMethod
           (\ x__ y__
              -> x__
                   {_CommandPartitionedTopicMetadata'originalAuthMethod = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandPartitionedTopicMetadata "maybe'originalAuthMethod" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandPartitionedTopicMetadata'originalAuthMethod
           (\ x__ y__
              -> x__
                   {_CommandPartitionedTopicMetadata'originalAuthMethod = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandPartitionedTopicMetadata where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandPartitionedTopicMetadata"
  packedMessageDescriptor _
    = "\n\
      \\USCommandPartitionedTopicMetadata\DC2\DC4\n\
      \\ENQtopic\CAN\SOH \STX(\tR\ENQtopic\DC2\GS\n\
      \\n\
      \request_id\CAN\STX \STX(\EOTR\trequestId\DC2-\n\
      \\DC2original_principal\CAN\ETX \SOH(\tR\DC1originalPrincipal\DC2,\n\
      \\DC2original_auth_data\CAN\EOT \SOH(\tR\DLEoriginalAuthData\DC20\n\
      \\DC4original_auth_method\CAN\ENQ \SOH(\tR\DC2originalAuthMethod"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        topic__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "topic"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"topic")) ::
              Data.ProtoLens.FieldDescriptor CommandPartitionedTopicMetadata
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandPartitionedTopicMetadata
        originalPrincipal__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "original_principal"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'originalPrincipal")) ::
              Data.ProtoLens.FieldDescriptor CommandPartitionedTopicMetadata
        originalAuthData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "original_auth_data"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'originalAuthData")) ::
              Data.ProtoLens.FieldDescriptor CommandPartitionedTopicMetadata
        originalAuthMethod__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "original_auth_method"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'originalAuthMethod")) ::
              Data.ProtoLens.FieldDescriptor CommandPartitionedTopicMetadata
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, topic__field_descriptor),
           (Data.ProtoLens.Tag 2, requestId__field_descriptor),
           (Data.ProtoLens.Tag 3, originalPrincipal__field_descriptor),
           (Data.ProtoLens.Tag 4, originalAuthData__field_descriptor),
           (Data.ProtoLens.Tag 5, originalAuthMethod__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandPartitionedTopicMetadata'_unknownFields
        (\ x__ y__
           -> x__ {_CommandPartitionedTopicMetadata'_unknownFields = y__})
  defMessage
    = CommandPartitionedTopicMetadata'_constructor
        {_CommandPartitionedTopicMetadata'topic = Data.ProtoLens.fieldDefault,
         _CommandPartitionedTopicMetadata'requestId = Data.ProtoLens.fieldDefault,
         _CommandPartitionedTopicMetadata'originalPrincipal = Prelude.Nothing,
         _CommandPartitionedTopicMetadata'originalAuthData = Prelude.Nothing,
         _CommandPartitionedTopicMetadata'originalAuthMethod = Prelude.Nothing,
         _CommandPartitionedTopicMetadata'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandPartitionedTopicMetadata
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser CommandPartitionedTopicMetadata
        loop x required'requestId required'topic
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id)
                               ((if required'topic then (:) "topic" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "topic"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"topic") y x)
                                  required'requestId
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                                  required'topic
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "original_principal"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"originalPrincipal") y x)
                                  required'requestId
                                  required'topic
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "original_auth_data"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"originalAuthData") y x)
                                  required'requestId
                                  required'topic
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "original_auth_method"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"originalAuthMethod") y x)
                                  required'requestId
                                  required'topic
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
                                  required'topic
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "CommandPartitionedTopicMetadata"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"topic") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'originalPrincipal") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8
                                _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'originalAuthData") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.Text.Encoding.encodeUtf8
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'originalAuthMethod") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData CommandPartitionedTopicMetadata where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandPartitionedTopicMetadata'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandPartitionedTopicMetadata'topic x__)
                (Control.DeepSeq.deepseq
                   (_CommandPartitionedTopicMetadata'requestId x__)
                   (Control.DeepSeq.deepseq
                      (_CommandPartitionedTopicMetadata'originalPrincipal x__)
                      (Control.DeepSeq.deepseq
                         (_CommandPartitionedTopicMetadata'originalAuthData x__)
                         (Control.DeepSeq.deepseq
                            (_CommandPartitionedTopicMetadata'originalAuthMethod x__) ())))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.partitions' @:: Lens' CommandPartitionedTopicMetadataResponse Data.Word.Word32@
         * 'Proto.PulsarApi_Fields.maybe'partitions' @:: Lens' CommandPartitionedTopicMetadataResponse (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandPartitionedTopicMetadataResponse Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.response' @:: Lens' CommandPartitionedTopicMetadataResponse CommandPartitionedTopicMetadataResponse'LookupType@
         * 'Proto.PulsarApi_Fields.maybe'response' @:: Lens' CommandPartitionedTopicMetadataResponse (Prelude.Maybe CommandPartitionedTopicMetadataResponse'LookupType)@
         * 'Proto.PulsarApi_Fields.error' @:: Lens' CommandPartitionedTopicMetadataResponse ServerError@
         * 'Proto.PulsarApi_Fields.maybe'error' @:: Lens' CommandPartitionedTopicMetadataResponse (Prelude.Maybe ServerError)@
         * 'Proto.PulsarApi_Fields.message' @:: Lens' CommandPartitionedTopicMetadataResponse Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'message' @:: Lens' CommandPartitionedTopicMetadataResponse (Prelude.Maybe Data.Text.Text)@ -}
data CommandPartitionedTopicMetadataResponse
  = CommandPartitionedTopicMetadataResponse'_constructor {_CommandPartitionedTopicMetadataResponse'partitions :: !(Prelude.Maybe Data.Word.Word32),
                                                          _CommandPartitionedTopicMetadataResponse'requestId :: !Data.Word.Word64,
                                                          _CommandPartitionedTopicMetadataResponse'response :: !(Prelude.Maybe CommandPartitionedTopicMetadataResponse'LookupType),
                                                          _CommandPartitionedTopicMetadataResponse'error :: !(Prelude.Maybe ServerError),
                                                          _CommandPartitionedTopicMetadataResponse'message :: !(Prelude.Maybe Data.Text.Text),
                                                          _CommandPartitionedTopicMetadataResponse'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandPartitionedTopicMetadataResponse where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandPartitionedTopicMetadataResponse "partitions" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandPartitionedTopicMetadataResponse'partitions
           (\ x__ y__
              -> x__
                   {_CommandPartitionedTopicMetadataResponse'partitions = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandPartitionedTopicMetadataResponse "maybe'partitions" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandPartitionedTopicMetadataResponse'partitions
           (\ x__ y__
              -> x__
                   {_CommandPartitionedTopicMetadataResponse'partitions = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandPartitionedTopicMetadataResponse "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandPartitionedTopicMetadataResponse'requestId
           (\ x__ y__
              -> x__ {_CommandPartitionedTopicMetadataResponse'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandPartitionedTopicMetadataResponse "response" CommandPartitionedTopicMetadataResponse'LookupType where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandPartitionedTopicMetadataResponse'response
           (\ x__ y__
              -> x__ {_CommandPartitionedTopicMetadataResponse'response = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandPartitionedTopicMetadataResponse "maybe'response" (Prelude.Maybe CommandPartitionedTopicMetadataResponse'LookupType) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandPartitionedTopicMetadataResponse'response
           (\ x__ y__
              -> x__ {_CommandPartitionedTopicMetadataResponse'response = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandPartitionedTopicMetadataResponse "error" ServerError where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandPartitionedTopicMetadataResponse'error
           (\ x__ y__
              -> x__ {_CommandPartitionedTopicMetadataResponse'error = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandPartitionedTopicMetadataResponse "maybe'error" (Prelude.Maybe ServerError) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandPartitionedTopicMetadataResponse'error
           (\ x__ y__
              -> x__ {_CommandPartitionedTopicMetadataResponse'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandPartitionedTopicMetadataResponse "message" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandPartitionedTopicMetadataResponse'message
           (\ x__ y__
              -> x__ {_CommandPartitionedTopicMetadataResponse'message = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandPartitionedTopicMetadataResponse "maybe'message" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandPartitionedTopicMetadataResponse'message
           (\ x__ y__
              -> x__ {_CommandPartitionedTopicMetadataResponse'message = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandPartitionedTopicMetadataResponse where
  messageName _
    = Data.Text.pack
        "pulsar.proto.CommandPartitionedTopicMetadataResponse"
  packedMessageDescriptor _
    = "\n\
      \'CommandPartitionedTopicMetadataResponse\DC2\RS\n\
      \\n\
      \partitions\CAN\SOH \SOH(\rR\n\
      \partitions\DC2\GS\n\
      \\n\
      \request_id\CAN\STX \STX(\EOTR\trequestId\DC2\\\n\
      \\bresponse\CAN\ETX \SOH(\SO2@.pulsar.proto.CommandPartitionedTopicMetadataResponse.LookupTypeR\bresponse\DC2/\n\
      \\ENQerror\CAN\EOT \SOH(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
      \\amessage\CAN\ENQ \SOH(\tR\amessage\"%\n\
      \\n\
      \LookupType\DC2\v\n\
      \\aSuccess\DLE\NUL\DC2\n\
      \\n\
      \\ACKFailed\DLE\SOH"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        partitions__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "partitions"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'partitions")) ::
              Data.ProtoLens.FieldDescriptor CommandPartitionedTopicMetadataResponse
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandPartitionedTopicMetadataResponse
        response__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "response"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor CommandPartitionedTopicMetadataResponse'LookupType)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'response")) ::
              Data.ProtoLens.FieldDescriptor CommandPartitionedTopicMetadataResponse
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ServerError)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'error")) ::
              Data.ProtoLens.FieldDescriptor CommandPartitionedTopicMetadataResponse
        message__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'message")) ::
              Data.ProtoLens.FieldDescriptor CommandPartitionedTopicMetadataResponse
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, partitions__field_descriptor),
           (Data.ProtoLens.Tag 2, requestId__field_descriptor),
           (Data.ProtoLens.Tag 3, response__field_descriptor),
           (Data.ProtoLens.Tag 4, error__field_descriptor),
           (Data.ProtoLens.Tag 5, message__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandPartitionedTopicMetadataResponse'_unknownFields
        (\ x__ y__
           -> x__
                {_CommandPartitionedTopicMetadataResponse'_unknownFields = y__})
  defMessage
    = CommandPartitionedTopicMetadataResponse'_constructor
        {_CommandPartitionedTopicMetadataResponse'partitions = Prelude.Nothing,
         _CommandPartitionedTopicMetadataResponse'requestId = Data.ProtoLens.fieldDefault,
         _CommandPartitionedTopicMetadataResponse'response = Prelude.Nothing,
         _CommandPartitionedTopicMetadataResponse'error = Prelude.Nothing,
         _CommandPartitionedTopicMetadataResponse'message = Prelude.Nothing,
         _CommandPartitionedTopicMetadataResponse'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandPartitionedTopicMetadataResponse
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandPartitionedTopicMetadataResponse
        loop x required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "partitions"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"partitions") y x)
                                  required'requestId
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "response"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"response") y x)
                                  required'requestId
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                                  required'requestId
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "message"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"message") y x)
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "CommandPartitionedTopicMetadataResponse"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'partitions") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'response") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                Prelude.fromEnum
                                _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'error") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                   Prelude.fromEnum
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'message") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData CommandPartitionedTopicMetadataResponse where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandPartitionedTopicMetadataResponse'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandPartitionedTopicMetadataResponse'partitions x__)
                (Control.DeepSeq.deepseq
                   (_CommandPartitionedTopicMetadataResponse'requestId x__)
                   (Control.DeepSeq.deepseq
                      (_CommandPartitionedTopicMetadataResponse'response x__)
                      (Control.DeepSeq.deepseq
                         (_CommandPartitionedTopicMetadataResponse'error x__)
                         (Control.DeepSeq.deepseq
                            (_CommandPartitionedTopicMetadataResponse'message x__) ())))))
data CommandPartitionedTopicMetadataResponse'LookupType
  = CommandPartitionedTopicMetadataResponse'Success |
    CommandPartitionedTopicMetadataResponse'Failed
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum CommandPartitionedTopicMetadataResponse'LookupType where
  maybeToEnum 0
    = Prelude.Just CommandPartitionedTopicMetadataResponse'Success
  maybeToEnum 1
    = Prelude.Just CommandPartitionedTopicMetadataResponse'Failed
  maybeToEnum _ = Prelude.Nothing
  showEnum CommandPartitionedTopicMetadataResponse'Success
    = "Success"
  showEnum CommandPartitionedTopicMetadataResponse'Failed = "Failed"
  readEnum k
    | (Prelude.==) k "Success"
    = Prelude.Just CommandPartitionedTopicMetadataResponse'Success
    | (Prelude.==) k "Failed"
    = Prelude.Just CommandPartitionedTopicMetadataResponse'Failed
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded CommandPartitionedTopicMetadataResponse'LookupType where
  minBound = CommandPartitionedTopicMetadataResponse'Success
  maxBound = CommandPartitionedTopicMetadataResponse'Failed
instance Prelude.Enum CommandPartitionedTopicMetadataResponse'LookupType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum LookupType: " (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum CommandPartitionedTopicMetadataResponse'Success = 0
  fromEnum CommandPartitionedTopicMetadataResponse'Failed = 1
  succ CommandPartitionedTopicMetadataResponse'Failed
    = Prelude.error
        "CommandPartitionedTopicMetadataResponse'LookupType.succ: bad argument CommandPartitionedTopicMetadataResponse'Failed. This value would be out of bounds."
  succ CommandPartitionedTopicMetadataResponse'Success
    = CommandPartitionedTopicMetadataResponse'Failed
  pred CommandPartitionedTopicMetadataResponse'Success
    = Prelude.error
        "CommandPartitionedTopicMetadataResponse'LookupType.pred: bad argument CommandPartitionedTopicMetadataResponse'Success. This value would be out of bounds."
  pred CommandPartitionedTopicMetadataResponse'Failed
    = CommandPartitionedTopicMetadataResponse'Success
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault CommandPartitionedTopicMetadataResponse'LookupType where
  fieldDefault = CommandPartitionedTopicMetadataResponse'Success
instance Control.DeepSeq.NFData CommandPartitionedTopicMetadataResponse'LookupType where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
      -}
data CommandPing
  = CommandPing'_constructor {_CommandPing'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandPing where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message CommandPing where
  messageName _ = Data.Text.pack "pulsar.proto.CommandPing"
  packedMessageDescriptor _
    = "\n\
      \\vCommandPing"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandPing'_unknownFields
        (\ x__ y__ -> x__ {_CommandPing'_unknownFields = y__})
  defMessage
    = CommandPing'_constructor {_CommandPing'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandPing -> Data.ProtoLens.Encoding.Bytes.Parser CommandPing
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "CommandPing"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData CommandPing where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq (_CommandPing'_unknownFields x__) ()
{- | Fields :
      -}
data CommandPong
  = CommandPong'_constructor {_CommandPong'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandPong where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message CommandPong where
  messageName _ = Data.Text.pack "pulsar.proto.CommandPong"
  packedMessageDescriptor _
    = "\n\
      \\vCommandPong"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandPong'_unknownFields
        (\ x__ y__ -> x__ {_CommandPong'_unknownFields = y__})
  defMessage
    = CommandPong'_constructor {_CommandPong'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandPong -> Data.ProtoLens.Encoding.Bytes.Parser CommandPong
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "CommandPong"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData CommandPong where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq (_CommandPong'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.topic' @:: Lens' CommandProducer Data.Text.Text@
         * 'Proto.PulsarApi_Fields.producerId' @:: Lens' CommandProducer Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandProducer Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.producerName' @:: Lens' CommandProducer Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'producerName' @:: Lens' CommandProducer (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.encrypted' @:: Lens' CommandProducer Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'encrypted' @:: Lens' CommandProducer (Prelude.Maybe Prelude.Bool)@
         * 'Proto.PulsarApi_Fields.metadata' @:: Lens' CommandProducer [KeyValue]@
         * 'Proto.PulsarApi_Fields.vec'metadata' @:: Lens' CommandProducer (Data.Vector.Vector KeyValue)@
         * 'Proto.PulsarApi_Fields.schema' @:: Lens' CommandProducer Schema@
         * 'Proto.PulsarApi_Fields.maybe'schema' @:: Lens' CommandProducer (Prelude.Maybe Schema)@
         * 'Proto.PulsarApi_Fields.epoch' @:: Lens' CommandProducer Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'epoch' @:: Lens' CommandProducer (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.userProvidedProducerName' @:: Lens' CommandProducer Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'userProvidedProducerName' @:: Lens' CommandProducer (Prelude.Maybe Prelude.Bool)@ -}
data CommandProducer
  = CommandProducer'_constructor {_CommandProducer'topic :: !Data.Text.Text,
                                  _CommandProducer'producerId :: !Data.Word.Word64,
                                  _CommandProducer'requestId :: !Data.Word.Word64,
                                  _CommandProducer'producerName :: !(Prelude.Maybe Data.Text.Text),
                                  _CommandProducer'encrypted :: !(Prelude.Maybe Prelude.Bool),
                                  _CommandProducer'metadata :: !(Data.Vector.Vector KeyValue),
                                  _CommandProducer'schema :: !(Prelude.Maybe Schema),
                                  _CommandProducer'epoch :: !(Prelude.Maybe Data.Word.Word64),
                                  _CommandProducer'userProvidedProducerName :: !(Prelude.Maybe Prelude.Bool),
                                  _CommandProducer'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandProducer where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandProducer "topic" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducer'topic
           (\ x__ y__ -> x__ {_CommandProducer'topic = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandProducer "producerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducer'producerId
           (\ x__ y__ -> x__ {_CommandProducer'producerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandProducer "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducer'requestId
           (\ x__ y__ -> x__ {_CommandProducer'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandProducer "producerName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducer'producerName
           (\ x__ y__ -> x__ {_CommandProducer'producerName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandProducer "maybe'producerName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducer'producerName
           (\ x__ y__ -> x__ {_CommandProducer'producerName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandProducer "encrypted" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducer'encrypted
           (\ x__ y__ -> x__ {_CommandProducer'encrypted = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField CommandProducer "maybe'encrypted" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducer'encrypted
           (\ x__ y__ -> x__ {_CommandProducer'encrypted = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandProducer "metadata" [KeyValue] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducer'metadata
           (\ x__ y__ -> x__ {_CommandProducer'metadata = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField CommandProducer "vec'metadata" (Data.Vector.Vector KeyValue) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducer'metadata
           (\ x__ y__ -> x__ {_CommandProducer'metadata = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandProducer "schema" Schema where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducer'schema
           (\ x__ y__ -> x__ {_CommandProducer'schema = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField CommandProducer "maybe'schema" (Prelude.Maybe Schema) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducer'schema
           (\ x__ y__ -> x__ {_CommandProducer'schema = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandProducer "epoch" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducer'epoch
           (\ x__ y__ -> x__ {_CommandProducer'epoch = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandProducer "maybe'epoch" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducer'epoch
           (\ x__ y__ -> x__ {_CommandProducer'epoch = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandProducer "userProvidedProducerName" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducer'userProvidedProducerName
           (\ x__ y__
              -> x__ {_CommandProducer'userProvidedProducerName = y__}))
        (Data.ProtoLens.maybeLens Prelude.True)
instance Data.ProtoLens.Field.HasField CommandProducer "maybe'userProvidedProducerName" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducer'userProvidedProducerName
           (\ x__ y__
              -> x__ {_CommandProducer'userProvidedProducerName = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandProducer where
  messageName _ = Data.Text.pack "pulsar.proto.CommandProducer"
  packedMessageDescriptor _
    = "\n\
      \\SICommandProducer\DC2\DC4\n\
      \\ENQtopic\CAN\SOH \STX(\tR\ENQtopic\DC2\US\n\
      \\vproducer_id\CAN\STX \STX(\EOTR\n\
      \producerId\DC2\GS\n\
      \\n\
      \request_id\CAN\ETX \STX(\EOTR\trequestId\DC2#\n\
      \\rproducer_name\CAN\EOT \SOH(\tR\fproducerName\DC2#\n\
      \\tencrypted\CAN\ENQ \SOH(\b:\ENQfalseR\tencrypted\DC22\n\
      \\bmetadata\CAN\ACK \ETX(\v2\SYN.pulsar.proto.KeyValueR\bmetadata\DC2,\n\
      \\ACKschema\CAN\a \SOH(\v2\DC4.pulsar.proto.SchemaR\ACKschema\DC2\ETB\n\
      \\ENQepoch\CAN\b \SOH(\EOT:\SOH0R\ENQepoch\DC2C\n\
      \\ESCuser_provided_producer_name\CAN\t \SOH(\b:\EOTtrueR\CANuserProvidedProducerName"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        topic__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "topic"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"topic")) ::
              Data.ProtoLens.FieldDescriptor CommandProducer
        producerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "producer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"producerId")) ::
              Data.ProtoLens.FieldDescriptor CommandProducer
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandProducer
        producerName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "producer_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'producerName")) ::
              Data.ProtoLens.FieldDescriptor CommandProducer
        encrypted__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "encrypted"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'encrypted")) ::
              Data.ProtoLens.FieldDescriptor CommandProducer
        metadata__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "metadata"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor KeyValue)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"metadata")) ::
              Data.ProtoLens.FieldDescriptor CommandProducer
        schema__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "schema"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Schema)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'schema")) ::
              Data.ProtoLens.FieldDescriptor CommandProducer
        epoch__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "epoch"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'epoch")) ::
              Data.ProtoLens.FieldDescriptor CommandProducer
        userProvidedProducerName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "user_provided_producer_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'userProvidedProducerName")) ::
              Data.ProtoLens.FieldDescriptor CommandProducer
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, topic__field_descriptor),
           (Data.ProtoLens.Tag 2, producerId__field_descriptor),
           (Data.ProtoLens.Tag 3, requestId__field_descriptor),
           (Data.ProtoLens.Tag 4, producerName__field_descriptor),
           (Data.ProtoLens.Tag 5, encrypted__field_descriptor),
           (Data.ProtoLens.Tag 6, metadata__field_descriptor),
           (Data.ProtoLens.Tag 7, schema__field_descriptor),
           (Data.ProtoLens.Tag 8, epoch__field_descriptor),
           (Data.ProtoLens.Tag 9, userProvidedProducerName__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandProducer'_unknownFields
        (\ x__ y__ -> x__ {_CommandProducer'_unknownFields = y__})
  defMessage
    = CommandProducer'_constructor
        {_CommandProducer'topic = Data.ProtoLens.fieldDefault,
         _CommandProducer'producerId = Data.ProtoLens.fieldDefault,
         _CommandProducer'requestId = Data.ProtoLens.fieldDefault,
         _CommandProducer'producerName = Prelude.Nothing,
         _CommandProducer'encrypted = Prelude.Nothing,
         _CommandProducer'metadata = Data.Vector.Generic.empty,
         _CommandProducer'schema = Prelude.Nothing,
         _CommandProducer'epoch = Prelude.Nothing,
         _CommandProducer'userProvidedProducerName = Prelude.Nothing,
         _CommandProducer'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandProducer
          -> Prelude.Bool
             -> Prelude.Bool
                -> Prelude.Bool
                   -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld KeyValue
                      -> Data.ProtoLens.Encoding.Bytes.Parser CommandProducer
        loop
          x
          required'producerId
          required'requestId
          required'topic
          mutable'metadata
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'metadata <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                              mutable'metadata)
                      (let
                         missing
                           = (if required'producerId then (:) "producer_id" else Prelude.id)
                               ((if required'requestId then (:) "request_id" else Prelude.id)
                                  ((if required'topic then (:) "topic" else Prelude.id) []))
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'metadata") frozen'metadata x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "topic"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"topic") y x)
                                  required'producerId
                                  required'requestId
                                  Prelude.False
                                  mutable'metadata
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "producer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"producerId") y x)
                                  Prelude.False
                                  required'requestId
                                  required'topic
                                  mutable'metadata
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  required'producerId
                                  Prelude.False
                                  required'topic
                                  mutable'metadata
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "producer_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"producerName") y x)
                                  required'producerId
                                  required'requestId
                                  required'topic
                                  mutable'metadata
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "encrypted"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"encrypted") y x)
                                  required'producerId
                                  required'requestId
                                  required'topic
                                  mutable'metadata
                        50
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "metadata"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'metadata y)
                                loop x required'producerId required'requestId required'topic v
                        58
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "schema"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"schema") y x)
                                  required'producerId
                                  required'requestId
                                  required'topic
                                  mutable'metadata
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "epoch"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"epoch") y x)
                                  required'producerId
                                  required'requestId
                                  required'topic
                                  mutable'metadata
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "user_provided_producer_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"userProvidedProducerName") y x)
                                  required'producerId
                                  required'requestId
                                  required'topic
                                  mutable'metadata
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'producerId
                                  required'requestId
                                  required'topic
                                  mutable'metadata
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'metadata <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage
                Prelude.True
                Prelude.True
                Prelude.True
                mutable'metadata)
          "CommandProducer"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"topic") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"producerId") _x)))
                ((Data.Monoid.<>)
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                         (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'producerName") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.Text.Encoding.encodeUtf8
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'encrypted") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (\ b -> if b then 1 else 0)
                                      _v))
                         ((Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                               (\ _v
                                  -> (Data.Monoid.<>)
                                       (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                       ((Prelude..)
                                          (\ bs
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     (Prelude.fromIntegral
                                                        (Data.ByteString.length bs)))
                                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                          Data.ProtoLens.encodeMessage
                                          _v))
                               (Lens.Family2.view
                                  (Data.ProtoLens.Field.field @"vec'metadata") _x))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'schema") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                         ((Prelude..)
                                            (\ bs
                                               -> (Data.Monoid.<>)
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                       (Prelude.fromIntegral
                                                          (Data.ByteString.length bs)))
                                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Data.ProtoLens.encodeMessage
                                            _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'epoch") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field
                                               @"maybe'userProvidedProducerName")
                                            _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  (\ b -> if b then 1 else 0)
                                                  _v))
                                     (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                        (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))))
instance Control.DeepSeq.NFData CommandProducer where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandProducer'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandProducer'topic x__)
                (Control.DeepSeq.deepseq
                   (_CommandProducer'producerId x__)
                   (Control.DeepSeq.deepseq
                      (_CommandProducer'requestId x__)
                      (Control.DeepSeq.deepseq
                         (_CommandProducer'producerName x__)
                         (Control.DeepSeq.deepseq
                            (_CommandProducer'encrypted x__)
                            (Control.DeepSeq.deepseq
                               (_CommandProducer'metadata x__)
                               (Control.DeepSeq.deepseq
                                  (_CommandProducer'schema x__)
                                  (Control.DeepSeq.deepseq
                                     (_CommandProducer'epoch x__)
                                     (Control.DeepSeq.deepseq
                                        (_CommandProducer'userProvidedProducerName x__) ())))))))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandProducerSuccess Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.producerName' @:: Lens' CommandProducerSuccess Data.Text.Text@
         * 'Proto.PulsarApi_Fields.lastSequenceId' @:: Lens' CommandProducerSuccess Data.Int.Int64@
         * 'Proto.PulsarApi_Fields.maybe'lastSequenceId' @:: Lens' CommandProducerSuccess (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.PulsarApi_Fields.schemaVersion' @:: Lens' CommandProducerSuccess Data.ByteString.ByteString@
         * 'Proto.PulsarApi_Fields.maybe'schemaVersion' @:: Lens' CommandProducerSuccess (Prelude.Maybe Data.ByteString.ByteString)@ -}
data CommandProducerSuccess
  = CommandProducerSuccess'_constructor {_CommandProducerSuccess'requestId :: !Data.Word.Word64,
                                         _CommandProducerSuccess'producerName :: !Data.Text.Text,
                                         _CommandProducerSuccess'lastSequenceId :: !(Prelude.Maybe Data.Int.Int64),
                                         _CommandProducerSuccess'schemaVersion :: !(Prelude.Maybe Data.ByteString.ByteString),
                                         _CommandProducerSuccess'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandProducerSuccess where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandProducerSuccess "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducerSuccess'requestId
           (\ x__ y__ -> x__ {_CommandProducerSuccess'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandProducerSuccess "producerName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducerSuccess'producerName
           (\ x__ y__ -> x__ {_CommandProducerSuccess'producerName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandProducerSuccess "lastSequenceId" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducerSuccess'lastSequenceId
           (\ x__ y__ -> x__ {_CommandProducerSuccess'lastSequenceId = y__}))
        (Data.ProtoLens.maybeLens (-1))
instance Data.ProtoLens.Field.HasField CommandProducerSuccess "maybe'lastSequenceId" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducerSuccess'lastSequenceId
           (\ x__ y__ -> x__ {_CommandProducerSuccess'lastSequenceId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandProducerSuccess "schemaVersion" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducerSuccess'schemaVersion
           (\ x__ y__ -> x__ {_CommandProducerSuccess'schemaVersion = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandProducerSuccess "maybe'schemaVersion" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandProducerSuccess'schemaVersion
           (\ x__ y__ -> x__ {_CommandProducerSuccess'schemaVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandProducerSuccess where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandProducerSuccess"
  packedMessageDescriptor _
    = "\n\
      \\SYNCommandProducerSuccess\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2#\n\
      \\rproducer_name\CAN\STX \STX(\tR\fproducerName\DC2,\n\
      \\DLElast_sequence_id\CAN\ETX \SOH(\ETX:\STX-1R\SOlastSequenceId\DC2%\n\
      \\SOschema_version\CAN\EOT \SOH(\fR\rschemaVersion"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandProducerSuccess
        producerName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "producer_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"producerName")) ::
              Data.ProtoLens.FieldDescriptor CommandProducerSuccess
        lastSequenceId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "last_sequence_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lastSequenceId")) ::
              Data.ProtoLens.FieldDescriptor CommandProducerSuccess
        schemaVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "schema_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'schemaVersion")) ::
              Data.ProtoLens.FieldDescriptor CommandProducerSuccess
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, producerName__field_descriptor),
           (Data.ProtoLens.Tag 3, lastSequenceId__field_descriptor),
           (Data.ProtoLens.Tag 4, schemaVersion__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandProducerSuccess'_unknownFields
        (\ x__ y__ -> x__ {_CommandProducerSuccess'_unknownFields = y__})
  defMessage
    = CommandProducerSuccess'_constructor
        {_CommandProducerSuccess'requestId = Data.ProtoLens.fieldDefault,
         _CommandProducerSuccess'producerName = Data.ProtoLens.fieldDefault,
         _CommandProducerSuccess'lastSequenceId = Prelude.Nothing,
         _CommandProducerSuccess'schemaVersion = Prelude.Nothing,
         _CommandProducerSuccess'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandProducerSuccess
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser CommandProducerSuccess
        loop x required'producerName required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'producerName then
                                  (:) "producer_name"
                              else
                                  Prelude.id)
                               ((if required'requestId then (:) "request_id" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  required'producerName
                                  Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "producer_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"producerName") y x)
                                  Prelude.False
                                  required'requestId
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "last_sequence_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"lastSequenceId") y x)
                                  required'producerName
                                  required'requestId
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "schema_version"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"schemaVersion") y x)
                                  required'producerName
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'producerName
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "CommandProducerSuccess"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((Prelude..)
                      (\ bs
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      Data.Text.Encoding.encodeUtf8
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"producerName") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'lastSequenceId") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'schemaVersion") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData CommandProducerSuccess where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandProducerSuccess'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandProducerSuccess'requestId x__)
                (Control.DeepSeq.deepseq
                   (_CommandProducerSuccess'producerName x__)
                   (Control.DeepSeq.deepseq
                      (_CommandProducerSuccess'lastSequenceId x__)
                      (Control.DeepSeq.deepseq
                         (_CommandProducerSuccess'schemaVersion x__) ()))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.consumerId' @:: Lens' CommandReachedEndOfTopic Data.Word.Word64@ -}
data CommandReachedEndOfTopic
  = CommandReachedEndOfTopic'_constructor {_CommandReachedEndOfTopic'consumerId :: !Data.Word.Word64,
                                           _CommandReachedEndOfTopic'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandReachedEndOfTopic where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandReachedEndOfTopic "consumerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandReachedEndOfTopic'consumerId
           (\ x__ y__ -> x__ {_CommandReachedEndOfTopic'consumerId = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandReachedEndOfTopic where
  messageName _
    = Data.Text.pack "pulsar.proto.CommandReachedEndOfTopic"
  packedMessageDescriptor _
    = "\n\
      \\CANCommandReachedEndOfTopic\DC2\US\n\
      \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
      \consumerId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        consumerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "consumer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"consumerId")) ::
              Data.ProtoLens.FieldDescriptor CommandReachedEndOfTopic
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, consumerId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandReachedEndOfTopic'_unknownFields
        (\ x__ y__ -> x__ {_CommandReachedEndOfTopic'_unknownFields = y__})
  defMessage
    = CommandReachedEndOfTopic'_constructor
        {_CommandReachedEndOfTopic'consumerId = Data.ProtoLens.fieldDefault,
         _CommandReachedEndOfTopic'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandReachedEndOfTopic
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandReachedEndOfTopic
        loop x required'consumerId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'consumerId then (:) "consumer_id" else Prelude.id)
                               []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "consumer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"consumerId") y x)
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'consumerId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "CommandReachedEndOfTopic"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"consumerId") _x)))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData CommandReachedEndOfTopic where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandReachedEndOfTopic'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandReachedEndOfTopic'consumerId x__) ())
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.consumerId' @:: Lens' CommandRedeliverUnacknowledgedMessages Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.messageIds' @:: Lens' CommandRedeliverUnacknowledgedMessages [MessageIdData]@
         * 'Proto.PulsarApi_Fields.vec'messageIds' @:: Lens' CommandRedeliverUnacknowledgedMessages (Data.Vector.Vector MessageIdData)@ -}
data CommandRedeliverUnacknowledgedMessages
  = CommandRedeliverUnacknowledgedMessages'_constructor {_CommandRedeliverUnacknowledgedMessages'consumerId :: !Data.Word.Word64,
                                                         _CommandRedeliverUnacknowledgedMessages'messageIds :: !(Data.Vector.Vector MessageIdData),
                                                         _CommandRedeliverUnacknowledgedMessages'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandRedeliverUnacknowledgedMessages where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandRedeliverUnacknowledgedMessages "consumerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandRedeliverUnacknowledgedMessages'consumerId
           (\ x__ y__
              -> x__ {_CommandRedeliverUnacknowledgedMessages'consumerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandRedeliverUnacknowledgedMessages "messageIds" [MessageIdData] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandRedeliverUnacknowledgedMessages'messageIds
           (\ x__ y__
              -> x__ {_CommandRedeliverUnacknowledgedMessages'messageIds = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField CommandRedeliverUnacknowledgedMessages "vec'messageIds" (Data.Vector.Vector MessageIdData) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandRedeliverUnacknowledgedMessages'messageIds
           (\ x__ y__
              -> x__ {_CommandRedeliverUnacknowledgedMessages'messageIds = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandRedeliverUnacknowledgedMessages where
  messageName _
    = Data.Text.pack
        "pulsar.proto.CommandRedeliverUnacknowledgedMessages"
  packedMessageDescriptor _
    = "\n\
      \&CommandRedeliverUnacknowledgedMessages\DC2\US\n\
      \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
      \consumerId\DC2<\n\
      \\vmessage_ids\CAN\STX \ETX(\v2\ESC.pulsar.proto.MessageIdDataR\n\
      \messageIds"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        consumerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "consumer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"consumerId")) ::
              Data.ProtoLens.FieldDescriptor CommandRedeliverUnacknowledgedMessages
        messageIds__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message_ids"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor MessageIdData)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"messageIds")) ::
              Data.ProtoLens.FieldDescriptor CommandRedeliverUnacknowledgedMessages
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, consumerId__field_descriptor),
           (Data.ProtoLens.Tag 2, messageIds__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandRedeliverUnacknowledgedMessages'_unknownFields
        (\ x__ y__
           -> x__
                {_CommandRedeliverUnacknowledgedMessages'_unknownFields = y__})
  defMessage
    = CommandRedeliverUnacknowledgedMessages'_constructor
        {_CommandRedeliverUnacknowledgedMessages'consumerId = Data.ProtoLens.fieldDefault,
         _CommandRedeliverUnacknowledgedMessages'messageIds = Data.Vector.Generic.empty,
         _CommandRedeliverUnacknowledgedMessages'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandRedeliverUnacknowledgedMessages
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld MessageIdData
                -> Data.ProtoLens.Encoding.Bytes.Parser CommandRedeliverUnacknowledgedMessages
        loop x required'consumerId mutable'messageIds
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'messageIds <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                mutable'messageIds)
                      (let
                         missing
                           = (if required'consumerId then (:) "consumer_id" else Prelude.id)
                               []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'messageIds")
                              frozen'messageIds
                              x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "consumer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"consumerId") y x)
                                  Prelude.False
                                  mutable'messageIds
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "message_ids"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'messageIds y)
                                loop x required'consumerId v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'consumerId
                                  mutable'messageIds
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'messageIds <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage Prelude.True mutable'messageIds)
          "CommandRedeliverUnacknowledgedMessages"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"consumerId") _x)))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.ProtoLens.encodeMessage
                              _v))
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"vec'messageIds") _x))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData CommandRedeliverUnacknowledgedMessages where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandRedeliverUnacknowledgedMessages'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandRedeliverUnacknowledgedMessages'consumerId x__)
                (Control.DeepSeq.deepseq
                   (_CommandRedeliverUnacknowledgedMessages'messageIds x__) ()))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.consumerId' @:: Lens' CommandSeek Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandSeek Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.messageId' @:: Lens' CommandSeek MessageIdData@
         * 'Proto.PulsarApi_Fields.maybe'messageId' @:: Lens' CommandSeek (Prelude.Maybe MessageIdData)@
         * 'Proto.PulsarApi_Fields.messagePublishTime' @:: Lens' CommandSeek Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'messagePublishTime' @:: Lens' CommandSeek (Prelude.Maybe Data.Word.Word64)@ -}
data CommandSeek
  = CommandSeek'_constructor {_CommandSeek'consumerId :: !Data.Word.Word64,
                              _CommandSeek'requestId :: !Data.Word.Word64,
                              _CommandSeek'messageId :: !(Prelude.Maybe MessageIdData),
                              _CommandSeek'messagePublishTime :: !(Prelude.Maybe Data.Word.Word64),
                              _CommandSeek'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandSeek where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandSeek "consumerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSeek'consumerId
           (\ x__ y__ -> x__ {_CommandSeek'consumerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSeek "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSeek'requestId
           (\ x__ y__ -> x__ {_CommandSeek'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSeek "messageId" MessageIdData where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSeek'messageId
           (\ x__ y__ -> x__ {_CommandSeek'messageId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField CommandSeek "maybe'messageId" (Prelude.Maybe MessageIdData) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSeek'messageId
           (\ x__ y__ -> x__ {_CommandSeek'messageId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSeek "messagePublishTime" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSeek'messagePublishTime
           (\ x__ y__ -> x__ {_CommandSeek'messagePublishTime = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandSeek "maybe'messagePublishTime" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSeek'messagePublishTime
           (\ x__ y__ -> x__ {_CommandSeek'messagePublishTime = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandSeek where
  messageName _ = Data.Text.pack "pulsar.proto.CommandSeek"
  packedMessageDescriptor _
    = "\n\
      \\vCommandSeek\DC2\US\n\
      \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
      \consumerId\DC2\GS\n\
      \\n\
      \request_id\CAN\STX \STX(\EOTR\trequestId\DC2:\n\
      \\n\
      \message_id\CAN\ETX \SOH(\v2\ESC.pulsar.proto.MessageIdDataR\tmessageId\DC20\n\
      \\DC4message_publish_time\CAN\EOT \SOH(\EOTR\DC2messagePublishTime"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        consumerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "consumer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"consumerId")) ::
              Data.ProtoLens.FieldDescriptor CommandSeek
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandSeek
        messageId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message_id"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor MessageIdData)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'messageId")) ::
              Data.ProtoLens.FieldDescriptor CommandSeek
        messagePublishTime__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message_publish_time"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'messagePublishTime")) ::
              Data.ProtoLens.FieldDescriptor CommandSeek
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, consumerId__field_descriptor),
           (Data.ProtoLens.Tag 2, requestId__field_descriptor),
           (Data.ProtoLens.Tag 3, messageId__field_descriptor),
           (Data.ProtoLens.Tag 4, messagePublishTime__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandSeek'_unknownFields
        (\ x__ y__ -> x__ {_CommandSeek'_unknownFields = y__})
  defMessage
    = CommandSeek'_constructor
        {_CommandSeek'consumerId = Data.ProtoLens.fieldDefault,
         _CommandSeek'requestId = Data.ProtoLens.fieldDefault,
         _CommandSeek'messageId = Prelude.Nothing,
         _CommandSeek'messagePublishTime = Prelude.Nothing,
         _CommandSeek'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandSeek
          -> Prelude.Bool
             -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser CommandSeek
        loop x required'consumerId required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'consumerId then (:) "consumer_id" else Prelude.id)
                               ((if required'requestId then (:) "request_id" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "consumer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"consumerId") y x)
                                  Prelude.False
                                  required'requestId
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  required'consumerId
                                  Prelude.False
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "message_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"messageId") y x)
                                  required'consumerId
                                  required'requestId
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt
                                       "message_publish_time"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"messagePublishTime") y x)
                                  required'consumerId
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'consumerId
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "CommandSeek"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"consumerId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'messageId") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.ProtoLens.encodeMessage
                                _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'messagePublishTime") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData CommandSeek where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandSeek'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandSeek'consumerId x__)
                (Control.DeepSeq.deepseq
                   (_CommandSeek'requestId x__)
                   (Control.DeepSeq.deepseq
                      (_CommandSeek'messageId x__)
                      (Control.DeepSeq.deepseq
                         (_CommandSeek'messagePublishTime x__) ()))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.producerId' @:: Lens' CommandSend Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.sequenceId' @:: Lens' CommandSend Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.numMessages' @:: Lens' CommandSend Data.Int.Int32@
         * 'Proto.PulsarApi_Fields.maybe'numMessages' @:: Lens' CommandSend (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.PulsarApi_Fields.txnidLeastBits' @:: Lens' CommandSend Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidLeastBits' @:: Lens' CommandSend (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.txnidMostBits' @:: Lens' CommandSend Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidMostBits' @:: Lens' CommandSend (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.highestSequenceId' @:: Lens' CommandSend Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'highestSequenceId' @:: Lens' CommandSend (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.isChunk' @:: Lens' CommandSend Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'isChunk' @:: Lens' CommandSend (Prelude.Maybe Prelude.Bool)@ -}
data CommandSend
  = CommandSend'_constructor {_CommandSend'producerId :: !Data.Word.Word64,
                              _CommandSend'sequenceId :: !Data.Word.Word64,
                              _CommandSend'numMessages :: !(Prelude.Maybe Data.Int.Int32),
                              _CommandSend'txnidLeastBits :: !(Prelude.Maybe Data.Word.Word64),
                              _CommandSend'txnidMostBits :: !(Prelude.Maybe Data.Word.Word64),
                              _CommandSend'highestSequenceId :: !(Prelude.Maybe Data.Word.Word64),
                              _CommandSend'isChunk :: !(Prelude.Maybe Prelude.Bool),
                              _CommandSend'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandSend where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandSend "producerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSend'producerId
           (\ x__ y__ -> x__ {_CommandSend'producerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSend "sequenceId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSend'sequenceId
           (\ x__ y__ -> x__ {_CommandSend'sequenceId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSend "numMessages" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSend'numMessages
           (\ x__ y__ -> x__ {_CommandSend'numMessages = y__}))
        (Data.ProtoLens.maybeLens 1)
instance Data.ProtoLens.Field.HasField CommandSend "maybe'numMessages" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSend'numMessages
           (\ x__ y__ -> x__ {_CommandSend'numMessages = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSend "txnidLeastBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSend'txnidLeastBits
           (\ x__ y__ -> x__ {_CommandSend'txnidLeastBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandSend "maybe'txnidLeastBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSend'txnidLeastBits
           (\ x__ y__ -> x__ {_CommandSend'txnidLeastBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSend "txnidMostBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSend'txnidMostBits
           (\ x__ y__ -> x__ {_CommandSend'txnidMostBits = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandSend "maybe'txnidMostBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSend'txnidMostBits
           (\ x__ y__ -> x__ {_CommandSend'txnidMostBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSend "highestSequenceId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSend'highestSequenceId
           (\ x__ y__ -> x__ {_CommandSend'highestSequenceId = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandSend "maybe'highestSequenceId" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSend'highestSequenceId
           (\ x__ y__ -> x__ {_CommandSend'highestSequenceId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSend "isChunk" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSend'isChunk
           (\ x__ y__ -> x__ {_CommandSend'isChunk = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField CommandSend "maybe'isChunk" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSend'isChunk
           (\ x__ y__ -> x__ {_CommandSend'isChunk = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandSend where
  messageName _ = Data.Text.pack "pulsar.proto.CommandSend"
  packedMessageDescriptor _
    = "\n\
      \\vCommandSend\DC2\US\n\
      \\vproducer_id\CAN\SOH \STX(\EOTR\n\
      \producerId\DC2\US\n\
      \\vsequence_id\CAN\STX \STX(\EOTR\n\
      \sequenceId\DC2$\n\
      \\fnum_messages\CAN\ETX \SOH(\ENQ:\SOH1R\vnumMessages\DC2+\n\
      \\DLEtxnid_least_bits\CAN\EOT \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
      \\SItxnid_most_bits\CAN\ENQ \SOH(\EOT:\SOH0R\rtxnidMostBits\DC21\n\
      \\DC3highest_sequence_id\CAN\ACK \SOH(\EOT:\SOH0R\DC1highestSequenceId\DC2 \n\
      \\bis_chunk\CAN\a \SOH(\b:\ENQfalseR\aisChunk"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        producerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "producer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"producerId")) ::
              Data.ProtoLens.FieldDescriptor CommandSend
        sequenceId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sequence_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"sequenceId")) ::
              Data.ProtoLens.FieldDescriptor CommandSend
        numMessages__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "num_messages"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'numMessages")) ::
              Data.ProtoLens.FieldDescriptor CommandSend
        txnidLeastBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_least_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidLeastBits")) ::
              Data.ProtoLens.FieldDescriptor CommandSend
        txnidMostBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_most_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidMostBits")) ::
              Data.ProtoLens.FieldDescriptor CommandSend
        highestSequenceId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "highest_sequence_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'highestSequenceId")) ::
              Data.ProtoLens.FieldDescriptor CommandSend
        isChunk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "is_chunk"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'isChunk")) ::
              Data.ProtoLens.FieldDescriptor CommandSend
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, producerId__field_descriptor),
           (Data.ProtoLens.Tag 2, sequenceId__field_descriptor),
           (Data.ProtoLens.Tag 3, numMessages__field_descriptor),
           (Data.ProtoLens.Tag 4, txnidLeastBits__field_descriptor),
           (Data.ProtoLens.Tag 5, txnidMostBits__field_descriptor),
           (Data.ProtoLens.Tag 6, highestSequenceId__field_descriptor),
           (Data.ProtoLens.Tag 7, isChunk__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandSend'_unknownFields
        (\ x__ y__ -> x__ {_CommandSend'_unknownFields = y__})
  defMessage
    = CommandSend'_constructor
        {_CommandSend'producerId = Data.ProtoLens.fieldDefault,
         _CommandSend'sequenceId = Data.ProtoLens.fieldDefault,
         _CommandSend'numMessages = Prelude.Nothing,
         _CommandSend'txnidLeastBits = Prelude.Nothing,
         _CommandSend'txnidMostBits = Prelude.Nothing,
         _CommandSend'highestSequenceId = Prelude.Nothing,
         _CommandSend'isChunk = Prelude.Nothing,
         _CommandSend'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandSend
          -> Prelude.Bool
             -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser CommandSend
        loop x required'producerId required'sequenceId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'producerId then (:) "producer_id" else Prelude.id)
                               ((if required'sequenceId then (:) "sequence_id" else Prelude.id)
                                  [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "producer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"producerId") y x)
                                  Prelude.False
                                  required'sequenceId
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "sequence_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"sequenceId") y x)
                                  required'producerId
                                  Prelude.False
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "num_messages"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"numMessages") y x)
                                  required'producerId
                                  required'sequenceId
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_least_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidLeastBits") y x)
                                  required'producerId
                                  required'sequenceId
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_most_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidMostBits") y x)
                                  required'producerId
                                  required'sequenceId
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "highest_sequence_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"highestSequenceId") y x)
                                  required'producerId
                                  required'sequenceId
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "is_chunk"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"isChunk") y x)
                                  required'producerId
                                  required'sequenceId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'producerId
                                  required'sequenceId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "CommandSend"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"producerId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"sequenceId") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'numMessages") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'txnidLeastBits") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'txnidMostBits") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'highestSequenceId") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'isChunk") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (\ b -> if b then 1 else 0)
                                            _v))
                               (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                  (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))
instance Control.DeepSeq.NFData CommandSend where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandSend'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandSend'producerId x__)
                (Control.DeepSeq.deepseq
                   (_CommandSend'sequenceId x__)
                   (Control.DeepSeq.deepseq
                      (_CommandSend'numMessages x__)
                      (Control.DeepSeq.deepseq
                         (_CommandSend'txnidLeastBits x__)
                         (Control.DeepSeq.deepseq
                            (_CommandSend'txnidMostBits x__)
                            (Control.DeepSeq.deepseq
                               (_CommandSend'highestSequenceId x__)
                               (Control.DeepSeq.deepseq (_CommandSend'isChunk x__) ())))))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.producerId' @:: Lens' CommandSendError Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.sequenceId' @:: Lens' CommandSendError Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.error' @:: Lens' CommandSendError ServerError@
         * 'Proto.PulsarApi_Fields.message' @:: Lens' CommandSendError Data.Text.Text@ -}
data CommandSendError
  = CommandSendError'_constructor {_CommandSendError'producerId :: !Data.Word.Word64,
                                   _CommandSendError'sequenceId :: !Data.Word.Word64,
                                   _CommandSendError'error :: !ServerError,
                                   _CommandSendError'message :: !Data.Text.Text,
                                   _CommandSendError'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandSendError where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandSendError "producerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSendError'producerId
           (\ x__ y__ -> x__ {_CommandSendError'producerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSendError "sequenceId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSendError'sequenceId
           (\ x__ y__ -> x__ {_CommandSendError'sequenceId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSendError "error" ServerError where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSendError'error
           (\ x__ y__ -> x__ {_CommandSendError'error = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSendError "message" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSendError'message
           (\ x__ y__ -> x__ {_CommandSendError'message = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandSendError where
  messageName _ = Data.Text.pack "pulsar.proto.CommandSendError"
  packedMessageDescriptor _
    = "\n\
      \\DLECommandSendError\DC2\US\n\
      \\vproducer_id\CAN\SOH \STX(\EOTR\n\
      \producerId\DC2\US\n\
      \\vsequence_id\CAN\STX \STX(\EOTR\n\
      \sequenceId\DC2/\n\
      \\ENQerror\CAN\ETX \STX(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
      \\amessage\CAN\EOT \STX(\tR\amessage"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        producerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "producer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"producerId")) ::
              Data.ProtoLens.FieldDescriptor CommandSendError
        sequenceId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sequence_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"sequenceId")) ::
              Data.ProtoLens.FieldDescriptor CommandSendError
        error__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor ServerError)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"error")) ::
              Data.ProtoLens.FieldDescriptor CommandSendError
        message__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"message")) ::
              Data.ProtoLens.FieldDescriptor CommandSendError
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, producerId__field_descriptor),
           (Data.ProtoLens.Tag 2, sequenceId__field_descriptor),
           (Data.ProtoLens.Tag 3, error__field_descriptor),
           (Data.ProtoLens.Tag 4, message__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandSendError'_unknownFields
        (\ x__ y__ -> x__ {_CommandSendError'_unknownFields = y__})
  defMessage
    = CommandSendError'_constructor
        {_CommandSendError'producerId = Data.ProtoLens.fieldDefault,
         _CommandSendError'sequenceId = Data.ProtoLens.fieldDefault,
         _CommandSendError'error = Data.ProtoLens.fieldDefault,
         _CommandSendError'message = Data.ProtoLens.fieldDefault,
         _CommandSendError'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandSendError
          -> Prelude.Bool
             -> Prelude.Bool
                -> Prelude.Bool
                   -> Prelude.Bool
                      -> Data.ProtoLens.Encoding.Bytes.Parser CommandSendError
        loop
          x
          required'error
          required'message
          required'producerId
          required'sequenceId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'error then (:) "error" else Prelude.id)
                               ((if required'message then (:) "message" else Prelude.id)
                                  ((if required'producerId then (:) "producer_id" else Prelude.id)
                                     ((if required'sequenceId then
                                           (:) "sequence_id"
                                       else
                                           Prelude.id)
                                        [])))
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "producer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"producerId") y x)
                                  required'error
                                  required'message
                                  Prelude.False
                                  required'sequenceId
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "sequence_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"sequenceId") y x)
                                  required'error
                                  required'message
                                  required'producerId
                                  Prelude.False
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "error"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"error") y x)
                                  Prelude.False
                                  required'message
                                  required'producerId
                                  required'sequenceId
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "message"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"message") y x)
                                  required'error
                                  Prelude.False
                                  required'producerId
                                  required'sequenceId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'error
                                  required'message
                                  required'producerId
                                  required'sequenceId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop
                Data.ProtoLens.defMessage
                Prelude.True
                Prelude.True
                Prelude.True
                Prelude.True)
          "CommandSendError"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"producerId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"sequenceId") _x)))
                ((Data.Monoid.<>)
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                      ((Prelude..)
                         ((Prelude..)
                            Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                         Prelude.fromEnum
                         (Lens.Family2.view (Data.ProtoLens.Field.field @"error") _x)))
                   ((Data.Monoid.<>)
                      ((Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                         ((Prelude..)
                            (\ bs
                               -> (Data.Monoid.<>)
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                       (Prelude.fromIntegral (Data.ByteString.length bs)))
                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                            Data.Text.Encoding.encodeUtf8
                            (Lens.Family2.view (Data.ProtoLens.Field.field @"message") _x)))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData CommandSendError where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandSendError'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandSendError'producerId x__)
                (Control.DeepSeq.deepseq
                   (_CommandSendError'sequenceId x__)
                   (Control.DeepSeq.deepseq
                      (_CommandSendError'error x__)
                      (Control.DeepSeq.deepseq (_CommandSendError'message x__) ()))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.producerId' @:: Lens' CommandSendReceipt Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.sequenceId' @:: Lens' CommandSendReceipt Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.messageId' @:: Lens' CommandSendReceipt MessageIdData@
         * 'Proto.PulsarApi_Fields.maybe'messageId' @:: Lens' CommandSendReceipt (Prelude.Maybe MessageIdData)@
         * 'Proto.PulsarApi_Fields.highestSequenceId' @:: Lens' CommandSendReceipt Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'highestSequenceId' @:: Lens' CommandSendReceipt (Prelude.Maybe Data.Word.Word64)@ -}
data CommandSendReceipt
  = CommandSendReceipt'_constructor {_CommandSendReceipt'producerId :: !Data.Word.Word64,
                                     _CommandSendReceipt'sequenceId :: !Data.Word.Word64,
                                     _CommandSendReceipt'messageId :: !(Prelude.Maybe MessageIdData),
                                     _CommandSendReceipt'highestSequenceId :: !(Prelude.Maybe Data.Word.Word64),
                                     _CommandSendReceipt'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandSendReceipt where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandSendReceipt "producerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSendReceipt'producerId
           (\ x__ y__ -> x__ {_CommandSendReceipt'producerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSendReceipt "sequenceId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSendReceipt'sequenceId
           (\ x__ y__ -> x__ {_CommandSendReceipt'sequenceId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSendReceipt "messageId" MessageIdData where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSendReceipt'messageId
           (\ x__ y__ -> x__ {_CommandSendReceipt'messageId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField CommandSendReceipt "maybe'messageId" (Prelude.Maybe MessageIdData) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSendReceipt'messageId
           (\ x__ y__ -> x__ {_CommandSendReceipt'messageId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSendReceipt "highestSequenceId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSendReceipt'highestSequenceId
           (\ x__ y__ -> x__ {_CommandSendReceipt'highestSequenceId = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandSendReceipt "maybe'highestSequenceId" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSendReceipt'highestSequenceId
           (\ x__ y__ -> x__ {_CommandSendReceipt'highestSequenceId = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandSendReceipt where
  messageName _ = Data.Text.pack "pulsar.proto.CommandSendReceipt"
  packedMessageDescriptor _
    = "\n\
      \\DC2CommandSendReceipt\DC2\US\n\
      \\vproducer_id\CAN\SOH \STX(\EOTR\n\
      \producerId\DC2\US\n\
      \\vsequence_id\CAN\STX \STX(\EOTR\n\
      \sequenceId\DC2:\n\
      \\n\
      \message_id\CAN\ETX \SOH(\v2\ESC.pulsar.proto.MessageIdDataR\tmessageId\DC21\n\
      \\DC3highest_sequence_id\CAN\EOT \SOH(\EOT:\SOH0R\DC1highestSequenceId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        producerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "producer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"producerId")) ::
              Data.ProtoLens.FieldDescriptor CommandSendReceipt
        sequenceId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sequence_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"sequenceId")) ::
              Data.ProtoLens.FieldDescriptor CommandSendReceipt
        messageId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message_id"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor MessageIdData)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'messageId")) ::
              Data.ProtoLens.FieldDescriptor CommandSendReceipt
        highestSequenceId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "highest_sequence_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'highestSequenceId")) ::
              Data.ProtoLens.FieldDescriptor CommandSendReceipt
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, producerId__field_descriptor),
           (Data.ProtoLens.Tag 2, sequenceId__field_descriptor),
           (Data.ProtoLens.Tag 3, messageId__field_descriptor),
           (Data.ProtoLens.Tag 4, highestSequenceId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandSendReceipt'_unknownFields
        (\ x__ y__ -> x__ {_CommandSendReceipt'_unknownFields = y__})
  defMessage
    = CommandSendReceipt'_constructor
        {_CommandSendReceipt'producerId = Data.ProtoLens.fieldDefault,
         _CommandSendReceipt'sequenceId = Data.ProtoLens.fieldDefault,
         _CommandSendReceipt'messageId = Prelude.Nothing,
         _CommandSendReceipt'highestSequenceId = Prelude.Nothing,
         _CommandSendReceipt'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandSendReceipt
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser CommandSendReceipt
        loop x required'producerId required'sequenceId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'producerId then (:) "producer_id" else Prelude.id)
                               ((if required'sequenceId then (:) "sequence_id" else Prelude.id)
                                  [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "producer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"producerId") y x)
                                  Prelude.False
                                  required'sequenceId
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "sequence_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"sequenceId") y x)
                                  required'producerId
                                  Prelude.False
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "message_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"messageId") y x)
                                  required'producerId
                                  required'sequenceId
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "highest_sequence_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"highestSequenceId") y x)
                                  required'producerId
                                  required'sequenceId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'producerId
                                  required'sequenceId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "CommandSendReceipt"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"producerId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"sequenceId") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'messageId") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.ProtoLens.encodeMessage
                                _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'highestSequenceId") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData CommandSendReceipt where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandSendReceipt'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandSendReceipt'producerId x__)
                (Control.DeepSeq.deepseq
                   (_CommandSendReceipt'sequenceId x__)
                   (Control.DeepSeq.deepseq
                      (_CommandSendReceipt'messageId x__)
                      (Control.DeepSeq.deepseq
                         (_CommandSendReceipt'highestSequenceId x__) ()))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.topic' @:: Lens' CommandSubscribe Data.Text.Text@
         * 'Proto.PulsarApi_Fields.subscription' @:: Lens' CommandSubscribe Data.Text.Text@
         * 'Proto.PulsarApi_Fields.subType' @:: Lens' CommandSubscribe CommandSubscribe'SubType@
         * 'Proto.PulsarApi_Fields.consumerId' @:: Lens' CommandSubscribe Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandSubscribe Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.consumerName' @:: Lens' CommandSubscribe Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'consumerName' @:: Lens' CommandSubscribe (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.priorityLevel' @:: Lens' CommandSubscribe Data.Int.Int32@
         * 'Proto.PulsarApi_Fields.maybe'priorityLevel' @:: Lens' CommandSubscribe (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.PulsarApi_Fields.durable' @:: Lens' CommandSubscribe Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'durable' @:: Lens' CommandSubscribe (Prelude.Maybe Prelude.Bool)@
         * 'Proto.PulsarApi_Fields.startMessageId' @:: Lens' CommandSubscribe MessageIdData@
         * 'Proto.PulsarApi_Fields.maybe'startMessageId' @:: Lens' CommandSubscribe (Prelude.Maybe MessageIdData)@
         * 'Proto.PulsarApi_Fields.metadata' @:: Lens' CommandSubscribe [KeyValue]@
         * 'Proto.PulsarApi_Fields.vec'metadata' @:: Lens' CommandSubscribe (Data.Vector.Vector KeyValue)@
         * 'Proto.PulsarApi_Fields.readCompacted' @:: Lens' CommandSubscribe Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'readCompacted' @:: Lens' CommandSubscribe (Prelude.Maybe Prelude.Bool)@
         * 'Proto.PulsarApi_Fields.schema' @:: Lens' CommandSubscribe Schema@
         * 'Proto.PulsarApi_Fields.maybe'schema' @:: Lens' CommandSubscribe (Prelude.Maybe Schema)@
         * 'Proto.PulsarApi_Fields.initialPosition' @:: Lens' CommandSubscribe CommandSubscribe'InitialPosition@
         * 'Proto.PulsarApi_Fields.maybe'initialPosition' @:: Lens' CommandSubscribe (Prelude.Maybe CommandSubscribe'InitialPosition)@
         * 'Proto.PulsarApi_Fields.replicateSubscriptionState' @:: Lens' CommandSubscribe Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'replicateSubscriptionState' @:: Lens' CommandSubscribe (Prelude.Maybe Prelude.Bool)@
         * 'Proto.PulsarApi_Fields.forceTopicCreation' @:: Lens' CommandSubscribe Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'forceTopicCreation' @:: Lens' CommandSubscribe (Prelude.Maybe Prelude.Bool)@
         * 'Proto.PulsarApi_Fields.startMessageRollbackDurationSec' @:: Lens' CommandSubscribe Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'startMessageRollbackDurationSec' @:: Lens' CommandSubscribe (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.keySharedMeta' @:: Lens' CommandSubscribe KeySharedMeta@
         * 'Proto.PulsarApi_Fields.maybe'keySharedMeta' @:: Lens' CommandSubscribe (Prelude.Maybe KeySharedMeta)@ -}
data CommandSubscribe
  = CommandSubscribe'_constructor {_CommandSubscribe'topic :: !Data.Text.Text,
                                   _CommandSubscribe'subscription :: !Data.Text.Text,
                                   _CommandSubscribe'subType :: !CommandSubscribe'SubType,
                                   _CommandSubscribe'consumerId :: !Data.Word.Word64,
                                   _CommandSubscribe'requestId :: !Data.Word.Word64,
                                   _CommandSubscribe'consumerName :: !(Prelude.Maybe Data.Text.Text),
                                   _CommandSubscribe'priorityLevel :: !(Prelude.Maybe Data.Int.Int32),
                                   _CommandSubscribe'durable :: !(Prelude.Maybe Prelude.Bool),
                                   _CommandSubscribe'startMessageId :: !(Prelude.Maybe MessageIdData),
                                   _CommandSubscribe'metadata :: !(Data.Vector.Vector KeyValue),
                                   _CommandSubscribe'readCompacted :: !(Prelude.Maybe Prelude.Bool),
                                   _CommandSubscribe'schema :: !(Prelude.Maybe Schema),
                                   _CommandSubscribe'initialPosition :: !(Prelude.Maybe CommandSubscribe'InitialPosition),
                                   _CommandSubscribe'replicateSubscriptionState :: !(Prelude.Maybe Prelude.Bool),
                                   _CommandSubscribe'forceTopicCreation :: !(Prelude.Maybe Prelude.Bool),
                                   _CommandSubscribe'startMessageRollbackDurationSec :: !(Prelude.Maybe Data.Word.Word64),
                                   _CommandSubscribe'keySharedMeta :: !(Prelude.Maybe KeySharedMeta),
                                   _CommandSubscribe'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandSubscribe where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandSubscribe "topic" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'topic
           (\ x__ y__ -> x__ {_CommandSubscribe'topic = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSubscribe "subscription" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'subscription
           (\ x__ y__ -> x__ {_CommandSubscribe'subscription = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSubscribe "subType" CommandSubscribe'SubType where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'subType
           (\ x__ y__ -> x__ {_CommandSubscribe'subType = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSubscribe "consumerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'consumerId
           (\ x__ y__ -> x__ {_CommandSubscribe'consumerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSubscribe "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'requestId
           (\ x__ y__ -> x__ {_CommandSubscribe'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSubscribe "consumerName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'consumerName
           (\ x__ y__ -> x__ {_CommandSubscribe'consumerName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandSubscribe "maybe'consumerName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'consumerName
           (\ x__ y__ -> x__ {_CommandSubscribe'consumerName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSubscribe "priorityLevel" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'priorityLevel
           (\ x__ y__ -> x__ {_CommandSubscribe'priorityLevel = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandSubscribe "maybe'priorityLevel" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'priorityLevel
           (\ x__ y__ -> x__ {_CommandSubscribe'priorityLevel = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSubscribe "durable" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'durable
           (\ x__ y__ -> x__ {_CommandSubscribe'durable = y__}))
        (Data.ProtoLens.maybeLens Prelude.True)
instance Data.ProtoLens.Field.HasField CommandSubscribe "maybe'durable" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'durable
           (\ x__ y__ -> x__ {_CommandSubscribe'durable = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSubscribe "startMessageId" MessageIdData where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'startMessageId
           (\ x__ y__ -> x__ {_CommandSubscribe'startMessageId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField CommandSubscribe "maybe'startMessageId" (Prelude.Maybe MessageIdData) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'startMessageId
           (\ x__ y__ -> x__ {_CommandSubscribe'startMessageId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSubscribe "metadata" [KeyValue] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'metadata
           (\ x__ y__ -> x__ {_CommandSubscribe'metadata = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField CommandSubscribe "vec'metadata" (Data.Vector.Vector KeyValue) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'metadata
           (\ x__ y__ -> x__ {_CommandSubscribe'metadata = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSubscribe "readCompacted" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'readCompacted
           (\ x__ y__ -> x__ {_CommandSubscribe'readCompacted = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandSubscribe "maybe'readCompacted" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'readCompacted
           (\ x__ y__ -> x__ {_CommandSubscribe'readCompacted = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSubscribe "schema" Schema where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'schema
           (\ x__ y__ -> x__ {_CommandSubscribe'schema = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField CommandSubscribe "maybe'schema" (Prelude.Maybe Schema) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'schema
           (\ x__ y__ -> x__ {_CommandSubscribe'schema = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSubscribe "initialPosition" CommandSubscribe'InitialPosition where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'initialPosition
           (\ x__ y__ -> x__ {_CommandSubscribe'initialPosition = y__}))
        (Data.ProtoLens.maybeLens CommandSubscribe'Latest)
instance Data.ProtoLens.Field.HasField CommandSubscribe "maybe'initialPosition" (Prelude.Maybe CommandSubscribe'InitialPosition) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'initialPosition
           (\ x__ y__ -> x__ {_CommandSubscribe'initialPosition = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSubscribe "replicateSubscriptionState" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'replicateSubscriptionState
           (\ x__ y__
              -> x__ {_CommandSubscribe'replicateSubscriptionState = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CommandSubscribe "maybe'replicateSubscriptionState" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'replicateSubscriptionState
           (\ x__ y__
              -> x__ {_CommandSubscribe'replicateSubscriptionState = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSubscribe "forceTopicCreation" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'forceTopicCreation
           (\ x__ y__ -> x__ {_CommandSubscribe'forceTopicCreation = y__}))
        (Data.ProtoLens.maybeLens Prelude.True)
instance Data.ProtoLens.Field.HasField CommandSubscribe "maybe'forceTopicCreation" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'forceTopicCreation
           (\ x__ y__ -> x__ {_CommandSubscribe'forceTopicCreation = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSubscribe "startMessageRollbackDurationSec" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'startMessageRollbackDurationSec
           (\ x__ y__
              -> x__ {_CommandSubscribe'startMessageRollbackDurationSec = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField CommandSubscribe "maybe'startMessageRollbackDurationSec" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'startMessageRollbackDurationSec
           (\ x__ y__
              -> x__ {_CommandSubscribe'startMessageRollbackDurationSec = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSubscribe "keySharedMeta" KeySharedMeta where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'keySharedMeta
           (\ x__ y__ -> x__ {_CommandSubscribe'keySharedMeta = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField CommandSubscribe "maybe'keySharedMeta" (Prelude.Maybe KeySharedMeta) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSubscribe'keySharedMeta
           (\ x__ y__ -> x__ {_CommandSubscribe'keySharedMeta = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandSubscribe where
  messageName _ = Data.Text.pack "pulsar.proto.CommandSubscribe"
  packedMessageDescriptor _
    = "\n\
      \\DLECommandSubscribe\DC2\DC4\n\
      \\ENQtopic\CAN\SOH \STX(\tR\ENQtopic\DC2\"\n\
      \\fsubscription\CAN\STX \STX(\tR\fsubscription\DC2@\n\
      \\asubType\CAN\ETX \STX(\SO2&.pulsar.proto.CommandSubscribe.SubTypeR\asubType\DC2\US\n\
      \\vconsumer_id\CAN\EOT \STX(\EOTR\n\
      \consumerId\DC2\GS\n\
      \\n\
      \request_id\CAN\ENQ \STX(\EOTR\trequestId\DC2#\n\
      \\rconsumer_name\CAN\ACK \SOH(\tR\fconsumerName\DC2%\n\
      \\SOpriority_level\CAN\a \SOH(\ENQR\rpriorityLevel\DC2\RS\n\
      \\adurable\CAN\b \SOH(\b:\EOTtrueR\adurable\DC2E\n\
      \\DLEstart_message_id\CAN\t \SOH(\v2\ESC.pulsar.proto.MessageIdDataR\SOstartMessageId\DC22\n\
      \\bmetadata\CAN\n\
      \ \ETX(\v2\SYN.pulsar.proto.KeyValueR\bmetadata\DC2%\n\
      \\SOread_compacted\CAN\v \SOH(\bR\rreadCompacted\DC2,\n\
      \\ACKschema\CAN\f \SOH(\v2\DC4.pulsar.proto.SchemaR\ACKschema\DC2`\n\
      \\SIinitialPosition\CAN\r \SOH(\SO2..pulsar.proto.CommandSubscribe.InitialPosition:\ACKLatestR\SIinitialPosition\DC2@\n\
      \\FSreplicate_subscription_state\CAN\SO \SOH(\bR\SUBreplicateSubscriptionState\DC26\n\
      \\DC4force_topic_creation\CAN\SI \SOH(\b:\EOTtrueR\DC2forceTopicCreation\DC2O\n\
      \#start_message_rollback_duration_sec\CAN\DLE \SOH(\EOT:\SOH0R\USstartMessageRollbackDurationSec\DC2A\n\
      \\rkeySharedMeta\CAN\DC1 \SOH(\v2\ESC.pulsar.proto.KeySharedMetaR\rkeySharedMeta\"B\n\
      \\aSubType\DC2\r\n\
      \\tExclusive\DLE\NUL\DC2\n\
      \\n\
      \\ACKShared\DLE\SOH\DC2\f\n\
      \\bFailover\DLE\STX\DC2\SO\n\
      \\n\
      \Key_Shared\DLE\ETX\"+\n\
      \\SIInitialPosition\DC2\n\
      \\n\
      \\ACKLatest\DLE\NUL\DC2\f\n\
      \\bEarliest\DLE\SOH"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        topic__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "topic"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"topic")) ::
              Data.ProtoLens.FieldDescriptor CommandSubscribe
        subscription__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "subscription"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"subscription")) ::
              Data.ProtoLens.FieldDescriptor CommandSubscribe
        subType__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "subType"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor CommandSubscribe'SubType)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"subType")) ::
              Data.ProtoLens.FieldDescriptor CommandSubscribe
        consumerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "consumer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"consumerId")) ::
              Data.ProtoLens.FieldDescriptor CommandSubscribe
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandSubscribe
        consumerName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "consumer_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'consumerName")) ::
              Data.ProtoLens.FieldDescriptor CommandSubscribe
        priorityLevel__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "priority_level"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'priorityLevel")) ::
              Data.ProtoLens.FieldDescriptor CommandSubscribe
        durable__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "durable"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'durable")) ::
              Data.ProtoLens.FieldDescriptor CommandSubscribe
        startMessageId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "start_message_id"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor MessageIdData)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'startMessageId")) ::
              Data.ProtoLens.FieldDescriptor CommandSubscribe
        metadata__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "metadata"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor KeyValue)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"metadata")) ::
              Data.ProtoLens.FieldDescriptor CommandSubscribe
        readCompacted__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "read_compacted"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'readCompacted")) ::
              Data.ProtoLens.FieldDescriptor CommandSubscribe
        schema__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "schema"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Schema)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'schema")) ::
              Data.ProtoLens.FieldDescriptor CommandSubscribe
        initialPosition__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "initialPosition"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor CommandSubscribe'InitialPosition)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'initialPosition")) ::
              Data.ProtoLens.FieldDescriptor CommandSubscribe
        replicateSubscriptionState__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "replicate_subscription_state"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field
                    @"maybe'replicateSubscriptionState")) ::
              Data.ProtoLens.FieldDescriptor CommandSubscribe
        forceTopicCreation__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "force_topic_creation"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'forceTopicCreation")) ::
              Data.ProtoLens.FieldDescriptor CommandSubscribe
        startMessageRollbackDurationSec__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "start_message_rollback_duration_sec"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field
                    @"maybe'startMessageRollbackDurationSec")) ::
              Data.ProtoLens.FieldDescriptor CommandSubscribe
        keySharedMeta__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "keySharedMeta"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor KeySharedMeta)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'keySharedMeta")) ::
              Data.ProtoLens.FieldDescriptor CommandSubscribe
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, topic__field_descriptor),
           (Data.ProtoLens.Tag 2, subscription__field_descriptor),
           (Data.ProtoLens.Tag 3, subType__field_descriptor),
           (Data.ProtoLens.Tag 4, consumerId__field_descriptor),
           (Data.ProtoLens.Tag 5, requestId__field_descriptor),
           (Data.ProtoLens.Tag 6, consumerName__field_descriptor),
           (Data.ProtoLens.Tag 7, priorityLevel__field_descriptor),
           (Data.ProtoLens.Tag 8, durable__field_descriptor),
           (Data.ProtoLens.Tag 9, startMessageId__field_descriptor),
           (Data.ProtoLens.Tag 10, metadata__field_descriptor),
           (Data.ProtoLens.Tag 11, readCompacted__field_descriptor),
           (Data.ProtoLens.Tag 12, schema__field_descriptor),
           (Data.ProtoLens.Tag 13, initialPosition__field_descriptor),
           (Data.ProtoLens.Tag 14, 
            replicateSubscriptionState__field_descriptor),
           (Data.ProtoLens.Tag 15, forceTopicCreation__field_descriptor),
           (Data.ProtoLens.Tag 16, 
            startMessageRollbackDurationSec__field_descriptor),
           (Data.ProtoLens.Tag 17, keySharedMeta__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandSubscribe'_unknownFields
        (\ x__ y__ -> x__ {_CommandSubscribe'_unknownFields = y__})
  defMessage
    = CommandSubscribe'_constructor
        {_CommandSubscribe'topic = Data.ProtoLens.fieldDefault,
         _CommandSubscribe'subscription = Data.ProtoLens.fieldDefault,
         _CommandSubscribe'subType = Data.ProtoLens.fieldDefault,
         _CommandSubscribe'consumerId = Data.ProtoLens.fieldDefault,
         _CommandSubscribe'requestId = Data.ProtoLens.fieldDefault,
         _CommandSubscribe'consumerName = Prelude.Nothing,
         _CommandSubscribe'priorityLevel = Prelude.Nothing,
         _CommandSubscribe'durable = Prelude.Nothing,
         _CommandSubscribe'startMessageId = Prelude.Nothing,
         _CommandSubscribe'metadata = Data.Vector.Generic.empty,
         _CommandSubscribe'readCompacted = Prelude.Nothing,
         _CommandSubscribe'schema = Prelude.Nothing,
         _CommandSubscribe'initialPosition = Prelude.Nothing,
         _CommandSubscribe'replicateSubscriptionState = Prelude.Nothing,
         _CommandSubscribe'forceTopicCreation = Prelude.Nothing,
         _CommandSubscribe'startMessageRollbackDurationSec = Prelude.Nothing,
         _CommandSubscribe'keySharedMeta = Prelude.Nothing,
         _CommandSubscribe'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandSubscribe
          -> Prelude.Bool
             -> Prelude.Bool
                -> Prelude.Bool
                   -> Prelude.Bool
                      -> Prelude.Bool
                         -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld KeyValue
                            -> Data.ProtoLens.Encoding.Bytes.Parser CommandSubscribe
        loop
          x
          required'consumerId
          required'requestId
          required'subType
          required'subscription
          required'topic
          mutable'metadata
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'metadata <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                              mutable'metadata)
                      (let
                         missing
                           = (if required'consumerId then (:) "consumer_id" else Prelude.id)
                               ((if required'requestId then (:) "request_id" else Prelude.id)
                                  ((if required'subType then (:) "subType" else Prelude.id)
                                     ((if required'subscription then
                                           (:) "subscription"
                                       else
                                           Prelude.id)
                                        ((if required'topic then (:) "topic" else Prelude.id) []))))
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'metadata") frozen'metadata x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "topic"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"topic") y x)
                                  required'consumerId
                                  required'requestId
                                  required'subType
                                  required'subscription
                                  Prelude.False
                                  mutable'metadata
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "subscription"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"subscription") y x)
                                  required'consumerId
                                  required'requestId
                                  required'subType
                                  Prelude.False
                                  required'topic
                                  mutable'metadata
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "subType"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"subType") y x)
                                  required'consumerId
                                  required'requestId
                                  Prelude.False
                                  required'subscription
                                  required'topic
                                  mutable'metadata
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "consumer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"consumerId") y x)
                                  Prelude.False
                                  required'requestId
                                  required'subType
                                  required'subscription
                                  required'topic
                                  mutable'metadata
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  required'consumerId
                                  Prelude.False
                                  required'subType
                                  required'subscription
                                  required'topic
                                  mutable'metadata
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "consumer_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"consumerName") y x)
                                  required'consumerId
                                  required'requestId
                                  required'subType
                                  required'subscription
                                  required'topic
                                  mutable'metadata
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "priority_level"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"priorityLevel") y x)
                                  required'consumerId
                                  required'requestId
                                  required'subType
                                  required'subscription
                                  required'topic
                                  mutable'metadata
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "durable"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"durable") y x)
                                  required'consumerId
                                  required'requestId
                                  required'subType
                                  required'subscription
                                  required'topic
                                  mutable'metadata
                        74
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "start_message_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"startMessageId") y x)
                                  required'consumerId
                                  required'requestId
                                  required'subType
                                  required'subscription
                                  required'topic
                                  mutable'metadata
                        82
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "metadata"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'metadata y)
                                loop
                                  x
                                  required'consumerId
                                  required'requestId
                                  required'subType
                                  required'subscription
                                  required'topic
                                  v
                        88
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "read_compacted"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"readCompacted") y x)
                                  required'consumerId
                                  required'requestId
                                  required'subType
                                  required'subscription
                                  required'topic
                                  mutable'metadata
                        98
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "schema"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"schema") y x)
                                  required'consumerId
                                  required'requestId
                                  required'subType
                                  required'subscription
                                  required'topic
                                  mutable'metadata
                        104
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "initialPosition"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"initialPosition") y x)
                                  required'consumerId
                                  required'requestId
                                  required'subType
                                  required'subscription
                                  required'topic
                                  mutable'metadata
                        112
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "replicate_subscription_state"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"replicateSubscriptionState") y x)
                                  required'consumerId
                                  required'requestId
                                  required'subType
                                  required'subscription
                                  required'topic
                                  mutable'metadata
                        120
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "force_topic_creation"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"forceTopicCreation") y x)
                                  required'consumerId
                                  required'requestId
                                  required'subType
                                  required'subscription
                                  required'topic
                                  mutable'metadata
                        128
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt
                                       "start_message_rollback_duration_sec"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"startMessageRollbackDurationSec")
                                     y
                                     x)
                                  required'consumerId
                                  required'requestId
                                  required'subType
                                  required'subscription
                                  required'topic
                                  mutable'metadata
                        138
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "keySharedMeta"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"keySharedMeta") y x)
                                  required'consumerId
                                  required'requestId
                                  required'subType
                                  required'subscription
                                  required'topic
                                  mutable'metadata
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'consumerId
                                  required'requestId
                                  required'subType
                                  required'subscription
                                  required'topic
                                  mutable'metadata
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'metadata <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage
                Prelude.True
                Prelude.True
                Prelude.True
                Prelude.True
                Prelude.True
                mutable'metadata)
          "CommandSubscribe"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"topic") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((Prelude..)
                      (\ bs
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      Data.Text.Encoding.encodeUtf8
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"subscription") _x)))
                ((Data.Monoid.<>)
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                      ((Prelude..)
                         ((Prelude..)
                            Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                         Prelude.fromEnum
                         (Lens.Family2.view (Data.ProtoLens.Field.field @"subType") _x)))
                   ((Data.Monoid.<>)
                      ((Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Lens.Family2.view (Data.ProtoLens.Field.field @"consumerId") _x)))
                      ((Data.Monoid.<>)
                         ((Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'consumerName") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                      ((Prelude..)
                                         (\ bs
                                            -> (Data.Monoid.<>)
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                    (Prelude.fromIntegral
                                                       (Data.ByteString.length bs)))
                                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         Data.Text.Encoding.encodeUtf8
                                         _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'priorityLevel") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral
                                            _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'durable") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (\ b -> if b then 1 else 0)
                                               _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'startMessageId") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 74)
                                               ((Prelude..)
                                                  (\ bs
                                                     -> (Data.Monoid.<>)
                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                             (Prelude.fromIntegral
                                                                (Data.ByteString.length bs)))
                                                          (Data.ProtoLens.Encoding.Bytes.putBytes
                                                             bs))
                                                  Data.ProtoLens.encodeMessage
                                                  _v))
                                     ((Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                           (\ _v
                                              -> (Data.Monoid.<>)
                                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 82)
                                                   ((Prelude..)
                                                      (\ bs
                                                         -> (Data.Monoid.<>)
                                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 (Prelude.fromIntegral
                                                                    (Data.ByteString.length bs)))
                                                              (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                 bs))
                                                      Data.ProtoLens.encodeMessage
                                                      _v))
                                           (Lens.Family2.view
                                              (Data.ProtoLens.Field.field @"vec'metadata") _x))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field
                                                     @"maybe'readCompacted")
                                                  _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 88)
                                                     ((Prelude..)
                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        (\ b -> if b then 1 else 0)
                                                        _v))
                                           ((Data.Monoid.<>)
                                              (case
                                                   Lens.Family2.view
                                                     (Data.ProtoLens.Field.field @"maybe'schema") _x
                                               of
                                                 Prelude.Nothing -> Data.Monoid.mempty
                                                 (Prelude.Just _v)
                                                   -> (Data.Monoid.<>)
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt 98)
                                                        ((Prelude..)
                                                           (\ bs
                                                              -> (Data.Monoid.<>)
                                                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                      (Prelude.fromIntegral
                                                                         (Data.ByteString.length
                                                                            bs)))
                                                                   (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                      bs))
                                                           Data.ProtoLens.encodeMessage
                                                           _v))
                                              ((Data.Monoid.<>)
                                                 (case
                                                      Lens.Family2.view
                                                        (Data.ProtoLens.Field.field
                                                           @"maybe'initialPosition")
                                                        _x
                                                  of
                                                    Prelude.Nothing -> Data.Monoid.mempty
                                                    (Prelude.Just _v)
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              104)
                                                           ((Prelude..)
                                                              ((Prelude..)
                                                                 Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 Prelude.fromIntegral)
                                                              Prelude.fromEnum
                                                              _v))
                                                 ((Data.Monoid.<>)
                                                    (case
                                                         Lens.Family2.view
                                                           (Data.ProtoLens.Field.field
                                                              @"maybe'replicateSubscriptionState")
                                                           _x
                                                     of
                                                       Prelude.Nothing -> Data.Monoid.mempty
                                                       (Prelude.Just _v)
                                                         -> (Data.Monoid.<>)
                                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 112)
                                                              ((Prelude..)
                                                                 Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 (\ b -> if b then 1 else 0)
                                                                 _v))
                                                    ((Data.Monoid.<>)
                                                       (case
                                                            Lens.Family2.view
                                                              (Data.ProtoLens.Field.field
                                                                 @"maybe'forceTopicCreation")
                                                              _x
                                                        of
                                                          Prelude.Nothing -> Data.Monoid.mempty
                                                          (Prelude.Just _v)
                                                            -> (Data.Monoid.<>)
                                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    120)
                                                                 ((Prelude..)
                                                                    Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    (\ b -> if b then 1 else 0)
                                                                    _v))
                                                       ((Data.Monoid.<>)
                                                          (case
                                                               Lens.Family2.view
                                                                 (Data.ProtoLens.Field.field
                                                                    @"maybe'startMessageRollbackDurationSec")
                                                                 _x
                                                           of
                                                             Prelude.Nothing -> Data.Monoid.mempty
                                                             (Prelude.Just _v)
                                                               -> (Data.Monoid.<>)
                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       128)
                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       _v))
                                                          ((Data.Monoid.<>)
                                                             (case
                                                                  Lens.Family2.view
                                                                    (Data.ProtoLens.Field.field
                                                                       @"maybe'keySharedMeta")
                                                                    _x
                                                              of
                                                                Prelude.Nothing
                                                                  -> Data.Monoid.mempty
                                                                (Prelude.Just _v)
                                                                  -> (Data.Monoid.<>)
                                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                          138)
                                                                       ((Prelude..)
                                                                          (\ bs
                                                                             -> (Data.Monoid.<>)
                                                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                     (Prelude.fromIntegral
                                                                                        (Data.ByteString.length
                                                                                           bs)))
                                                                                  (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                     bs))
                                                                          Data.ProtoLens.encodeMessage
                                                                          _v))
                                                             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                                (Lens.Family2.view
                                                                   Data.ProtoLens.unknownFields
                                                                   _x))))))))))))))))))
instance Control.DeepSeq.NFData CommandSubscribe where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandSubscribe'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandSubscribe'topic x__)
                (Control.DeepSeq.deepseq
                   (_CommandSubscribe'subscription x__)
                   (Control.DeepSeq.deepseq
                      (_CommandSubscribe'subType x__)
                      (Control.DeepSeq.deepseq
                         (_CommandSubscribe'consumerId x__)
                         (Control.DeepSeq.deepseq
                            (_CommandSubscribe'requestId x__)
                            (Control.DeepSeq.deepseq
                               (_CommandSubscribe'consumerName x__)
                               (Control.DeepSeq.deepseq
                                  (_CommandSubscribe'priorityLevel x__)
                                  (Control.DeepSeq.deepseq
                                     (_CommandSubscribe'durable x__)
                                     (Control.DeepSeq.deepseq
                                        (_CommandSubscribe'startMessageId x__)
                                        (Control.DeepSeq.deepseq
                                           (_CommandSubscribe'metadata x__)
                                           (Control.DeepSeq.deepseq
                                              (_CommandSubscribe'readCompacted x__)
                                              (Control.DeepSeq.deepseq
                                                 (_CommandSubscribe'schema x__)
                                                 (Control.DeepSeq.deepseq
                                                    (_CommandSubscribe'initialPosition x__)
                                                    (Control.DeepSeq.deepseq
                                                       (_CommandSubscribe'replicateSubscriptionState
                                                          x__)
                                                       (Control.DeepSeq.deepseq
                                                          (_CommandSubscribe'forceTopicCreation x__)
                                                          (Control.DeepSeq.deepseq
                                                             (_CommandSubscribe'startMessageRollbackDurationSec
                                                                x__)
                                                             (Control.DeepSeq.deepseq
                                                                (_CommandSubscribe'keySharedMeta
                                                                   x__)
                                                                ())))))))))))))))))
data CommandSubscribe'InitialPosition
  = CommandSubscribe'Latest | CommandSubscribe'Earliest
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum CommandSubscribe'InitialPosition where
  maybeToEnum 0 = Prelude.Just CommandSubscribe'Latest
  maybeToEnum 1 = Prelude.Just CommandSubscribe'Earliest
  maybeToEnum _ = Prelude.Nothing
  showEnum CommandSubscribe'Latest = "Latest"
  showEnum CommandSubscribe'Earliest = "Earliest"
  readEnum k
    | (Prelude.==) k "Latest" = Prelude.Just CommandSubscribe'Latest
    | (Prelude.==) k "Earliest"
    = Prelude.Just CommandSubscribe'Earliest
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded CommandSubscribe'InitialPosition where
  minBound = CommandSubscribe'Latest
  maxBound = CommandSubscribe'Earliest
instance Prelude.Enum CommandSubscribe'InitialPosition where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum InitialPosition: "
              (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum CommandSubscribe'Latest = 0
  fromEnum CommandSubscribe'Earliest = 1
  succ CommandSubscribe'Earliest
    = Prelude.error
        "CommandSubscribe'InitialPosition.succ: bad argument CommandSubscribe'Earliest. This value would be out of bounds."
  succ CommandSubscribe'Latest = CommandSubscribe'Earliest
  pred CommandSubscribe'Latest
    = Prelude.error
        "CommandSubscribe'InitialPosition.pred: bad argument CommandSubscribe'Latest. This value would be out of bounds."
  pred CommandSubscribe'Earliest = CommandSubscribe'Latest
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault CommandSubscribe'InitialPosition where
  fieldDefault = CommandSubscribe'Latest
instance Control.DeepSeq.NFData CommandSubscribe'InitialPosition where
  rnf x__ = Prelude.seq x__ ()
data CommandSubscribe'SubType
  = CommandSubscribe'Exclusive |
    CommandSubscribe'Shared |
    CommandSubscribe'Failover |
    CommandSubscribe'Key_Shared
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum CommandSubscribe'SubType where
  maybeToEnum 0 = Prelude.Just CommandSubscribe'Exclusive
  maybeToEnum 1 = Prelude.Just CommandSubscribe'Shared
  maybeToEnum 2 = Prelude.Just CommandSubscribe'Failover
  maybeToEnum 3 = Prelude.Just CommandSubscribe'Key_Shared
  maybeToEnum _ = Prelude.Nothing
  showEnum CommandSubscribe'Exclusive = "Exclusive"
  showEnum CommandSubscribe'Shared = "Shared"
  showEnum CommandSubscribe'Failover = "Failover"
  showEnum CommandSubscribe'Key_Shared = "Key_Shared"
  readEnum k
    | (Prelude.==) k "Exclusive"
    = Prelude.Just CommandSubscribe'Exclusive
    | (Prelude.==) k "Shared" = Prelude.Just CommandSubscribe'Shared
    | (Prelude.==) k "Failover"
    = Prelude.Just CommandSubscribe'Failover
    | (Prelude.==) k "Key_Shared"
    = Prelude.Just CommandSubscribe'Key_Shared
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded CommandSubscribe'SubType where
  minBound = CommandSubscribe'Exclusive
  maxBound = CommandSubscribe'Key_Shared
instance Prelude.Enum CommandSubscribe'SubType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum SubType: " (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum CommandSubscribe'Exclusive = 0
  fromEnum CommandSubscribe'Shared = 1
  fromEnum CommandSubscribe'Failover = 2
  fromEnum CommandSubscribe'Key_Shared = 3
  succ CommandSubscribe'Key_Shared
    = Prelude.error
        "CommandSubscribe'SubType.succ: bad argument CommandSubscribe'Key_Shared. This value would be out of bounds."
  succ CommandSubscribe'Exclusive = CommandSubscribe'Shared
  succ CommandSubscribe'Shared = CommandSubscribe'Failover
  succ CommandSubscribe'Failover = CommandSubscribe'Key_Shared
  pred CommandSubscribe'Exclusive
    = Prelude.error
        "CommandSubscribe'SubType.pred: bad argument CommandSubscribe'Exclusive. This value would be out of bounds."
  pred CommandSubscribe'Shared = CommandSubscribe'Exclusive
  pred CommandSubscribe'Failover = CommandSubscribe'Shared
  pred CommandSubscribe'Key_Shared = CommandSubscribe'Failover
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault CommandSubscribe'SubType where
  fieldDefault = CommandSubscribe'Exclusive
instance Control.DeepSeq.NFData CommandSubscribe'SubType where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandSuccess Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.schema' @:: Lens' CommandSuccess Schema@
         * 'Proto.PulsarApi_Fields.maybe'schema' @:: Lens' CommandSuccess (Prelude.Maybe Schema)@ -}
data CommandSuccess
  = CommandSuccess'_constructor {_CommandSuccess'requestId :: !Data.Word.Word64,
                                 _CommandSuccess'schema :: !(Prelude.Maybe Schema),
                                 _CommandSuccess'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandSuccess where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandSuccess "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSuccess'requestId
           (\ x__ y__ -> x__ {_CommandSuccess'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandSuccess "schema" Schema where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSuccess'schema
           (\ x__ y__ -> x__ {_CommandSuccess'schema = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField CommandSuccess "maybe'schema" (Prelude.Maybe Schema) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandSuccess'schema
           (\ x__ y__ -> x__ {_CommandSuccess'schema = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandSuccess where
  messageName _ = Data.Text.pack "pulsar.proto.CommandSuccess"
  packedMessageDescriptor _
    = "\n\
      \\SOCommandSuccess\DC2\GS\n\
      \\n\
      \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2,\n\
      \\ACKschema\CAN\STX \SOH(\v2\DC4.pulsar.proto.SchemaR\ACKschema"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandSuccess
        schema__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "schema"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Schema)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'schema")) ::
              Data.ProtoLens.FieldDescriptor CommandSuccess
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, requestId__field_descriptor),
           (Data.ProtoLens.Tag 2, schema__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandSuccess'_unknownFields
        (\ x__ y__ -> x__ {_CommandSuccess'_unknownFields = y__})
  defMessage
    = CommandSuccess'_constructor
        {_CommandSuccess'requestId = Data.ProtoLens.fieldDefault,
         _CommandSuccess'schema = Prelude.Nothing,
         _CommandSuccess'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandSuccess
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CommandSuccess
        loop x required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'requestId then (:) "request_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "schema"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"schema") y x)
                                  required'requestId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "CommandSuccess"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'schema") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage
                             _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData CommandSuccess where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandSuccess'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandSuccess'requestId x__)
                (Control.DeepSeq.deepseq (_CommandSuccess'schema x__) ()))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.consumerId' @:: Lens' CommandUnsubscribe Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.requestId' @:: Lens' CommandUnsubscribe Data.Word.Word64@ -}
data CommandUnsubscribe
  = CommandUnsubscribe'_constructor {_CommandUnsubscribe'consumerId :: !Data.Word.Word64,
                                     _CommandUnsubscribe'requestId :: !Data.Word.Word64,
                                     _CommandUnsubscribe'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CommandUnsubscribe where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CommandUnsubscribe "consumerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandUnsubscribe'consumerId
           (\ x__ y__ -> x__ {_CommandUnsubscribe'consumerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CommandUnsubscribe "requestId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CommandUnsubscribe'requestId
           (\ x__ y__ -> x__ {_CommandUnsubscribe'requestId = y__}))
        Prelude.id
instance Data.ProtoLens.Message CommandUnsubscribe where
  messageName _ = Data.Text.pack "pulsar.proto.CommandUnsubscribe"
  packedMessageDescriptor _
    = "\n\
      \\DC2CommandUnsubscribe\DC2\US\n\
      \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
      \consumerId\DC2\GS\n\
      \\n\
      \request_id\CAN\STX \STX(\EOTR\trequestId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        consumerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "consumer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"consumerId")) ::
              Data.ProtoLens.FieldDescriptor CommandUnsubscribe
        requestId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"requestId")) ::
              Data.ProtoLens.FieldDescriptor CommandUnsubscribe
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, consumerId__field_descriptor),
           (Data.ProtoLens.Tag 2, requestId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CommandUnsubscribe'_unknownFields
        (\ x__ y__ -> x__ {_CommandUnsubscribe'_unknownFields = y__})
  defMessage
    = CommandUnsubscribe'_constructor
        {_CommandUnsubscribe'consumerId = Data.ProtoLens.fieldDefault,
         _CommandUnsubscribe'requestId = Data.ProtoLens.fieldDefault,
         _CommandUnsubscribe'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CommandUnsubscribe
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser CommandUnsubscribe
        loop x required'consumerId required'requestId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'consumerId then (:) "consumer_id" else Prelude.id)
                               ((if required'requestId then (:) "request_id" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "consumer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"consumerId") y x)
                                  Prelude.False
                                  required'requestId
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "request_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"requestId") y x)
                                  required'consumerId
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'consumerId
                                  required'requestId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "CommandUnsubscribe"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"consumerId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"requestId") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData CommandUnsubscribe where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CommandUnsubscribe'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CommandUnsubscribe'consumerId x__)
                (Control.DeepSeq.deepseq (_CommandUnsubscribe'requestId x__) ()))
data CompressionType
  = NONE | LZ4 | ZLIB | ZSTD | SNAPPY
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum CompressionType where
  maybeToEnum 0 = Prelude.Just NONE
  maybeToEnum 1 = Prelude.Just LZ4
  maybeToEnum 2 = Prelude.Just ZLIB
  maybeToEnum 3 = Prelude.Just ZSTD
  maybeToEnum 4 = Prelude.Just SNAPPY
  maybeToEnum _ = Prelude.Nothing
  showEnum NONE = "NONE"
  showEnum LZ4 = "LZ4"
  showEnum ZLIB = "ZLIB"
  showEnum ZSTD = "ZSTD"
  showEnum SNAPPY = "SNAPPY"
  readEnum k
    | (Prelude.==) k "NONE" = Prelude.Just NONE
    | (Prelude.==) k "LZ4" = Prelude.Just LZ4
    | (Prelude.==) k "ZLIB" = Prelude.Just ZLIB
    | (Prelude.==) k "ZSTD" = Prelude.Just ZSTD
    | (Prelude.==) k "SNAPPY" = Prelude.Just SNAPPY
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded CompressionType where
  minBound = NONE
  maxBound = SNAPPY
instance Prelude.Enum CompressionType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum CompressionType: "
              (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum NONE = 0
  fromEnum LZ4 = 1
  fromEnum ZLIB = 2
  fromEnum ZSTD = 3
  fromEnum SNAPPY = 4
  succ SNAPPY
    = Prelude.error
        "CompressionType.succ: bad argument SNAPPY. This value would be out of bounds."
  succ NONE = LZ4
  succ LZ4 = ZLIB
  succ ZLIB = ZSTD
  succ ZSTD = SNAPPY
  pred NONE
    = Prelude.error
        "CompressionType.pred: bad argument NONE. This value would be out of bounds."
  pred LZ4 = NONE
  pred ZLIB = LZ4
  pred ZSTD = ZLIB
  pred SNAPPY = ZSTD
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault CompressionType where
  fieldDefault = NONE
instance Control.DeepSeq.NFData CompressionType where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.key' @:: Lens' EncryptionKeys Data.Text.Text@
         * 'Proto.PulsarApi_Fields.value' @:: Lens' EncryptionKeys Data.ByteString.ByteString@
         * 'Proto.PulsarApi_Fields.metadata' @:: Lens' EncryptionKeys [KeyValue]@
         * 'Proto.PulsarApi_Fields.vec'metadata' @:: Lens' EncryptionKeys (Data.Vector.Vector KeyValue)@ -}
data EncryptionKeys
  = EncryptionKeys'_constructor {_EncryptionKeys'key :: !Data.Text.Text,
                                 _EncryptionKeys'value :: !Data.ByteString.ByteString,
                                 _EncryptionKeys'metadata :: !(Data.Vector.Vector KeyValue),
                                 _EncryptionKeys'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show EncryptionKeys where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField EncryptionKeys "key" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EncryptionKeys'key (\ x__ y__ -> x__ {_EncryptionKeys'key = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EncryptionKeys "value" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EncryptionKeys'value
           (\ x__ y__ -> x__ {_EncryptionKeys'value = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EncryptionKeys "metadata" [KeyValue] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EncryptionKeys'metadata
           (\ x__ y__ -> x__ {_EncryptionKeys'metadata = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField EncryptionKeys "vec'metadata" (Data.Vector.Vector KeyValue) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EncryptionKeys'metadata
           (\ x__ y__ -> x__ {_EncryptionKeys'metadata = y__}))
        Prelude.id
instance Data.ProtoLens.Message EncryptionKeys where
  messageName _ = Data.Text.pack "pulsar.proto.EncryptionKeys"
  packedMessageDescriptor _
    = "\n\
      \\SOEncryptionKeys\DC2\DLE\n\
      \\ETXkey\CAN\SOH \STX(\tR\ETXkey\DC2\DC4\n\
      \\ENQvalue\CAN\STX \STX(\fR\ENQvalue\DC22\n\
      \\bmetadata\CAN\ETX \ETX(\v2\SYN.pulsar.proto.KeyValueR\bmetadata"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"key")) ::
              Data.ProtoLens.FieldDescriptor EncryptionKeys
        value__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"value")) ::
              Data.ProtoLens.FieldDescriptor EncryptionKeys
        metadata__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "metadata"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor KeyValue)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"metadata")) ::
              Data.ProtoLens.FieldDescriptor EncryptionKeys
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, key__field_descriptor),
           (Data.ProtoLens.Tag 2, value__field_descriptor),
           (Data.ProtoLens.Tag 3, metadata__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _EncryptionKeys'_unknownFields
        (\ x__ y__ -> x__ {_EncryptionKeys'_unknownFields = y__})
  defMessage
    = EncryptionKeys'_constructor
        {_EncryptionKeys'key = Data.ProtoLens.fieldDefault,
         _EncryptionKeys'value = Data.ProtoLens.fieldDefault,
         _EncryptionKeys'metadata = Data.Vector.Generic.empty,
         _EncryptionKeys'_unknownFields = []}
  parseMessage
    = let
        loop ::
          EncryptionKeys
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld KeyValue
                   -> Data.ProtoLens.Encoding.Bytes.Parser EncryptionKeys
        loop x required'key required'value mutable'metadata
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'metadata <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                              mutable'metadata)
                      (let
                         missing
                           = (if required'key then (:) "key" else Prelude.id)
                               ((if required'value then (:) "value" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'metadata") frozen'metadata x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y x)
                                  Prelude.False
                                  required'value
                                  mutable'metadata
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "value"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"value") y x)
                                  required'key
                                  Prelude.False
                                  mutable'metadata
                        26
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "metadata"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'metadata y)
                                loop x required'key required'value v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'key
                                  required'value
                                  mutable'metadata
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'metadata <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage
                Prelude.True
                Prelude.True
                mutable'metadata)
          "EncryptionKeys"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"key") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((\ bs
                       -> (Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"value") _x)))
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                      (\ _v
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                              ((Prelude..)
                                 (\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                 Data.ProtoLens.encodeMessage
                                 _v))
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"vec'metadata") _x))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData EncryptionKeys where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_EncryptionKeys'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_EncryptionKeys'key x__)
                (Control.DeepSeq.deepseq
                   (_EncryptionKeys'value x__)
                   (Control.DeepSeq.deepseq (_EncryptionKeys'metadata x__) ())))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.supportsAuthRefresh' @:: Lens' FeatureFlags Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'supportsAuthRefresh' @:: Lens' FeatureFlags (Prelude.Maybe Prelude.Bool)@ -}
data FeatureFlags
  = FeatureFlags'_constructor {_FeatureFlags'supportsAuthRefresh :: !(Prelude.Maybe Prelude.Bool),
                               _FeatureFlags'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show FeatureFlags where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField FeatureFlags "supportsAuthRefresh" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _FeatureFlags'supportsAuthRefresh
           (\ x__ y__ -> x__ {_FeatureFlags'supportsAuthRefresh = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField FeatureFlags "maybe'supportsAuthRefresh" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _FeatureFlags'supportsAuthRefresh
           (\ x__ y__ -> x__ {_FeatureFlags'supportsAuthRefresh = y__}))
        Prelude.id
instance Data.ProtoLens.Message FeatureFlags where
  messageName _ = Data.Text.pack "pulsar.proto.FeatureFlags"
  packedMessageDescriptor _
    = "\n\
      \\fFeatureFlags\DC29\n\
      \\NAKsupports_auth_refresh\CAN\SOH \SOH(\b:\ENQfalseR\DC3supportsAuthRefresh"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        supportsAuthRefresh__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "supports_auth_refresh"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'supportsAuthRefresh")) ::
              Data.ProtoLens.FieldDescriptor FeatureFlags
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, supportsAuthRefresh__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _FeatureFlags'_unknownFields
        (\ x__ y__ -> x__ {_FeatureFlags'_unknownFields = y__})
  defMessage
    = FeatureFlags'_constructor
        {_FeatureFlags'supportsAuthRefresh = Prelude.Nothing,
         _FeatureFlags'_unknownFields = []}
  parseMessage
    = let
        loop ::
          FeatureFlags -> Data.ProtoLens.Encoding.Bytes.Parser FeatureFlags
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "supports_auth_refresh"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"supportsAuthRefresh") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "FeatureFlags"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'supportsAuthRefresh") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt
                          (\ b -> if b then 1 else 0)
                          _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData FeatureFlags where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_FeatureFlags'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_FeatureFlags'supportsAuthRefresh x__) ())
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.start' @:: Lens' IntRange Data.Int.Int32@
         * 'Proto.PulsarApi_Fields.end' @:: Lens' IntRange Data.Int.Int32@ -}
data IntRange
  = IntRange'_constructor {_IntRange'start :: !Data.Int.Int32,
                           _IntRange'end :: !Data.Int.Int32,
                           _IntRange'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show IntRange where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField IntRange "start" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _IntRange'start (\ x__ y__ -> x__ {_IntRange'start = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField IntRange "end" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _IntRange'end (\ x__ y__ -> x__ {_IntRange'end = y__}))
        Prelude.id
instance Data.ProtoLens.Message IntRange where
  messageName _ = Data.Text.pack "pulsar.proto.IntRange"
  packedMessageDescriptor _
    = "\n\
      \\bIntRange\DC2\DC4\n\
      \\ENQstart\CAN\SOH \STX(\ENQR\ENQstart\DC2\DLE\n\
      \\ETXend\CAN\STX \STX(\ENQR\ETXend"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        start__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "start"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"start")) ::
              Data.ProtoLens.FieldDescriptor IntRange
        end__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "end"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"end")) ::
              Data.ProtoLens.FieldDescriptor IntRange
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, start__field_descriptor),
           (Data.ProtoLens.Tag 2, end__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _IntRange'_unknownFields
        (\ x__ y__ -> x__ {_IntRange'_unknownFields = y__})
  defMessage
    = IntRange'_constructor
        {_IntRange'start = Data.ProtoLens.fieldDefault,
         _IntRange'end = Data.ProtoLens.fieldDefault,
         _IntRange'_unknownFields = []}
  parseMessage
    = let
        loop ::
          IntRange
          -> Prelude.Bool
             -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser IntRange
        loop x required'end required'start
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'end then (:) "end" else Prelude.id)
                               ((if required'start then (:) "start" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "start"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"start") y x)
                                  required'end
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "end"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"end") y x)
                                  Prelude.False
                                  required'start
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'end
                                  required'start
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "IntRange"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                ((Prelude..)
                   Data.ProtoLens.Encoding.Bytes.putVarInt
                   Prelude.fromIntegral
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"start") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   ((Prelude..)
                      Data.ProtoLens.Encoding.Bytes.putVarInt
                      Prelude.fromIntegral
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"end") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData IntRange where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_IntRange'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_IntRange'start x__)
                (Control.DeepSeq.deepseq (_IntRange'end x__) ()))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.key' @:: Lens' KeyLongValue Data.Text.Text@
         * 'Proto.PulsarApi_Fields.value' @:: Lens' KeyLongValue Data.Word.Word64@ -}
data KeyLongValue
  = KeyLongValue'_constructor {_KeyLongValue'key :: !Data.Text.Text,
                               _KeyLongValue'value :: !Data.Word.Word64,
                               _KeyLongValue'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show KeyLongValue where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField KeyLongValue "key" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _KeyLongValue'key (\ x__ y__ -> x__ {_KeyLongValue'key = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField KeyLongValue "value" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _KeyLongValue'value (\ x__ y__ -> x__ {_KeyLongValue'value = y__}))
        Prelude.id
instance Data.ProtoLens.Message KeyLongValue where
  messageName _ = Data.Text.pack "pulsar.proto.KeyLongValue"
  packedMessageDescriptor _
    = "\n\
      \\fKeyLongValue\DC2\DLE\n\
      \\ETXkey\CAN\SOH \STX(\tR\ETXkey\DC2\DC4\n\
      \\ENQvalue\CAN\STX \STX(\EOTR\ENQvalue"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"key")) ::
              Data.ProtoLens.FieldDescriptor KeyLongValue
        value__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"value")) ::
              Data.ProtoLens.FieldDescriptor KeyLongValue
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, key__field_descriptor),
           (Data.ProtoLens.Tag 2, value__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _KeyLongValue'_unknownFields
        (\ x__ y__ -> x__ {_KeyLongValue'_unknownFields = y__})
  defMessage
    = KeyLongValue'_constructor
        {_KeyLongValue'key = Data.ProtoLens.fieldDefault,
         _KeyLongValue'value = Data.ProtoLens.fieldDefault,
         _KeyLongValue'_unknownFields = []}
  parseMessage
    = let
        loop ::
          KeyLongValue
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser KeyLongValue
        loop x required'key required'value
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'key then (:) "key" else Prelude.id)
                               ((if required'value then (:) "value" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y x)
                                  Prelude.False
                                  required'value
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "value"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"value") y x)
                                  required'key
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'key
                                  required'value
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "KeyLongValue"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"key") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"value") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData KeyLongValue where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_KeyLongValue'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_KeyLongValue'key x__)
                (Control.DeepSeq.deepseq (_KeyLongValue'value x__) ()))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.keySharedMode' @:: Lens' KeySharedMeta KeySharedMode@
         * 'Proto.PulsarApi_Fields.hashRanges' @:: Lens' KeySharedMeta [IntRange]@
         * 'Proto.PulsarApi_Fields.vec'hashRanges' @:: Lens' KeySharedMeta (Data.Vector.Vector IntRange)@
         * 'Proto.PulsarApi_Fields.allowOutOfOrderDelivery' @:: Lens' KeySharedMeta Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'allowOutOfOrderDelivery' @:: Lens' KeySharedMeta (Prelude.Maybe Prelude.Bool)@ -}
data KeySharedMeta
  = KeySharedMeta'_constructor {_KeySharedMeta'keySharedMode :: !KeySharedMode,
                                _KeySharedMeta'hashRanges :: !(Data.Vector.Vector IntRange),
                                _KeySharedMeta'allowOutOfOrderDelivery :: !(Prelude.Maybe Prelude.Bool),
                                _KeySharedMeta'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show KeySharedMeta where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField KeySharedMeta "keySharedMode" KeySharedMode where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _KeySharedMeta'keySharedMode
           (\ x__ y__ -> x__ {_KeySharedMeta'keySharedMode = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField KeySharedMeta "hashRanges" [IntRange] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _KeySharedMeta'hashRanges
           (\ x__ y__ -> x__ {_KeySharedMeta'hashRanges = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField KeySharedMeta "vec'hashRanges" (Data.Vector.Vector IntRange) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _KeySharedMeta'hashRanges
           (\ x__ y__ -> x__ {_KeySharedMeta'hashRanges = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField KeySharedMeta "allowOutOfOrderDelivery" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _KeySharedMeta'allowOutOfOrderDelivery
           (\ x__ y__ -> x__ {_KeySharedMeta'allowOutOfOrderDelivery = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField KeySharedMeta "maybe'allowOutOfOrderDelivery" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _KeySharedMeta'allowOutOfOrderDelivery
           (\ x__ y__ -> x__ {_KeySharedMeta'allowOutOfOrderDelivery = y__}))
        Prelude.id
instance Data.ProtoLens.Message KeySharedMeta where
  messageName _ = Data.Text.pack "pulsar.proto.KeySharedMeta"
  packedMessageDescriptor _
    = "\n\
      \\rKeySharedMeta\DC2A\n\
      \\rkeySharedMode\CAN\SOH \STX(\SO2\ESC.pulsar.proto.KeySharedModeR\rkeySharedMode\DC26\n\
      \\n\
      \hashRanges\CAN\ETX \ETX(\v2\SYN.pulsar.proto.IntRangeR\n\
      \hashRanges\DC2?\n\
      \\ETBallowOutOfOrderDelivery\CAN\EOT \SOH(\b:\ENQfalseR\ETBallowOutOfOrderDelivery"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        keySharedMode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "keySharedMode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor KeySharedMode)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"keySharedMode")) ::
              Data.ProtoLens.FieldDescriptor KeySharedMeta
        hashRanges__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "hashRanges"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor IntRange)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"hashRanges")) ::
              Data.ProtoLens.FieldDescriptor KeySharedMeta
        allowOutOfOrderDelivery__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "allowOutOfOrderDelivery"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'allowOutOfOrderDelivery")) ::
              Data.ProtoLens.FieldDescriptor KeySharedMeta
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, keySharedMode__field_descriptor),
           (Data.ProtoLens.Tag 3, hashRanges__field_descriptor),
           (Data.ProtoLens.Tag 4, allowOutOfOrderDelivery__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _KeySharedMeta'_unknownFields
        (\ x__ y__ -> x__ {_KeySharedMeta'_unknownFields = y__})
  defMessage
    = KeySharedMeta'_constructor
        {_KeySharedMeta'keySharedMode = Data.ProtoLens.fieldDefault,
         _KeySharedMeta'hashRanges = Data.Vector.Generic.empty,
         _KeySharedMeta'allowOutOfOrderDelivery = Prelude.Nothing,
         _KeySharedMeta'_unknownFields = []}
  parseMessage
    = let
        loop ::
          KeySharedMeta
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld IntRange
                -> Data.ProtoLens.Encoding.Bytes.Parser KeySharedMeta
        loop x required'keySharedMode mutable'hashRanges
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'hashRanges <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                mutable'hashRanges)
                      (let
                         missing
                           = (if required'keySharedMode then
                                  (:) "keySharedMode"
                              else
                                  Prelude.id)
                               []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'hashRanges")
                              frozen'hashRanges
                              x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "keySharedMode"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"keySharedMode") y x)
                                  Prelude.False
                                  mutable'hashRanges
                        26
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "hashRanges"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'hashRanges y)
                                loop x required'keySharedMode v
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "allowOutOfOrderDelivery"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"allowOutOfOrderDelivery") y x)
                                  required'keySharedMode
                                  mutable'hashRanges
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'keySharedMode
                                  mutable'hashRanges
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'hashRanges <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage Prelude.True mutable'hashRanges)
          "KeySharedMeta"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                ((Prelude..)
                   ((Prelude..)
                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                   Prelude.fromEnum
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"keySharedMode") _x)))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.ProtoLens.encodeMessage
                              _v))
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"vec'hashRanges") _x))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'allowOutOfOrderDelivery") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt
                                (\ b -> if b then 1 else 0)
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData KeySharedMeta where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_KeySharedMeta'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_KeySharedMeta'keySharedMode x__)
                (Control.DeepSeq.deepseq
                   (_KeySharedMeta'hashRanges x__)
                   (Control.DeepSeq.deepseq
                      (_KeySharedMeta'allowOutOfOrderDelivery x__) ())))
data KeySharedMode
  = AUTO_SPLIT | STICKY
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum KeySharedMode where
  maybeToEnum 0 = Prelude.Just AUTO_SPLIT
  maybeToEnum 1 = Prelude.Just STICKY
  maybeToEnum _ = Prelude.Nothing
  showEnum AUTO_SPLIT = "AUTO_SPLIT"
  showEnum STICKY = "STICKY"
  readEnum k
    | (Prelude.==) k "AUTO_SPLIT" = Prelude.Just AUTO_SPLIT
    | (Prelude.==) k "STICKY" = Prelude.Just STICKY
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded KeySharedMode where
  minBound = AUTO_SPLIT
  maxBound = STICKY
instance Prelude.Enum KeySharedMode where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum KeySharedMode: "
              (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum AUTO_SPLIT = 0
  fromEnum STICKY = 1
  succ STICKY
    = Prelude.error
        "KeySharedMode.succ: bad argument STICKY. This value would be out of bounds."
  succ AUTO_SPLIT = STICKY
  pred AUTO_SPLIT
    = Prelude.error
        "KeySharedMode.pred: bad argument AUTO_SPLIT. This value would be out of bounds."
  pred STICKY = AUTO_SPLIT
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault KeySharedMode where
  fieldDefault = AUTO_SPLIT
instance Control.DeepSeq.NFData KeySharedMode where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.key' @:: Lens' KeyValue Data.Text.Text@
         * 'Proto.PulsarApi_Fields.value' @:: Lens' KeyValue Data.Text.Text@ -}
data KeyValue
  = KeyValue'_constructor {_KeyValue'key :: !Data.Text.Text,
                           _KeyValue'value :: !Data.Text.Text,
                           _KeyValue'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show KeyValue where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField KeyValue "key" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _KeyValue'key (\ x__ y__ -> x__ {_KeyValue'key = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField KeyValue "value" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _KeyValue'value (\ x__ y__ -> x__ {_KeyValue'value = y__}))
        Prelude.id
instance Data.ProtoLens.Message KeyValue where
  messageName _ = Data.Text.pack "pulsar.proto.KeyValue"
  packedMessageDescriptor _
    = "\n\
      \\bKeyValue\DC2\DLE\n\
      \\ETXkey\CAN\SOH \STX(\tR\ETXkey\DC2\DC4\n\
      \\ENQvalue\CAN\STX \STX(\tR\ENQvalue"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"key")) ::
              Data.ProtoLens.FieldDescriptor KeyValue
        value__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"value")) ::
              Data.ProtoLens.FieldDescriptor KeyValue
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, key__field_descriptor),
           (Data.ProtoLens.Tag 2, value__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _KeyValue'_unknownFields
        (\ x__ y__ -> x__ {_KeyValue'_unknownFields = y__})
  defMessage
    = KeyValue'_constructor
        {_KeyValue'key = Data.ProtoLens.fieldDefault,
         _KeyValue'value = Data.ProtoLens.fieldDefault,
         _KeyValue'_unknownFields = []}
  parseMessage
    = let
        loop ::
          KeyValue
          -> Prelude.Bool
             -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser KeyValue
        loop x required'key required'value
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'key then (:) "key" else Prelude.id)
                               ((if required'value then (:) "value" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y x)
                                  Prelude.False
                                  required'value
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "value"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"value") y x)
                                  required'key
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'key
                                  required'value
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "KeyValue"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"key") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((Prelude..)
                      (\ bs
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      Data.Text.Encoding.encodeUtf8
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"value") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData KeyValue where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_KeyValue'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_KeyValue'key x__)
                (Control.DeepSeq.deepseq (_KeyValue'value x__) ()))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.ledgerId' @:: Lens' MessageIdData Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.entryId' @:: Lens' MessageIdData Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.partition' @:: Lens' MessageIdData Data.Int.Int32@
         * 'Proto.PulsarApi_Fields.maybe'partition' @:: Lens' MessageIdData (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.PulsarApi_Fields.batchIndex' @:: Lens' MessageIdData Data.Int.Int32@
         * 'Proto.PulsarApi_Fields.maybe'batchIndex' @:: Lens' MessageIdData (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.PulsarApi_Fields.ackSet' @:: Lens' MessageIdData [Data.Int.Int64]@
         * 'Proto.PulsarApi_Fields.vec'ackSet' @:: Lens' MessageIdData (Data.Vector.Unboxed.Vector Data.Int.Int64)@ -}
data MessageIdData
  = MessageIdData'_constructor {_MessageIdData'ledgerId :: !Data.Word.Word64,
                                _MessageIdData'entryId :: !Data.Word.Word64,
                                _MessageIdData'partition :: !(Prelude.Maybe Data.Int.Int32),
                                _MessageIdData'batchIndex :: !(Prelude.Maybe Data.Int.Int32),
                                _MessageIdData'ackSet :: !(Data.Vector.Unboxed.Vector Data.Int.Int64),
                                _MessageIdData'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show MessageIdData where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField MessageIdData "ledgerId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageIdData'ledgerId
           (\ x__ y__ -> x__ {_MessageIdData'ledgerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageIdData "entryId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageIdData'entryId
           (\ x__ y__ -> x__ {_MessageIdData'entryId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageIdData "partition" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageIdData'partition
           (\ x__ y__ -> x__ {_MessageIdData'partition = y__}))
        (Data.ProtoLens.maybeLens (-1))
instance Data.ProtoLens.Field.HasField MessageIdData "maybe'partition" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageIdData'partition
           (\ x__ y__ -> x__ {_MessageIdData'partition = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageIdData "batchIndex" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageIdData'batchIndex
           (\ x__ y__ -> x__ {_MessageIdData'batchIndex = y__}))
        (Data.ProtoLens.maybeLens (-1))
instance Data.ProtoLens.Field.HasField MessageIdData "maybe'batchIndex" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageIdData'batchIndex
           (\ x__ y__ -> x__ {_MessageIdData'batchIndex = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageIdData "ackSet" [Data.Int.Int64] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageIdData'ackSet
           (\ x__ y__ -> x__ {_MessageIdData'ackSet = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField MessageIdData "vec'ackSet" (Data.Vector.Unboxed.Vector Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageIdData'ackSet
           (\ x__ y__ -> x__ {_MessageIdData'ackSet = y__}))
        Prelude.id
instance Data.ProtoLens.Message MessageIdData where
  messageName _ = Data.Text.pack "pulsar.proto.MessageIdData"
  packedMessageDescriptor _
    = "\n\
      \\rMessageIdData\DC2\SUB\n\
      \\bledgerId\CAN\SOH \STX(\EOTR\bledgerId\DC2\CAN\n\
      \\aentryId\CAN\STX \STX(\EOTR\aentryId\DC2 \n\
      \\tpartition\CAN\ETX \SOH(\ENQ:\STX-1R\tpartition\DC2#\n\
      \\vbatch_index\CAN\EOT \SOH(\ENQ:\STX-1R\n\
      \batchIndex\DC2\ETB\n\
      \\aack_set\CAN\ENQ \ETX(\ETXR\ACKackSet"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        ledgerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ledgerId"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"ledgerId")) ::
              Data.ProtoLens.FieldDescriptor MessageIdData
        entryId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "entryId"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"entryId")) ::
              Data.ProtoLens.FieldDescriptor MessageIdData
        partition__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "partition"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'partition")) ::
              Data.ProtoLens.FieldDescriptor MessageIdData
        batchIndex__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "batch_index"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'batchIndex")) ::
              Data.ProtoLens.FieldDescriptor MessageIdData
        ackSet__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ack_set"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"ackSet")) ::
              Data.ProtoLens.FieldDescriptor MessageIdData
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, ledgerId__field_descriptor),
           (Data.ProtoLens.Tag 2, entryId__field_descriptor),
           (Data.ProtoLens.Tag 3, partition__field_descriptor),
           (Data.ProtoLens.Tag 4, batchIndex__field_descriptor),
           (Data.ProtoLens.Tag 5, ackSet__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _MessageIdData'_unknownFields
        (\ x__ y__ -> x__ {_MessageIdData'_unknownFields = y__})
  defMessage
    = MessageIdData'_constructor
        {_MessageIdData'ledgerId = Data.ProtoLens.fieldDefault,
         _MessageIdData'entryId = Data.ProtoLens.fieldDefault,
         _MessageIdData'partition = Prelude.Nothing,
         _MessageIdData'batchIndex = Prelude.Nothing,
         _MessageIdData'ackSet = Data.Vector.Generic.empty,
         _MessageIdData'_unknownFields = []}
  parseMessage
    = let
        loop ::
          MessageIdData
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Unboxed.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Int.Int64
                   -> Data.ProtoLens.Encoding.Bytes.Parser MessageIdData
        loop x required'entryId required'ledgerId mutable'ackSet
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'ackSet <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                         (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                            mutable'ackSet)
                      (let
                         missing
                           = (if required'entryId then (:) "entryId" else Prelude.id)
                               ((if required'ledgerId then (:) "ledgerId" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'ackSet") frozen'ackSet x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "ledgerId"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"ledgerId") y x)
                                  required'entryId
                                  Prelude.False
                                  mutable'ackSet
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "entryId"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"entryId") y x)
                                  Prelude.False
                                  required'ledgerId
                                  mutable'ackSet
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "partition"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"partition") y x)
                                  required'entryId
                                  required'ledgerId
                                  mutable'ackSet
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "batch_index"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"batchIndex") y x)
                                  required'entryId
                                  required'ledgerId
                                  mutable'ackSet
                        40
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (Prelude.fmap
                                           Prelude.fromIntegral
                                           Data.ProtoLens.Encoding.Bytes.getVarInt)
                                        "ack_set"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'ackSet y)
                                loop x required'entryId required'ledgerId v
                        42
                          -> do y <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                        Data.ProtoLens.Encoding.Bytes.isolate
                                          (Prelude.fromIntegral len)
                                          ((let
                                              ploop qs
                                                = do packedEnd <- Data.ProtoLens.Encoding.Bytes.atEnd
                                                     if packedEnd then
                                                         Prelude.return qs
                                                     else
                                                         do !q <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                                                    (Prelude.fmap
                                                                       Prelude.fromIntegral
                                                                       Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                                    "ack_set"
                                                            qs' <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                     (Data.ProtoLens.Encoding.Growing.append
                                                                        qs q)
                                                            ploop qs'
                                            in ploop)
                                             mutable'ackSet)
                                loop x required'entryId required'ledgerId y
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'entryId
                                  required'ledgerId
                                  mutable'ackSet
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'ackSet <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                  Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage Prelude.True Prelude.True mutable'ackSet)
          "MessageIdData"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                (Data.ProtoLens.Encoding.Bytes.putVarInt
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"ledgerId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"entryId") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'partition") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'batchIndex") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                            (\ _v
                               -> (Data.Monoid.<>)
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                    ((Prelude..)
                                       Data.ProtoLens.Encoding.Bytes.putVarInt
                                       Prelude.fromIntegral
                                       _v))
                            (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'ackSet") _x))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData MessageIdData where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_MessageIdData'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_MessageIdData'ledgerId x__)
                (Control.DeepSeq.deepseq
                   (_MessageIdData'entryId x__)
                   (Control.DeepSeq.deepseq
                      (_MessageIdData'partition x__)
                      (Control.DeepSeq.deepseq
                         (_MessageIdData'batchIndex x__)
                         (Control.DeepSeq.deepseq (_MessageIdData'ackSet x__) ())))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.producerName' @:: Lens' MessageMetadata Data.Text.Text@
         * 'Proto.PulsarApi_Fields.sequenceId' @:: Lens' MessageMetadata Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.publishTime' @:: Lens' MessageMetadata Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.properties' @:: Lens' MessageMetadata [KeyValue]@
         * 'Proto.PulsarApi_Fields.vec'properties' @:: Lens' MessageMetadata (Data.Vector.Vector KeyValue)@
         * 'Proto.PulsarApi_Fields.replicatedFrom' @:: Lens' MessageMetadata Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'replicatedFrom' @:: Lens' MessageMetadata (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.partitionKey' @:: Lens' MessageMetadata Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'partitionKey' @:: Lens' MessageMetadata (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.replicateTo' @:: Lens' MessageMetadata [Data.Text.Text]@
         * 'Proto.PulsarApi_Fields.vec'replicateTo' @:: Lens' MessageMetadata (Data.Vector.Vector Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.compression' @:: Lens' MessageMetadata CompressionType@
         * 'Proto.PulsarApi_Fields.maybe'compression' @:: Lens' MessageMetadata (Prelude.Maybe CompressionType)@
         * 'Proto.PulsarApi_Fields.uncompressedSize' @:: Lens' MessageMetadata Data.Word.Word32@
         * 'Proto.PulsarApi_Fields.maybe'uncompressedSize' @:: Lens' MessageMetadata (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.PulsarApi_Fields.numMessagesInBatch' @:: Lens' MessageMetadata Data.Int.Int32@
         * 'Proto.PulsarApi_Fields.maybe'numMessagesInBatch' @:: Lens' MessageMetadata (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.PulsarApi_Fields.eventTime' @:: Lens' MessageMetadata Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'eventTime' @:: Lens' MessageMetadata (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.encryptionKeys' @:: Lens' MessageMetadata [EncryptionKeys]@
         * 'Proto.PulsarApi_Fields.vec'encryptionKeys' @:: Lens' MessageMetadata (Data.Vector.Vector EncryptionKeys)@
         * 'Proto.PulsarApi_Fields.encryptionAlgo' @:: Lens' MessageMetadata Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'encryptionAlgo' @:: Lens' MessageMetadata (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.encryptionParam' @:: Lens' MessageMetadata Data.ByteString.ByteString@
         * 'Proto.PulsarApi_Fields.maybe'encryptionParam' @:: Lens' MessageMetadata (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.PulsarApi_Fields.schemaVersion' @:: Lens' MessageMetadata Data.ByteString.ByteString@
         * 'Proto.PulsarApi_Fields.maybe'schemaVersion' @:: Lens' MessageMetadata (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.PulsarApi_Fields.partitionKeyB64Encoded' @:: Lens' MessageMetadata Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'partitionKeyB64Encoded' @:: Lens' MessageMetadata (Prelude.Maybe Prelude.Bool)@
         * 'Proto.PulsarApi_Fields.orderingKey' @:: Lens' MessageMetadata Data.ByteString.ByteString@
         * 'Proto.PulsarApi_Fields.maybe'orderingKey' @:: Lens' MessageMetadata (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.PulsarApi_Fields.deliverAtTime' @:: Lens' MessageMetadata Data.Int.Int64@
         * 'Proto.PulsarApi_Fields.maybe'deliverAtTime' @:: Lens' MessageMetadata (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.PulsarApi_Fields.markerType' @:: Lens' MessageMetadata Data.Int.Int32@
         * 'Proto.PulsarApi_Fields.maybe'markerType' @:: Lens' MessageMetadata (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.PulsarApi_Fields.txnidLeastBits' @:: Lens' MessageMetadata Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidLeastBits' @:: Lens' MessageMetadata (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.txnidMostBits' @:: Lens' MessageMetadata Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'txnidMostBits' @:: Lens' MessageMetadata (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.highestSequenceId' @:: Lens' MessageMetadata Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'highestSequenceId' @:: Lens' MessageMetadata (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.nullValue' @:: Lens' MessageMetadata Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'nullValue' @:: Lens' MessageMetadata (Prelude.Maybe Prelude.Bool)@
         * 'Proto.PulsarApi_Fields.uuid' @:: Lens' MessageMetadata Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'uuid' @:: Lens' MessageMetadata (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.numChunksFromMsg' @:: Lens' MessageMetadata Data.Int.Int32@
         * 'Proto.PulsarApi_Fields.maybe'numChunksFromMsg' @:: Lens' MessageMetadata (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.PulsarApi_Fields.totalChunkMsgSize' @:: Lens' MessageMetadata Data.Int.Int32@
         * 'Proto.PulsarApi_Fields.maybe'totalChunkMsgSize' @:: Lens' MessageMetadata (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.PulsarApi_Fields.chunkId' @:: Lens' MessageMetadata Data.Int.Int32@
         * 'Proto.PulsarApi_Fields.maybe'chunkId' @:: Lens' MessageMetadata (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.PulsarApi_Fields.nullPartitionKey' @:: Lens' MessageMetadata Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'nullPartitionKey' @:: Lens' MessageMetadata (Prelude.Maybe Prelude.Bool)@ -}
data MessageMetadata
  = MessageMetadata'_constructor {_MessageMetadata'producerName :: !Data.Text.Text,
                                  _MessageMetadata'sequenceId :: !Data.Word.Word64,
                                  _MessageMetadata'publishTime :: !Data.Word.Word64,
                                  _MessageMetadata'properties :: !(Data.Vector.Vector KeyValue),
                                  _MessageMetadata'replicatedFrom :: !(Prelude.Maybe Data.Text.Text),
                                  _MessageMetadata'partitionKey :: !(Prelude.Maybe Data.Text.Text),
                                  _MessageMetadata'replicateTo :: !(Data.Vector.Vector Data.Text.Text),
                                  _MessageMetadata'compression :: !(Prelude.Maybe CompressionType),
                                  _MessageMetadata'uncompressedSize :: !(Prelude.Maybe Data.Word.Word32),
                                  _MessageMetadata'numMessagesInBatch :: !(Prelude.Maybe Data.Int.Int32),
                                  _MessageMetadata'eventTime :: !(Prelude.Maybe Data.Word.Word64),
                                  _MessageMetadata'encryptionKeys :: !(Data.Vector.Vector EncryptionKeys),
                                  _MessageMetadata'encryptionAlgo :: !(Prelude.Maybe Data.Text.Text),
                                  _MessageMetadata'encryptionParam :: !(Prelude.Maybe Data.ByteString.ByteString),
                                  _MessageMetadata'schemaVersion :: !(Prelude.Maybe Data.ByteString.ByteString),
                                  _MessageMetadata'partitionKeyB64Encoded :: !(Prelude.Maybe Prelude.Bool),
                                  _MessageMetadata'orderingKey :: !(Prelude.Maybe Data.ByteString.ByteString),
                                  _MessageMetadata'deliverAtTime :: !(Prelude.Maybe Data.Int.Int64),
                                  _MessageMetadata'markerType :: !(Prelude.Maybe Data.Int.Int32),
                                  _MessageMetadata'txnidLeastBits :: !(Prelude.Maybe Data.Word.Word64),
                                  _MessageMetadata'txnidMostBits :: !(Prelude.Maybe Data.Word.Word64),
                                  _MessageMetadata'highestSequenceId :: !(Prelude.Maybe Data.Word.Word64),
                                  _MessageMetadata'nullValue :: !(Prelude.Maybe Prelude.Bool),
                                  _MessageMetadata'uuid :: !(Prelude.Maybe Data.Text.Text),
                                  _MessageMetadata'numChunksFromMsg :: !(Prelude.Maybe Data.Int.Int32),
                                  _MessageMetadata'totalChunkMsgSize :: !(Prelude.Maybe Data.Int.Int32),
                                  _MessageMetadata'chunkId :: !(Prelude.Maybe Data.Int.Int32),
                                  _MessageMetadata'nullPartitionKey :: !(Prelude.Maybe Prelude.Bool),
                                  _MessageMetadata'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show MessageMetadata where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField MessageMetadata "producerName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'producerName
           (\ x__ y__ -> x__ {_MessageMetadata'producerName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "sequenceId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'sequenceId
           (\ x__ y__ -> x__ {_MessageMetadata'sequenceId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "publishTime" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'publishTime
           (\ x__ y__ -> x__ {_MessageMetadata'publishTime = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "properties" [KeyValue] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'properties
           (\ x__ y__ -> x__ {_MessageMetadata'properties = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField MessageMetadata "vec'properties" (Data.Vector.Vector KeyValue) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'properties
           (\ x__ y__ -> x__ {_MessageMetadata'properties = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "replicatedFrom" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'replicatedFrom
           (\ x__ y__ -> x__ {_MessageMetadata'replicatedFrom = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'replicatedFrom" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'replicatedFrom
           (\ x__ y__ -> x__ {_MessageMetadata'replicatedFrom = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "partitionKey" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'partitionKey
           (\ x__ y__ -> x__ {_MessageMetadata'partitionKey = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'partitionKey" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'partitionKey
           (\ x__ y__ -> x__ {_MessageMetadata'partitionKey = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "replicateTo" [Data.Text.Text] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'replicateTo
           (\ x__ y__ -> x__ {_MessageMetadata'replicateTo = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField MessageMetadata "vec'replicateTo" (Data.Vector.Vector Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'replicateTo
           (\ x__ y__ -> x__ {_MessageMetadata'replicateTo = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "compression" CompressionType where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'compression
           (\ x__ y__ -> x__ {_MessageMetadata'compression = y__}))
        (Data.ProtoLens.maybeLens NONE)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'compression" (Prelude.Maybe CompressionType) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'compression
           (\ x__ y__ -> x__ {_MessageMetadata'compression = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "uncompressedSize" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'uncompressedSize
           (\ x__ y__ -> x__ {_MessageMetadata'uncompressedSize = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'uncompressedSize" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'uncompressedSize
           (\ x__ y__ -> x__ {_MessageMetadata'uncompressedSize = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "numMessagesInBatch" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'numMessagesInBatch
           (\ x__ y__ -> x__ {_MessageMetadata'numMessagesInBatch = y__}))
        (Data.ProtoLens.maybeLens 1)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'numMessagesInBatch" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'numMessagesInBatch
           (\ x__ y__ -> x__ {_MessageMetadata'numMessagesInBatch = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "eventTime" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'eventTime
           (\ x__ y__ -> x__ {_MessageMetadata'eventTime = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'eventTime" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'eventTime
           (\ x__ y__ -> x__ {_MessageMetadata'eventTime = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "encryptionKeys" [EncryptionKeys] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'encryptionKeys
           (\ x__ y__ -> x__ {_MessageMetadata'encryptionKeys = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField MessageMetadata "vec'encryptionKeys" (Data.Vector.Vector EncryptionKeys) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'encryptionKeys
           (\ x__ y__ -> x__ {_MessageMetadata'encryptionKeys = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "encryptionAlgo" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'encryptionAlgo
           (\ x__ y__ -> x__ {_MessageMetadata'encryptionAlgo = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'encryptionAlgo" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'encryptionAlgo
           (\ x__ y__ -> x__ {_MessageMetadata'encryptionAlgo = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "encryptionParam" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'encryptionParam
           (\ x__ y__ -> x__ {_MessageMetadata'encryptionParam = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'encryptionParam" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'encryptionParam
           (\ x__ y__ -> x__ {_MessageMetadata'encryptionParam = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "schemaVersion" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'schemaVersion
           (\ x__ y__ -> x__ {_MessageMetadata'schemaVersion = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'schemaVersion" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'schemaVersion
           (\ x__ y__ -> x__ {_MessageMetadata'schemaVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "partitionKeyB64Encoded" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'partitionKeyB64Encoded
           (\ x__ y__ -> x__ {_MessageMetadata'partitionKeyB64Encoded = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'partitionKeyB64Encoded" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'partitionKeyB64Encoded
           (\ x__ y__ -> x__ {_MessageMetadata'partitionKeyB64Encoded = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "orderingKey" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'orderingKey
           (\ x__ y__ -> x__ {_MessageMetadata'orderingKey = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'orderingKey" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'orderingKey
           (\ x__ y__ -> x__ {_MessageMetadata'orderingKey = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "deliverAtTime" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'deliverAtTime
           (\ x__ y__ -> x__ {_MessageMetadata'deliverAtTime = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'deliverAtTime" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'deliverAtTime
           (\ x__ y__ -> x__ {_MessageMetadata'deliverAtTime = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "markerType" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'markerType
           (\ x__ y__ -> x__ {_MessageMetadata'markerType = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'markerType" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'markerType
           (\ x__ y__ -> x__ {_MessageMetadata'markerType = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "txnidLeastBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'txnidLeastBits
           (\ x__ y__ -> x__ {_MessageMetadata'txnidLeastBits = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'txnidLeastBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'txnidLeastBits
           (\ x__ y__ -> x__ {_MessageMetadata'txnidLeastBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "txnidMostBits" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'txnidMostBits
           (\ x__ y__ -> x__ {_MessageMetadata'txnidMostBits = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'txnidMostBits" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'txnidMostBits
           (\ x__ y__ -> x__ {_MessageMetadata'txnidMostBits = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "highestSequenceId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'highestSequenceId
           (\ x__ y__ -> x__ {_MessageMetadata'highestSequenceId = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'highestSequenceId" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'highestSequenceId
           (\ x__ y__ -> x__ {_MessageMetadata'highestSequenceId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "nullValue" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'nullValue
           (\ x__ y__ -> x__ {_MessageMetadata'nullValue = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'nullValue" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'nullValue
           (\ x__ y__ -> x__ {_MessageMetadata'nullValue = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "uuid" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'uuid
           (\ x__ y__ -> x__ {_MessageMetadata'uuid = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'uuid" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'uuid
           (\ x__ y__ -> x__ {_MessageMetadata'uuid = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "numChunksFromMsg" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'numChunksFromMsg
           (\ x__ y__ -> x__ {_MessageMetadata'numChunksFromMsg = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'numChunksFromMsg" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'numChunksFromMsg
           (\ x__ y__ -> x__ {_MessageMetadata'numChunksFromMsg = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "totalChunkMsgSize" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'totalChunkMsgSize
           (\ x__ y__ -> x__ {_MessageMetadata'totalChunkMsgSize = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'totalChunkMsgSize" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'totalChunkMsgSize
           (\ x__ y__ -> x__ {_MessageMetadata'totalChunkMsgSize = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "chunkId" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'chunkId
           (\ x__ y__ -> x__ {_MessageMetadata'chunkId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'chunkId" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'chunkId
           (\ x__ y__ -> x__ {_MessageMetadata'chunkId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MessageMetadata "nullPartitionKey" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'nullPartitionKey
           (\ x__ y__ -> x__ {_MessageMetadata'nullPartitionKey = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField MessageMetadata "maybe'nullPartitionKey" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MessageMetadata'nullPartitionKey
           (\ x__ y__ -> x__ {_MessageMetadata'nullPartitionKey = y__}))
        Prelude.id
instance Data.ProtoLens.Message MessageMetadata where
  messageName _ = Data.Text.pack "pulsar.proto.MessageMetadata"
  packedMessageDescriptor _
    = "\n\
      \\SIMessageMetadata\DC2#\n\
      \\rproducer_name\CAN\SOH \STX(\tR\fproducerName\DC2\US\n\
      \\vsequence_id\CAN\STX \STX(\EOTR\n\
      \sequenceId\DC2!\n\
      \\fpublish_time\CAN\ETX \STX(\EOTR\vpublishTime\DC26\n\
      \\n\
      \properties\CAN\EOT \ETX(\v2\SYN.pulsar.proto.KeyValueR\n\
      \properties\DC2'\n\
      \\SIreplicated_from\CAN\ENQ \SOH(\tR\SOreplicatedFrom\DC2#\n\
      \\rpartition_key\CAN\ACK \SOH(\tR\fpartitionKey\DC2!\n\
      \\freplicate_to\CAN\a \ETX(\tR\vreplicateTo\DC2E\n\
      \\vcompression\CAN\b \SOH(\SO2\GS.pulsar.proto.CompressionType:\EOTNONER\vcompression\DC2.\n\
      \\DC1uncompressed_size\CAN\t \SOH(\r:\SOH0R\DLEuncompressedSize\DC24\n\
      \\NAKnum_messages_in_batch\CAN\v \SOH(\ENQ:\SOH1R\DC2numMessagesInBatch\DC2 \n\
      \\n\
      \event_time\CAN\f \SOH(\EOT:\SOH0R\teventTime\DC2E\n\
      \\SIencryption_keys\CAN\r \ETX(\v2\FS.pulsar.proto.EncryptionKeysR\SOencryptionKeys\DC2'\n\
      \\SIencryption_algo\CAN\SO \SOH(\tR\SOencryptionAlgo\DC2)\n\
      \\DLEencryption_param\CAN\SI \SOH(\fR\SIencryptionParam\DC2%\n\
      \\SOschema_version\CAN\DLE \SOH(\fR\rschemaVersion\DC2@\n\
      \\EMpartition_key_b64_encoded\CAN\DC1 \SOH(\b:\ENQfalseR\SYNpartitionKeyB64Encoded\DC2!\n\
      \\fordering_key\CAN\DC2 \SOH(\fR\vorderingKey\DC2&\n\
      \\SIdeliver_at_time\CAN\DC3 \SOH(\ETXR\rdeliverAtTime\DC2\US\n\
      \\vmarker_type\CAN\DC4 \SOH(\ENQR\n\
      \markerType\DC2(\n\
      \\DLEtxnid_least_bits\CAN\SYN \SOH(\EOTR\SOtxnidLeastBits\DC2&\n\
      \\SItxnid_most_bits\CAN\ETB \SOH(\EOTR\rtxnidMostBits\DC21\n\
      \\DC3highest_sequence_id\CAN\CAN \SOH(\EOT:\SOH0R\DC1highestSequenceId\DC2$\n\
      \\n\
      \null_value\CAN\EM \SOH(\b:\ENQfalseR\tnullValue\DC2\DC2\n\
      \\EOTuuid\CAN\SUB \SOH(\tR\EOTuuid\DC2-\n\
      \\DC3num_chunks_from_msg\CAN\ESC \SOH(\ENQR\DLEnumChunksFromMsg\DC2/\n\
      \\DC4total_chunk_msg_size\CAN\FS \SOH(\ENQR\DC1totalChunkMsgSize\DC2\EM\n\
      \\bchunk_id\CAN\GS \SOH(\ENQR\achunkId\DC23\n\
      \\DC2null_partition_key\CAN\RS \SOH(\b:\ENQfalseR\DLEnullPartitionKey"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        producerName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "producer_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"producerName")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        sequenceId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sequence_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"sequenceId")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        publishTime__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "publish_time"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"publishTime")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        properties__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "properties"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor KeyValue)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"properties")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        replicatedFrom__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "replicated_from"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'replicatedFrom")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        partitionKey__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "partition_key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'partitionKey")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        replicateTo__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "replicate_to"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"replicateTo")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        compression__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "compression"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor CompressionType)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'compression")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        uncompressedSize__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "uncompressed_size"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'uncompressedSize")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        numMessagesInBatch__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "num_messages_in_batch"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'numMessagesInBatch")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        eventTime__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "event_time"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'eventTime")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        encryptionKeys__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "encryption_keys"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor EncryptionKeys)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"encryptionKeys")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        encryptionAlgo__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "encryption_algo"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'encryptionAlgo")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        encryptionParam__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "encryption_param"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'encryptionParam")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        schemaVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "schema_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'schemaVersion")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        partitionKeyB64Encoded__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "partition_key_b64_encoded"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'partitionKeyB64Encoded")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        orderingKey__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ordering_key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'orderingKey")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        deliverAtTime__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "deliver_at_time"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'deliverAtTime")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        markerType__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "marker_type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'markerType")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        txnidLeastBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_least_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidLeastBits")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        txnidMostBits__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "txnid_most_bits"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'txnidMostBits")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        highestSequenceId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "highest_sequence_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'highestSequenceId")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        nullValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "null_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nullValue")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        uuid__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "uuid"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'uuid")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        numChunksFromMsg__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "num_chunks_from_msg"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'numChunksFromMsg")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        totalChunkMsgSize__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "total_chunk_msg_size"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'totalChunkMsgSize")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        chunkId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "chunk_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'chunkId")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
        nullPartitionKey__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "null_partition_key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nullPartitionKey")) ::
              Data.ProtoLens.FieldDescriptor MessageMetadata
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, producerName__field_descriptor),
           (Data.ProtoLens.Tag 2, sequenceId__field_descriptor),
           (Data.ProtoLens.Tag 3, publishTime__field_descriptor),
           (Data.ProtoLens.Tag 4, properties__field_descriptor),
           (Data.ProtoLens.Tag 5, replicatedFrom__field_descriptor),
           (Data.ProtoLens.Tag 6, partitionKey__field_descriptor),
           (Data.ProtoLens.Tag 7, replicateTo__field_descriptor),
           (Data.ProtoLens.Tag 8, compression__field_descriptor),
           (Data.ProtoLens.Tag 9, uncompressedSize__field_descriptor),
           (Data.ProtoLens.Tag 11, numMessagesInBatch__field_descriptor),
           (Data.ProtoLens.Tag 12, eventTime__field_descriptor),
           (Data.ProtoLens.Tag 13, encryptionKeys__field_descriptor),
           (Data.ProtoLens.Tag 14, encryptionAlgo__field_descriptor),
           (Data.ProtoLens.Tag 15, encryptionParam__field_descriptor),
           (Data.ProtoLens.Tag 16, schemaVersion__field_descriptor),
           (Data.ProtoLens.Tag 17, partitionKeyB64Encoded__field_descriptor),
           (Data.ProtoLens.Tag 18, orderingKey__field_descriptor),
           (Data.ProtoLens.Tag 19, deliverAtTime__field_descriptor),
           (Data.ProtoLens.Tag 20, markerType__field_descriptor),
           (Data.ProtoLens.Tag 22, txnidLeastBits__field_descriptor),
           (Data.ProtoLens.Tag 23, txnidMostBits__field_descriptor),
           (Data.ProtoLens.Tag 24, highestSequenceId__field_descriptor),
           (Data.ProtoLens.Tag 25, nullValue__field_descriptor),
           (Data.ProtoLens.Tag 26, uuid__field_descriptor),
           (Data.ProtoLens.Tag 27, numChunksFromMsg__field_descriptor),
           (Data.ProtoLens.Tag 28, totalChunkMsgSize__field_descriptor),
           (Data.ProtoLens.Tag 29, chunkId__field_descriptor),
           (Data.ProtoLens.Tag 30, nullPartitionKey__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _MessageMetadata'_unknownFields
        (\ x__ y__ -> x__ {_MessageMetadata'_unknownFields = y__})
  defMessage
    = MessageMetadata'_constructor
        {_MessageMetadata'producerName = Data.ProtoLens.fieldDefault,
         _MessageMetadata'sequenceId = Data.ProtoLens.fieldDefault,
         _MessageMetadata'publishTime = Data.ProtoLens.fieldDefault,
         _MessageMetadata'properties = Data.Vector.Generic.empty,
         _MessageMetadata'replicatedFrom = Prelude.Nothing,
         _MessageMetadata'partitionKey = Prelude.Nothing,
         _MessageMetadata'replicateTo = Data.Vector.Generic.empty,
         _MessageMetadata'compression = Prelude.Nothing,
         _MessageMetadata'uncompressedSize = Prelude.Nothing,
         _MessageMetadata'numMessagesInBatch = Prelude.Nothing,
         _MessageMetadata'eventTime = Prelude.Nothing,
         _MessageMetadata'encryptionKeys = Data.Vector.Generic.empty,
         _MessageMetadata'encryptionAlgo = Prelude.Nothing,
         _MessageMetadata'encryptionParam = Prelude.Nothing,
         _MessageMetadata'schemaVersion = Prelude.Nothing,
         _MessageMetadata'partitionKeyB64Encoded = Prelude.Nothing,
         _MessageMetadata'orderingKey = Prelude.Nothing,
         _MessageMetadata'deliverAtTime = Prelude.Nothing,
         _MessageMetadata'markerType = Prelude.Nothing,
         _MessageMetadata'txnidLeastBits = Prelude.Nothing,
         _MessageMetadata'txnidMostBits = Prelude.Nothing,
         _MessageMetadata'highestSequenceId = Prelude.Nothing,
         _MessageMetadata'nullValue = Prelude.Nothing,
         _MessageMetadata'uuid = Prelude.Nothing,
         _MessageMetadata'numChunksFromMsg = Prelude.Nothing,
         _MessageMetadata'totalChunkMsgSize = Prelude.Nothing,
         _MessageMetadata'chunkId = Prelude.Nothing,
         _MessageMetadata'nullPartitionKey = Prelude.Nothing,
         _MessageMetadata'_unknownFields = []}
  parseMessage
    = let
        loop ::
          MessageMetadata
          -> Prelude.Bool
             -> Prelude.Bool
                -> Prelude.Bool
                   -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld EncryptionKeys
                      -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld KeyValue
                         -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Text.Text
                            -> Data.ProtoLens.Encoding.Bytes.Parser MessageMetadata
        loop
          x
          required'producerName
          required'publishTime
          required'sequenceId
          mutable'encryptionKeys
          mutable'properties
          mutable'replicateTo
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'encryptionKeys <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                 (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                    mutable'encryptionKeys)
                      frozen'properties <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                mutable'properties)
                      frozen'replicateTo <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                              (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                 mutable'replicateTo)
                      (let
                         missing
                           = (if required'producerName then
                                  (:) "producer_name"
                              else
                                  Prelude.id)
                               ((if required'publishTime then (:) "publish_time" else Prelude.id)
                                  ((if required'sequenceId then (:) "sequence_id" else Prelude.id)
                                     []))
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'encryptionKeys")
                              frozen'encryptionKeys
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'properties")
                                 frozen'properties
                                 (Lens.Family2.set
                                    (Data.ProtoLens.Field.field @"vec'replicateTo")
                                    frozen'replicateTo
                                    x))))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "producer_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"producerName") y x)
                                  Prelude.False
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "sequence_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"sequenceId") y x)
                                  required'producerName
                                  required'publishTime
                                  Prelude.False
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "publish_time"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"publishTime") y x)
                                  required'producerName
                                  Prelude.False
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        34
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "properties"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'properties y)
                                loop
                                  x
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  v
                                  mutable'replicateTo
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "replicated_from"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"replicatedFrom") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "partition_key"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"partitionKey") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        58
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                        Data.ProtoLens.Encoding.Bytes.getBytes
                                                          (Prelude.fromIntegral len)
                                            Data.ProtoLens.Encoding.Bytes.runEither
                                              (case Data.Text.Encoding.decodeUtf8' value of
                                                 (Prelude.Left err)
                                                   -> Prelude.Left (Prelude.show err)
                                                 (Prelude.Right r) -> Prelude.Right r))
                                        "replicate_to"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'replicateTo y)
                                loop
                                  x
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  v
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "compression"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"compression") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "uncompressed_size"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"uncompressedSize") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        88
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "num_messages_in_batch"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"numMessagesInBatch") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        96
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "event_time"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"eventTime") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        106
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "encryption_keys"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'encryptionKeys y)
                                loop
                                  x
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  v
                                  mutable'properties
                                  mutable'replicateTo
                        114
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "encryption_algo"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"encryptionAlgo") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        122
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "encryption_param"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"encryptionParam") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        130
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "schema_version"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"schemaVersion") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        136
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "partition_key_b64_encoded"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"partitionKeyB64Encoded") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        146
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "ordering_key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"orderingKey") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        152
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "deliver_at_time"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"deliverAtTime") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        160
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "marker_type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"markerType") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        176
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_least_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidLeastBits") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        184
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "txnid_most_bits"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"txnidMostBits") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        192
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "highest_sequence_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"highestSequenceId") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        200
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "null_value"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"nullValue") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        210
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "uuid"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"uuid") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        216
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "num_chunks_from_msg"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"numChunksFromMsg") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        224
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "total_chunk_msg_size"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"totalChunkMsgSize") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        232
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "chunk_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"chunkId") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        240
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "null_partition_key"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"nullPartitionKey") y x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'producerName
                                  required'publishTime
                                  required'sequenceId
                                  mutable'encryptionKeys
                                  mutable'properties
                                  mutable'replicateTo
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'encryptionKeys <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          Data.ProtoLens.Encoding.Growing.new
              mutable'properties <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      Data.ProtoLens.Encoding.Growing.new
              mutable'replicateTo <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage
                Prelude.True
                Prelude.True
                Prelude.True
                mutable'encryptionKeys
                mutable'properties
                mutable'replicateTo)
          "MessageMetadata"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"producerName") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"sequenceId") _x)))
                ((Data.Monoid.<>)
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                         (Lens.Family2.view
                            (Data.ProtoLens.Field.field @"publishTime") _x)))
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                         (\ _v
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                 ((Prelude..)
                                    (\ bs
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                    Data.ProtoLens.encodeMessage
                                    _v))
                         (Lens.Family2.view
                            (Data.ProtoLens.Field.field @"vec'properties") _x))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'replicatedFrom") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'partitionKey") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                      ((Prelude..)
                                         (\ bs
                                            -> (Data.Monoid.<>)
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                    (Prelude.fromIntegral
                                                       (Data.ByteString.length bs)))
                                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         Data.Text.Encoding.encodeUtf8
                                         _v))
                            ((Data.Monoid.<>)
                               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                  (\ _v
                                     -> (Data.Monoid.<>)
                                          (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                          ((Prelude..)
                                             (\ bs
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        (Prelude.fromIntegral
                                                           (Data.ByteString.length bs)))
                                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                             Data.Text.Encoding.encodeUtf8
                                             _v))
                                  (Lens.Family2.view
                                     (Data.ProtoLens.Field.field @"vec'replicateTo") _x))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'compression") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  Prelude.fromIntegral)
                                               Prelude.fromEnum
                                               _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'uncompressedSize")
                                            _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  Prelude.fromIntegral
                                                  _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field
                                                  @"maybe'numMessagesInBatch")
                                               _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 88)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     Prelude.fromIntegral
                                                     _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field @"maybe'eventTime") _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 96)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                                           ((Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                                 (\ _v
                                                    -> (Data.Monoid.<>)
                                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                            106)
                                                         ((Prelude..)
                                                            (\ bs
                                                               -> (Data.Monoid.<>)
                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       (Prelude.fromIntegral
                                                                          (Data.ByteString.length
                                                                             bs)))
                                                                    (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                       bs))
                                                            Data.ProtoLens.encodeMessage
                                                            _v))
                                                 (Lens.Family2.view
                                                    (Data.ProtoLens.Field.field
                                                       @"vec'encryptionKeys")
                                                    _x))
                                              ((Data.Monoid.<>)
                                                 (case
                                                      Lens.Family2.view
                                                        (Data.ProtoLens.Field.field
                                                           @"maybe'encryptionAlgo")
                                                        _x
                                                  of
                                                    Prelude.Nothing -> Data.Monoid.mempty
                                                    (Prelude.Just _v)
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              114)
                                                           ((Prelude..)
                                                              (\ bs
                                                                 -> (Data.Monoid.<>)
                                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                         (Prelude.fromIntegral
                                                                            (Data.ByteString.length
                                                                               bs)))
                                                                      (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                         bs))
                                                              Data.Text.Encoding.encodeUtf8
                                                              _v))
                                                 ((Data.Monoid.<>)
                                                    (case
                                                         Lens.Family2.view
                                                           (Data.ProtoLens.Field.field
                                                              @"maybe'encryptionParam")
                                                           _x
                                                     of
                                                       Prelude.Nothing -> Data.Monoid.mempty
                                                       (Prelude.Just _v)
                                                         -> (Data.Monoid.<>)
                                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 122)
                                                              ((\ bs
                                                                  -> (Data.Monoid.<>)
                                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                          (Prelude.fromIntegral
                                                                             (Data.ByteString.length
                                                                                bs)))
                                                                       (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                          bs))
                                                                 _v))
                                                    ((Data.Monoid.<>)
                                                       (case
                                                            Lens.Family2.view
                                                              (Data.ProtoLens.Field.field
                                                                 @"maybe'schemaVersion")
                                                              _x
                                                        of
                                                          Prelude.Nothing -> Data.Monoid.mempty
                                                          (Prelude.Just _v)
                                                            -> (Data.Monoid.<>)
                                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    130)
                                                                 ((\ bs
                                                                     -> (Data.Monoid.<>)
                                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                             (Prelude.fromIntegral
                                                                                (Data.ByteString.length
                                                                                   bs)))
                                                                          (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                             bs))
                                                                    _v))
                                                       ((Data.Monoid.<>)
                                                          (case
                                                               Lens.Family2.view
                                                                 (Data.ProtoLens.Field.field
                                                                    @"maybe'partitionKeyB64Encoded")
                                                                 _x
                                                           of
                                                             Prelude.Nothing -> Data.Monoid.mempty
                                                             (Prelude.Just _v)
                                                               -> (Data.Monoid.<>)
                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       136)
                                                                    ((Prelude..)
                                                                       Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       (\ b -> if b then 1 else 0)
                                                                       _v))
                                                          ((Data.Monoid.<>)
                                                             (case
                                                                  Lens.Family2.view
                                                                    (Data.ProtoLens.Field.field
                                                                       @"maybe'orderingKey")
                                                                    _x
                                                              of
                                                                Prelude.Nothing
                                                                  -> Data.Monoid.mempty
                                                                (Prelude.Just _v)
                                                                  -> (Data.Monoid.<>)
                                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                          146)
                                                                       ((\ bs
                                                                           -> (Data.Monoid.<>)
                                                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                   (Prelude.fromIntegral
                                                                                      (Data.ByteString.length
                                                                                         bs)))
                                                                                (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                   bs))
                                                                          _v))
                                                             ((Data.Monoid.<>)
                                                                (case
                                                                     Lens.Family2.view
                                                                       (Data.ProtoLens.Field.field
                                                                          @"maybe'deliverAtTime")
                                                                       _x
                                                                 of
                                                                   Prelude.Nothing
                                                                     -> Data.Monoid.mempty
                                                                   (Prelude.Just _v)
                                                                     -> (Data.Monoid.<>)
                                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                             152)
                                                                          ((Prelude..)
                                                                             Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                             Prelude.fromIntegral
                                                                             _v))
                                                                ((Data.Monoid.<>)
                                                                   (case
                                                                        Lens.Family2.view
                                                                          (Data.ProtoLens.Field.field
                                                                             @"maybe'markerType")
                                                                          _x
                                                                    of
                                                                      Prelude.Nothing
                                                                        -> Data.Monoid.mempty
                                                                      (Prelude.Just _v)
                                                                        -> (Data.Monoid.<>)
                                                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                160)
                                                                             ((Prelude..)
                                                                                Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                Prelude.fromIntegral
                                                                                _v))
                                                                   ((Data.Monoid.<>)
                                                                      (case
                                                                           Lens.Family2.view
                                                                             (Data.ProtoLens.Field.field
                                                                                @"maybe'txnidLeastBits")
                                                                             _x
                                                                       of
                                                                         Prelude.Nothing
                                                                           -> Data.Monoid.mempty
                                                                         (Prelude.Just _v)
                                                                           -> (Data.Monoid.<>)
                                                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                   176)
                                                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                   _v))
                                                                      ((Data.Monoid.<>)
                                                                         (case
                                                                              Lens.Family2.view
                                                                                (Data.ProtoLens.Field.field
                                                                                   @"maybe'txnidMostBits")
                                                                                _x
                                                                          of
                                                                            Prelude.Nothing
                                                                              -> Data.Monoid.mempty
                                                                            (Prelude.Just _v)
                                                                              -> (Data.Monoid.<>)
                                                                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                      184)
                                                                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                      _v))
                                                                         ((Data.Monoid.<>)
                                                                            (case
                                                                                 Lens.Family2.view
                                                                                   (Data.ProtoLens.Field.field
                                                                                      @"maybe'highestSequenceId")
                                                                                   _x
                                                                             of
                                                                               Prelude.Nothing
                                                                                 -> Data.Monoid.mempty
                                                                               (Prelude.Just _v)
                                                                                 -> (Data.Monoid.<>)
                                                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                         192)
                                                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                         _v))
                                                                            ((Data.Monoid.<>)
                                                                               (case
                                                                                    Lens.Family2.view
                                                                                      (Data.ProtoLens.Field.field
                                                                                         @"maybe'nullValue")
                                                                                      _x
                                                                                of
                                                                                  Prelude.Nothing
                                                                                    -> Data.Monoid.mempty
                                                                                  (Prelude.Just _v)
                                                                                    -> (Data.Monoid.<>)
                                                                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                            200)
                                                                                         ((Prelude..)
                                                                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                            (\ b
                                                                                               -> if b then
                                                                                                      1
                                                                                                  else
                                                                                                      0)
                                                                                            _v))
                                                                               ((Data.Monoid.<>)
                                                                                  (case
                                                                                       Lens.Family2.view
                                                                                         (Data.ProtoLens.Field.field
                                                                                            @"maybe'uuid")
                                                                                         _x
                                                                                   of
                                                                                     Prelude.Nothing
                                                                                       -> Data.Monoid.mempty
                                                                                     (Prelude.Just _v)
                                                                                       -> (Data.Monoid.<>)
                                                                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                               210)
                                                                                            ((Prelude..)
                                                                                               (\ bs
                                                                                                  -> (Data.Monoid.<>)
                                                                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                          (Prelude.fromIntegral
                                                                                                             (Data.ByteString.length
                                                                                                                bs)))
                                                                                                       (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                          bs))
                                                                                               Data.Text.Encoding.encodeUtf8
                                                                                               _v))
                                                                                  ((Data.Monoid.<>)
                                                                                     (case
                                                                                          Lens.Family2.view
                                                                                            (Data.ProtoLens.Field.field
                                                                                               @"maybe'numChunksFromMsg")
                                                                                            _x
                                                                                      of
                                                                                        Prelude.Nothing
                                                                                          -> Data.Monoid.mempty
                                                                                        (Prelude.Just _v)
                                                                                          -> (Data.Monoid.<>)
                                                                                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                  216)
                                                                                               ((Prelude..)
                                                                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                  Prelude.fromIntegral
                                                                                                  _v))
                                                                                     ((Data.Monoid.<>)
                                                                                        (case
                                                                                             Lens.Family2.view
                                                                                               (Data.ProtoLens.Field.field
                                                                                                  @"maybe'totalChunkMsgSize")
                                                                                               _x
                                                                                         of
                                                                                           Prelude.Nothing
                                                                                             -> Data.Monoid.mempty
                                                                                           (Prelude.Just _v)
                                                                                             -> (Data.Monoid.<>)
                                                                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                     224)
                                                                                                  ((Prelude..)
                                                                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                     Prelude.fromIntegral
                                                                                                     _v))
                                                                                        ((Data.Monoid.<>)
                                                                                           (case
                                                                                                Lens.Family2.view
                                                                                                  (Data.ProtoLens.Field.field
                                                                                                     @"maybe'chunkId")
                                                                                                  _x
                                                                                            of
                                                                                              Prelude.Nothing
                                                                                                -> Data.Monoid.mempty
                                                                                              (Prelude.Just _v)
                                                                                                -> (Data.Monoid.<>)
                                                                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                        232)
                                                                                                     ((Prelude..)
                                                                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                        Prelude.fromIntegral
                                                                                                        _v))
                                                                                           ((Data.Monoid.<>)
                                                                                              (case
                                                                                                   Lens.Family2.view
                                                                                                     (Data.ProtoLens.Field.field
                                                                                                        @"maybe'nullPartitionKey")
                                                                                                     _x
                                                                                               of
                                                                                                 Prelude.Nothing
                                                                                                   -> Data.Monoid.mempty
                                                                                                 (Prelude.Just _v)
                                                                                                   -> (Data.Monoid.<>)
                                                                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                           240)
                                                                                                        ((Prelude..)
                                                                                                           Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                           (\ b
                                                                                                              -> if b then
                                                                                                                     1
                                                                                                                 else
                                                                                                                     0)
                                                                                                           _v))
                                                                                              (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                                                                 (Lens.Family2.view
                                                                                                    Data.ProtoLens.unknownFields
                                                                                                    _x)))))))))))))))))))))))))))))
instance Control.DeepSeq.NFData MessageMetadata where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_MessageMetadata'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_MessageMetadata'producerName x__)
                (Control.DeepSeq.deepseq
                   (_MessageMetadata'sequenceId x__)
                   (Control.DeepSeq.deepseq
                      (_MessageMetadata'publishTime x__)
                      (Control.DeepSeq.deepseq
                         (_MessageMetadata'properties x__)
                         (Control.DeepSeq.deepseq
                            (_MessageMetadata'replicatedFrom x__)
                            (Control.DeepSeq.deepseq
                               (_MessageMetadata'partitionKey x__)
                               (Control.DeepSeq.deepseq
                                  (_MessageMetadata'replicateTo x__)
                                  (Control.DeepSeq.deepseq
                                     (_MessageMetadata'compression x__)
                                     (Control.DeepSeq.deepseq
                                        (_MessageMetadata'uncompressedSize x__)
                                        (Control.DeepSeq.deepseq
                                           (_MessageMetadata'numMessagesInBatch x__)
                                           (Control.DeepSeq.deepseq
                                              (_MessageMetadata'eventTime x__)
                                              (Control.DeepSeq.deepseq
                                                 (_MessageMetadata'encryptionKeys x__)
                                                 (Control.DeepSeq.deepseq
                                                    (_MessageMetadata'encryptionAlgo x__)
                                                    (Control.DeepSeq.deepseq
                                                       (_MessageMetadata'encryptionParam x__)
                                                       (Control.DeepSeq.deepseq
                                                          (_MessageMetadata'schemaVersion x__)
                                                          (Control.DeepSeq.deepseq
                                                             (_MessageMetadata'partitionKeyB64Encoded
                                                                x__)
                                                             (Control.DeepSeq.deepseq
                                                                (_MessageMetadata'orderingKey x__)
                                                                (Control.DeepSeq.deepseq
                                                                   (_MessageMetadata'deliverAtTime
                                                                      x__)
                                                                   (Control.DeepSeq.deepseq
                                                                      (_MessageMetadata'markerType
                                                                         x__)
                                                                      (Control.DeepSeq.deepseq
                                                                         (_MessageMetadata'txnidLeastBits
                                                                            x__)
                                                                         (Control.DeepSeq.deepseq
                                                                            (_MessageMetadata'txnidMostBits
                                                                               x__)
                                                                            (Control.DeepSeq.deepseq
                                                                               (_MessageMetadata'highestSequenceId
                                                                                  x__)
                                                                               (Control.DeepSeq.deepseq
                                                                                  (_MessageMetadata'nullValue
                                                                                     x__)
                                                                                  (Control.DeepSeq.deepseq
                                                                                     (_MessageMetadata'uuid
                                                                                        x__)
                                                                                     (Control.DeepSeq.deepseq
                                                                                        (_MessageMetadata'numChunksFromMsg
                                                                                           x__)
                                                                                        (Control.DeepSeq.deepseq
                                                                                           (_MessageMetadata'totalChunkMsgSize
                                                                                              x__)
                                                                                           (Control.DeepSeq.deepseq
                                                                                              (_MessageMetadata'chunkId
                                                                                                 x__)
                                                                                              (Control.DeepSeq.deepseq
                                                                                                 (_MessageMetadata'nullPartitionKey
                                                                                                    x__)
                                                                                                 ()))))))))))))))))))))))))))))
data ProtocolVersion
  = V0 |
    V1 |
    V2 |
    V3 |
    V4 |
    V5 |
    V6 |
    V7 |
    V8 |
    V9 |
    V10 |
    V11 |
    V12 |
    V13 |
    V14 |
    V15
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum ProtocolVersion where
  maybeToEnum 0 = Prelude.Just V0
  maybeToEnum 1 = Prelude.Just V1
  maybeToEnum 2 = Prelude.Just V2
  maybeToEnum 3 = Prelude.Just V3
  maybeToEnum 4 = Prelude.Just V4
  maybeToEnum 5 = Prelude.Just V5
  maybeToEnum 6 = Prelude.Just V6
  maybeToEnum 7 = Prelude.Just V7
  maybeToEnum 8 = Prelude.Just V8
  maybeToEnum 9 = Prelude.Just V9
  maybeToEnum 10 = Prelude.Just V10
  maybeToEnum 11 = Prelude.Just V11
  maybeToEnum 12 = Prelude.Just V12
  maybeToEnum 13 = Prelude.Just V13
  maybeToEnum 14 = Prelude.Just V14
  maybeToEnum 15 = Prelude.Just V15
  maybeToEnum _ = Prelude.Nothing
  showEnum V0 = "v0"
  showEnum V1 = "v1"
  showEnum V2 = "v2"
  showEnum V3 = "v3"
  showEnum V4 = "v4"
  showEnum V5 = "v5"
  showEnum V6 = "v6"
  showEnum V7 = "v7"
  showEnum V8 = "v8"
  showEnum V9 = "v9"
  showEnum V10 = "v10"
  showEnum V11 = "v11"
  showEnum V12 = "v12"
  showEnum V13 = "v13"
  showEnum V14 = "v14"
  showEnum V15 = "v15"
  readEnum k
    | (Prelude.==) k "v0" = Prelude.Just V0
    | (Prelude.==) k "v1" = Prelude.Just V1
    | (Prelude.==) k "v2" = Prelude.Just V2
    | (Prelude.==) k "v3" = Prelude.Just V3
    | (Prelude.==) k "v4" = Prelude.Just V4
    | (Prelude.==) k "v5" = Prelude.Just V5
    | (Prelude.==) k "v6" = Prelude.Just V6
    | (Prelude.==) k "v7" = Prelude.Just V7
    | (Prelude.==) k "v8" = Prelude.Just V8
    | (Prelude.==) k "v9" = Prelude.Just V9
    | (Prelude.==) k "v10" = Prelude.Just V10
    | (Prelude.==) k "v11" = Prelude.Just V11
    | (Prelude.==) k "v12" = Prelude.Just V12
    | (Prelude.==) k "v13" = Prelude.Just V13
    | (Prelude.==) k "v14" = Prelude.Just V14
    | (Prelude.==) k "v15" = Prelude.Just V15
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded ProtocolVersion where
  minBound = V0
  maxBound = V15
instance Prelude.Enum ProtocolVersion where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum ProtocolVersion: "
              (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum V0 = 0
  fromEnum V1 = 1
  fromEnum V2 = 2
  fromEnum V3 = 3
  fromEnum V4 = 4
  fromEnum V5 = 5
  fromEnum V6 = 6
  fromEnum V7 = 7
  fromEnum V8 = 8
  fromEnum V9 = 9
  fromEnum V10 = 10
  fromEnum V11 = 11
  fromEnum V12 = 12
  fromEnum V13 = 13
  fromEnum V14 = 14
  fromEnum V15 = 15
  succ V15
    = Prelude.error
        "ProtocolVersion.succ: bad argument V15. This value would be out of bounds."
  succ V0 = V1
  succ V1 = V2
  succ V2 = V3
  succ V3 = V4
  succ V4 = V5
  succ V5 = V6
  succ V6 = V7
  succ V7 = V8
  succ V8 = V9
  succ V9 = V10
  succ V10 = V11
  succ V11 = V12
  succ V12 = V13
  succ V13 = V14
  succ V14 = V15
  pred V0
    = Prelude.error
        "ProtocolVersion.pred: bad argument V0. This value would be out of bounds."
  pred V1 = V0
  pred V2 = V1
  pred V3 = V2
  pred V4 = V3
  pred V5 = V4
  pred V6 = V5
  pred V7 = V6
  pred V8 = V7
  pred V9 = V8
  pred V10 = V9
  pred V11 = V10
  pred V12 = V11
  pred V13 = V12
  pred V14 = V13
  pred V15 = V14
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault ProtocolVersion where
  fieldDefault = V0
instance Control.DeepSeq.NFData ProtocolVersion where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.name' @:: Lens' Schema Data.Text.Text@
         * 'Proto.PulsarApi_Fields.schemaData' @:: Lens' Schema Data.ByteString.ByteString@
         * 'Proto.PulsarApi_Fields.type'' @:: Lens' Schema Schema'Type@
         * 'Proto.PulsarApi_Fields.properties' @:: Lens' Schema [KeyValue]@
         * 'Proto.PulsarApi_Fields.vec'properties' @:: Lens' Schema (Data.Vector.Vector KeyValue)@ -}
data Schema
  = Schema'_constructor {_Schema'name :: !Data.Text.Text,
                         _Schema'schemaData :: !Data.ByteString.ByteString,
                         _Schema'type' :: !Schema'Type,
                         _Schema'properties :: !(Data.Vector.Vector KeyValue),
                         _Schema'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Schema where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Schema "name" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Schema'name (\ x__ y__ -> x__ {_Schema'name = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Schema "schemaData" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Schema'schemaData (\ x__ y__ -> x__ {_Schema'schemaData = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Schema "type'" Schema'Type where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Schema'type' (\ x__ y__ -> x__ {_Schema'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Schema "properties" [KeyValue] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Schema'properties (\ x__ y__ -> x__ {_Schema'properties = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField Schema "vec'properties" (Data.Vector.Vector KeyValue) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Schema'properties (\ x__ y__ -> x__ {_Schema'properties = y__}))
        Prelude.id
instance Data.ProtoLens.Message Schema where
  messageName _ = Data.Text.pack "pulsar.proto.Schema"
  packedMessageDescriptor _
    = "\n\
      \\ACKSchema\DC2\DC2\n\
      \\EOTname\CAN\SOH \STX(\tR\EOTname\DC2\US\n\
      \\vschema_data\CAN\ETX \STX(\fR\n\
      \schemaData\DC2-\n\
      \\EOTtype\CAN\EOT \STX(\SO2\EM.pulsar.proto.Schema.TypeR\EOTtype\DC26\n\
      \\n\
      \properties\CAN\ENQ \ETX(\v2\SYN.pulsar.proto.KeyValueR\n\
      \properties\"\187\SOH\n\
      \\EOTType\DC2\b\n\
      \\EOTNone\DLE\NUL\DC2\n\
      \\n\
      \\ACKString\DLE\SOH\DC2\b\n\
      \\EOTJson\DLE\STX\DC2\f\n\
      \\bProtobuf\DLE\ETX\DC2\b\n\
      \\EOTAvro\DLE\EOT\DC2\b\n\
      \\EOTBool\DLE\ENQ\DC2\b\n\
      \\EOTInt8\DLE\ACK\DC2\t\n\
      \\ENQInt16\DLE\a\DC2\t\n\
      \\ENQInt32\DLE\b\DC2\t\n\
      \\ENQInt64\DLE\t\DC2\t\n\
      \\ENQFloat\DLE\n\
      \\DC2\n\
      \\n\
      \\ACKDouble\DLE\v\DC2\b\n\
      \\EOTDate\DLE\f\DC2\b\n\
      \\EOTTime\DLE\r\DC2\r\n\
      \\tTimestamp\DLE\SO\DC2\f\n\
      \\bKeyValue\DLE\SI"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        name__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"name")) ::
              Data.ProtoLens.FieldDescriptor Schema
        schemaData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "schema_data"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"schemaData")) ::
              Data.ProtoLens.FieldDescriptor Schema
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor Schema'Type)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"type'")) ::
              Data.ProtoLens.FieldDescriptor Schema
        properties__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "properties"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor KeyValue)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"properties")) ::
              Data.ProtoLens.FieldDescriptor Schema
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, name__field_descriptor),
           (Data.ProtoLens.Tag 3, schemaData__field_descriptor),
           (Data.ProtoLens.Tag 4, type'__field_descriptor),
           (Data.ProtoLens.Tag 5, properties__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Schema'_unknownFields
        (\ x__ y__ -> x__ {_Schema'_unknownFields = y__})
  defMessage
    = Schema'_constructor
        {_Schema'name = Data.ProtoLens.fieldDefault,
         _Schema'schemaData = Data.ProtoLens.fieldDefault,
         _Schema'type' = Data.ProtoLens.fieldDefault,
         _Schema'properties = Data.Vector.Generic.empty,
         _Schema'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Schema
          -> Prelude.Bool
             -> Prelude.Bool
                -> Prelude.Bool
                   -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld KeyValue
                      -> Data.ProtoLens.Encoding.Bytes.Parser Schema
        loop
          x
          required'name
          required'schemaData
          required'type'
          mutable'properties
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'properties <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                mutable'properties)
                      (let
                         missing
                           = (if required'name then (:) "name" else Prelude.id)
                               ((if required'schemaData then (:) "schema_data" else Prelude.id)
                                  ((if required'type' then (:) "type" else Prelude.id) []))
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'properties")
                              frozen'properties
                              x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"name") y x)
                                  Prelude.False
                                  required'schemaData
                                  required'type'
                                  mutable'properties
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "schema_data"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"schemaData") y x)
                                  required'name
                                  Prelude.False
                                  required'type'
                                  mutable'properties
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'name
                                  required'schemaData
                                  Prelude.False
                                  mutable'properties
                        42
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "properties"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'properties y)
                                loop x required'name required'schemaData required'type' v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'name
                                  required'schemaData
                                  required'type'
                                  mutable'properties
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'properties <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage
                Prelude.True
                Prelude.True
                Prelude.True
                mutable'properties)
          "Schema"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"name") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                   ((\ bs
                       -> (Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"schemaData") _x)))
                ((Data.Monoid.<>)
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                      ((Prelude..)
                         ((Prelude..)
                            Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                         Prelude.fromEnum
                         (Lens.Family2.view (Data.ProtoLens.Field.field @"type'") _x)))
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                         (\ _v
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                 ((Prelude..)
                                    (\ bs
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                    Data.ProtoLens.encodeMessage
                                    _v))
                         (Lens.Family2.view
                            (Data.ProtoLens.Field.field @"vec'properties") _x))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData Schema where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Schema'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Schema'name x__)
                (Control.DeepSeq.deepseq
                   (_Schema'schemaData x__)
                   (Control.DeepSeq.deepseq
                      (_Schema'type' x__)
                      (Control.DeepSeq.deepseq (_Schema'properties x__) ()))))
data Schema'Type
  = Schema'None |
    Schema'String |
    Schema'Json |
    Schema'Protobuf |
    Schema'Avro |
    Schema'Bool |
    Schema'Int8 |
    Schema'Int16 |
    Schema'Int32 |
    Schema'Int64 |
    Schema'Float |
    Schema'Double |
    Schema'Date |
    Schema'Time |
    Schema'Timestamp |
    Schema'KeyValue
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum Schema'Type where
  maybeToEnum 0 = Prelude.Just Schema'None
  maybeToEnum 1 = Prelude.Just Schema'String
  maybeToEnum 2 = Prelude.Just Schema'Json
  maybeToEnum 3 = Prelude.Just Schema'Protobuf
  maybeToEnum 4 = Prelude.Just Schema'Avro
  maybeToEnum 5 = Prelude.Just Schema'Bool
  maybeToEnum 6 = Prelude.Just Schema'Int8
  maybeToEnum 7 = Prelude.Just Schema'Int16
  maybeToEnum 8 = Prelude.Just Schema'Int32
  maybeToEnum 9 = Prelude.Just Schema'Int64
  maybeToEnum 10 = Prelude.Just Schema'Float
  maybeToEnum 11 = Prelude.Just Schema'Double
  maybeToEnum 12 = Prelude.Just Schema'Date
  maybeToEnum 13 = Prelude.Just Schema'Time
  maybeToEnum 14 = Prelude.Just Schema'Timestamp
  maybeToEnum 15 = Prelude.Just Schema'KeyValue
  maybeToEnum _ = Prelude.Nothing
  showEnum Schema'None = "None"
  showEnum Schema'String = "String"
  showEnum Schema'Json = "Json"
  showEnum Schema'Protobuf = "Protobuf"
  showEnum Schema'Avro = "Avro"
  showEnum Schema'Bool = "Bool"
  showEnum Schema'Int8 = "Int8"
  showEnum Schema'Int16 = "Int16"
  showEnum Schema'Int32 = "Int32"
  showEnum Schema'Int64 = "Int64"
  showEnum Schema'Float = "Float"
  showEnum Schema'Double = "Double"
  showEnum Schema'Date = "Date"
  showEnum Schema'Time = "Time"
  showEnum Schema'Timestamp = "Timestamp"
  showEnum Schema'KeyValue = "KeyValue"
  readEnum k
    | (Prelude.==) k "None" = Prelude.Just Schema'None
    | (Prelude.==) k "String" = Prelude.Just Schema'String
    | (Prelude.==) k "Json" = Prelude.Just Schema'Json
    | (Prelude.==) k "Protobuf" = Prelude.Just Schema'Protobuf
    | (Prelude.==) k "Avro" = Prelude.Just Schema'Avro
    | (Prelude.==) k "Bool" = Prelude.Just Schema'Bool
    | (Prelude.==) k "Int8" = Prelude.Just Schema'Int8
    | (Prelude.==) k "Int16" = Prelude.Just Schema'Int16
    | (Prelude.==) k "Int32" = Prelude.Just Schema'Int32
    | (Prelude.==) k "Int64" = Prelude.Just Schema'Int64
    | (Prelude.==) k "Float" = Prelude.Just Schema'Float
    | (Prelude.==) k "Double" = Prelude.Just Schema'Double
    | (Prelude.==) k "Date" = Prelude.Just Schema'Date
    | (Prelude.==) k "Time" = Prelude.Just Schema'Time
    | (Prelude.==) k "Timestamp" = Prelude.Just Schema'Timestamp
    | (Prelude.==) k "KeyValue" = Prelude.Just Schema'KeyValue
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded Schema'Type where
  minBound = Schema'None
  maxBound = Schema'KeyValue
instance Prelude.Enum Schema'Type where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum Type: " (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum Schema'None = 0
  fromEnum Schema'String = 1
  fromEnum Schema'Json = 2
  fromEnum Schema'Protobuf = 3
  fromEnum Schema'Avro = 4
  fromEnum Schema'Bool = 5
  fromEnum Schema'Int8 = 6
  fromEnum Schema'Int16 = 7
  fromEnum Schema'Int32 = 8
  fromEnum Schema'Int64 = 9
  fromEnum Schema'Float = 10
  fromEnum Schema'Double = 11
  fromEnum Schema'Date = 12
  fromEnum Schema'Time = 13
  fromEnum Schema'Timestamp = 14
  fromEnum Schema'KeyValue = 15
  succ Schema'KeyValue
    = Prelude.error
        "Schema'Type.succ: bad argument Schema'KeyValue. This value would be out of bounds."
  succ Schema'None = Schema'String
  succ Schema'String = Schema'Json
  succ Schema'Json = Schema'Protobuf
  succ Schema'Protobuf = Schema'Avro
  succ Schema'Avro = Schema'Bool
  succ Schema'Bool = Schema'Int8
  succ Schema'Int8 = Schema'Int16
  succ Schema'Int16 = Schema'Int32
  succ Schema'Int32 = Schema'Int64
  succ Schema'Int64 = Schema'Float
  succ Schema'Float = Schema'Double
  succ Schema'Double = Schema'Date
  succ Schema'Date = Schema'Time
  succ Schema'Time = Schema'Timestamp
  succ Schema'Timestamp = Schema'KeyValue
  pred Schema'None
    = Prelude.error
        "Schema'Type.pred: bad argument Schema'None. This value would be out of bounds."
  pred Schema'String = Schema'None
  pred Schema'Json = Schema'String
  pred Schema'Protobuf = Schema'Json
  pred Schema'Avro = Schema'Protobuf
  pred Schema'Bool = Schema'Avro
  pred Schema'Int8 = Schema'Bool
  pred Schema'Int16 = Schema'Int8
  pred Schema'Int32 = Schema'Int16
  pred Schema'Int64 = Schema'Int32
  pred Schema'Float = Schema'Int64
  pred Schema'Double = Schema'Float
  pred Schema'Date = Schema'Double
  pred Schema'Time = Schema'Date
  pred Schema'Timestamp = Schema'Time
  pred Schema'KeyValue = Schema'Timestamp
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault Schema'Type where
  fieldDefault = Schema'None
instance Control.DeepSeq.NFData Schema'Type where
  rnf x__ = Prelude.seq x__ ()
data ServerError
  = UnknownError |
    MetadataError |
    PersistenceError |
    AuthenticationError |
    AuthorizationError |
    ConsumerBusy |
    ServiceNotReady |
    ProducerBlockedQuotaExceededError |
    ProducerBlockedQuotaExceededException |
    ChecksumError |
    UnsupportedVersionError |
    TopicNotFound |
    SubscriptionNotFound |
    ConsumerNotFound |
    TooManyRequests |
    TopicTerminatedError |
    ProducerBusy |
    InvalidTopicName |
    IncompatibleSchema |
    ConsumerAssignError |
    TransactionCoordinatorNotFound |
    InvalidTxnStatus |
    NotAllowedError
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum ServerError where
  maybeToEnum 0 = Prelude.Just UnknownError
  maybeToEnum 1 = Prelude.Just MetadataError
  maybeToEnum 2 = Prelude.Just PersistenceError
  maybeToEnum 3 = Prelude.Just AuthenticationError
  maybeToEnum 4 = Prelude.Just AuthorizationError
  maybeToEnum 5 = Prelude.Just ConsumerBusy
  maybeToEnum 6 = Prelude.Just ServiceNotReady
  maybeToEnum 7 = Prelude.Just ProducerBlockedQuotaExceededError
  maybeToEnum 8 = Prelude.Just ProducerBlockedQuotaExceededException
  maybeToEnum 9 = Prelude.Just ChecksumError
  maybeToEnum 10 = Prelude.Just UnsupportedVersionError
  maybeToEnum 11 = Prelude.Just TopicNotFound
  maybeToEnum 12 = Prelude.Just SubscriptionNotFound
  maybeToEnum 13 = Prelude.Just ConsumerNotFound
  maybeToEnum 14 = Prelude.Just TooManyRequests
  maybeToEnum 15 = Prelude.Just TopicTerminatedError
  maybeToEnum 16 = Prelude.Just ProducerBusy
  maybeToEnum 17 = Prelude.Just InvalidTopicName
  maybeToEnum 18 = Prelude.Just IncompatibleSchema
  maybeToEnum 19 = Prelude.Just ConsumerAssignError
  maybeToEnum 20 = Prelude.Just TransactionCoordinatorNotFound
  maybeToEnum 21 = Prelude.Just InvalidTxnStatus
  maybeToEnum 22 = Prelude.Just NotAllowedError
  maybeToEnum _ = Prelude.Nothing
  showEnum UnknownError = "UnknownError"
  showEnum MetadataError = "MetadataError"
  showEnum PersistenceError = "PersistenceError"
  showEnum AuthenticationError = "AuthenticationError"
  showEnum AuthorizationError = "AuthorizationError"
  showEnum ConsumerBusy = "ConsumerBusy"
  showEnum ServiceNotReady = "ServiceNotReady"
  showEnum ProducerBlockedQuotaExceededError
    = "ProducerBlockedQuotaExceededError"
  showEnum ProducerBlockedQuotaExceededException
    = "ProducerBlockedQuotaExceededException"
  showEnum ChecksumError = "ChecksumError"
  showEnum UnsupportedVersionError = "UnsupportedVersionError"
  showEnum TopicNotFound = "TopicNotFound"
  showEnum SubscriptionNotFound = "SubscriptionNotFound"
  showEnum ConsumerNotFound = "ConsumerNotFound"
  showEnum TooManyRequests = "TooManyRequests"
  showEnum TopicTerminatedError = "TopicTerminatedError"
  showEnum ProducerBusy = "ProducerBusy"
  showEnum InvalidTopicName = "InvalidTopicName"
  showEnum IncompatibleSchema = "IncompatibleSchema"
  showEnum ConsumerAssignError = "ConsumerAssignError"
  showEnum TransactionCoordinatorNotFound
    = "TransactionCoordinatorNotFound"
  showEnum InvalidTxnStatus = "InvalidTxnStatus"
  showEnum NotAllowedError = "NotAllowedError"
  readEnum k
    | (Prelude.==) k "UnknownError" = Prelude.Just UnknownError
    | (Prelude.==) k "MetadataError" = Prelude.Just MetadataError
    | (Prelude.==) k "PersistenceError" = Prelude.Just PersistenceError
    | (Prelude.==) k "AuthenticationError"
    = Prelude.Just AuthenticationError
    | (Prelude.==) k "AuthorizationError"
    = Prelude.Just AuthorizationError
    | (Prelude.==) k "ConsumerBusy" = Prelude.Just ConsumerBusy
    | (Prelude.==) k "ServiceNotReady" = Prelude.Just ServiceNotReady
    | (Prelude.==) k "ProducerBlockedQuotaExceededError"
    = Prelude.Just ProducerBlockedQuotaExceededError
    | (Prelude.==) k "ProducerBlockedQuotaExceededException"
    = Prelude.Just ProducerBlockedQuotaExceededException
    | (Prelude.==) k "ChecksumError" = Prelude.Just ChecksumError
    | (Prelude.==) k "UnsupportedVersionError"
    = Prelude.Just UnsupportedVersionError
    | (Prelude.==) k "TopicNotFound" = Prelude.Just TopicNotFound
    | (Prelude.==) k "SubscriptionNotFound"
    = Prelude.Just SubscriptionNotFound
    | (Prelude.==) k "ConsumerNotFound" = Prelude.Just ConsumerNotFound
    | (Prelude.==) k "TooManyRequests" = Prelude.Just TooManyRequests
    | (Prelude.==) k "TopicTerminatedError"
    = Prelude.Just TopicTerminatedError
    | (Prelude.==) k "ProducerBusy" = Prelude.Just ProducerBusy
    | (Prelude.==) k "InvalidTopicName" = Prelude.Just InvalidTopicName
    | (Prelude.==) k "IncompatibleSchema"
    = Prelude.Just IncompatibleSchema
    | (Prelude.==) k "ConsumerAssignError"
    = Prelude.Just ConsumerAssignError
    | (Prelude.==) k "TransactionCoordinatorNotFound"
    = Prelude.Just TransactionCoordinatorNotFound
    | (Prelude.==) k "InvalidTxnStatus" = Prelude.Just InvalidTxnStatus
    | (Prelude.==) k "NotAllowedError" = Prelude.Just NotAllowedError
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded ServerError where
  minBound = UnknownError
  maxBound = NotAllowedError
instance Prelude.Enum ServerError where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum ServerError: " (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum UnknownError = 0
  fromEnum MetadataError = 1
  fromEnum PersistenceError = 2
  fromEnum AuthenticationError = 3
  fromEnum AuthorizationError = 4
  fromEnum ConsumerBusy = 5
  fromEnum ServiceNotReady = 6
  fromEnum ProducerBlockedQuotaExceededError = 7
  fromEnum ProducerBlockedQuotaExceededException = 8
  fromEnum ChecksumError = 9
  fromEnum UnsupportedVersionError = 10
  fromEnum TopicNotFound = 11
  fromEnum SubscriptionNotFound = 12
  fromEnum ConsumerNotFound = 13
  fromEnum TooManyRequests = 14
  fromEnum TopicTerminatedError = 15
  fromEnum ProducerBusy = 16
  fromEnum InvalidTopicName = 17
  fromEnum IncompatibleSchema = 18
  fromEnum ConsumerAssignError = 19
  fromEnum TransactionCoordinatorNotFound = 20
  fromEnum InvalidTxnStatus = 21
  fromEnum NotAllowedError = 22
  succ NotAllowedError
    = Prelude.error
        "ServerError.succ: bad argument NotAllowedError. This value would be out of bounds."
  succ UnknownError = MetadataError
  succ MetadataError = PersistenceError
  succ PersistenceError = AuthenticationError
  succ AuthenticationError = AuthorizationError
  succ AuthorizationError = ConsumerBusy
  succ ConsumerBusy = ServiceNotReady
  succ ServiceNotReady = ProducerBlockedQuotaExceededError
  succ ProducerBlockedQuotaExceededError
    = ProducerBlockedQuotaExceededException
  succ ProducerBlockedQuotaExceededException = ChecksumError
  succ ChecksumError = UnsupportedVersionError
  succ UnsupportedVersionError = TopicNotFound
  succ TopicNotFound = SubscriptionNotFound
  succ SubscriptionNotFound = ConsumerNotFound
  succ ConsumerNotFound = TooManyRequests
  succ TooManyRequests = TopicTerminatedError
  succ TopicTerminatedError = ProducerBusy
  succ ProducerBusy = InvalidTopicName
  succ InvalidTopicName = IncompatibleSchema
  succ IncompatibleSchema = ConsumerAssignError
  succ ConsumerAssignError = TransactionCoordinatorNotFound
  succ TransactionCoordinatorNotFound = InvalidTxnStatus
  succ InvalidTxnStatus = NotAllowedError
  pred UnknownError
    = Prelude.error
        "ServerError.pred: bad argument UnknownError. This value would be out of bounds."
  pred MetadataError = UnknownError
  pred PersistenceError = MetadataError
  pred AuthenticationError = PersistenceError
  pred AuthorizationError = AuthenticationError
  pred ConsumerBusy = AuthorizationError
  pred ServiceNotReady = ConsumerBusy
  pred ProducerBlockedQuotaExceededError = ServiceNotReady
  pred ProducerBlockedQuotaExceededException
    = ProducerBlockedQuotaExceededError
  pred ChecksumError = ProducerBlockedQuotaExceededException
  pred UnsupportedVersionError = ChecksumError
  pred TopicNotFound = UnsupportedVersionError
  pred SubscriptionNotFound = TopicNotFound
  pred ConsumerNotFound = SubscriptionNotFound
  pred TooManyRequests = ConsumerNotFound
  pred TopicTerminatedError = TooManyRequests
  pred ProducerBusy = TopicTerminatedError
  pred InvalidTopicName = ProducerBusy
  pred IncompatibleSchema = InvalidTopicName
  pred ConsumerAssignError = IncompatibleSchema
  pred TransactionCoordinatorNotFound = ConsumerAssignError
  pred InvalidTxnStatus = TransactionCoordinatorNotFound
  pred NotAllowedError = InvalidTxnStatus
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault ServerError where
  fieldDefault = UnknownError
instance Control.DeepSeq.NFData ServerError where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.properties' @:: Lens' SingleMessageMetadata [KeyValue]@
         * 'Proto.PulsarApi_Fields.vec'properties' @:: Lens' SingleMessageMetadata (Data.Vector.Vector KeyValue)@
         * 'Proto.PulsarApi_Fields.partitionKey' @:: Lens' SingleMessageMetadata Data.Text.Text@
         * 'Proto.PulsarApi_Fields.maybe'partitionKey' @:: Lens' SingleMessageMetadata (Prelude.Maybe Data.Text.Text)@
         * 'Proto.PulsarApi_Fields.payloadSize' @:: Lens' SingleMessageMetadata Data.Int.Int32@
         * 'Proto.PulsarApi_Fields.compactedOut' @:: Lens' SingleMessageMetadata Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'compactedOut' @:: Lens' SingleMessageMetadata (Prelude.Maybe Prelude.Bool)@
         * 'Proto.PulsarApi_Fields.eventTime' @:: Lens' SingleMessageMetadata Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'eventTime' @:: Lens' SingleMessageMetadata (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.partitionKeyB64Encoded' @:: Lens' SingleMessageMetadata Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'partitionKeyB64Encoded' @:: Lens' SingleMessageMetadata (Prelude.Maybe Prelude.Bool)@
         * 'Proto.PulsarApi_Fields.orderingKey' @:: Lens' SingleMessageMetadata Data.ByteString.ByteString@
         * 'Proto.PulsarApi_Fields.maybe'orderingKey' @:: Lens' SingleMessageMetadata (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.PulsarApi_Fields.sequenceId' @:: Lens' SingleMessageMetadata Data.Word.Word64@
         * 'Proto.PulsarApi_Fields.maybe'sequenceId' @:: Lens' SingleMessageMetadata (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.PulsarApi_Fields.nullValue' @:: Lens' SingleMessageMetadata Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'nullValue' @:: Lens' SingleMessageMetadata (Prelude.Maybe Prelude.Bool)@
         * 'Proto.PulsarApi_Fields.nullPartitionKey' @:: Lens' SingleMessageMetadata Prelude.Bool@
         * 'Proto.PulsarApi_Fields.maybe'nullPartitionKey' @:: Lens' SingleMessageMetadata (Prelude.Maybe Prelude.Bool)@ -}
data SingleMessageMetadata
  = SingleMessageMetadata'_constructor {_SingleMessageMetadata'properties :: !(Data.Vector.Vector KeyValue),
                                        _SingleMessageMetadata'partitionKey :: !(Prelude.Maybe Data.Text.Text),
                                        _SingleMessageMetadata'payloadSize :: !Data.Int.Int32,
                                        _SingleMessageMetadata'compactedOut :: !(Prelude.Maybe Prelude.Bool),
                                        _SingleMessageMetadata'eventTime :: !(Prelude.Maybe Data.Word.Word64),
                                        _SingleMessageMetadata'partitionKeyB64Encoded :: !(Prelude.Maybe Prelude.Bool),
                                        _SingleMessageMetadata'orderingKey :: !(Prelude.Maybe Data.ByteString.ByteString),
                                        _SingleMessageMetadata'sequenceId :: !(Prelude.Maybe Data.Word.Word64),
                                        _SingleMessageMetadata'nullValue :: !(Prelude.Maybe Prelude.Bool),
                                        _SingleMessageMetadata'nullPartitionKey :: !(Prelude.Maybe Prelude.Bool),
                                        _SingleMessageMetadata'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show SingleMessageMetadata where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "properties" [KeyValue] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'properties
           (\ x__ y__ -> x__ {_SingleMessageMetadata'properties = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "vec'properties" (Data.Vector.Vector KeyValue) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'properties
           (\ x__ y__ -> x__ {_SingleMessageMetadata'properties = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "partitionKey" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'partitionKey
           (\ x__ y__ -> x__ {_SingleMessageMetadata'partitionKey = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "maybe'partitionKey" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'partitionKey
           (\ x__ y__ -> x__ {_SingleMessageMetadata'partitionKey = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "payloadSize" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'payloadSize
           (\ x__ y__ -> x__ {_SingleMessageMetadata'payloadSize = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "compactedOut" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'compactedOut
           (\ x__ y__ -> x__ {_SingleMessageMetadata'compactedOut = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "maybe'compactedOut" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'compactedOut
           (\ x__ y__ -> x__ {_SingleMessageMetadata'compactedOut = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "eventTime" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'eventTime
           (\ x__ y__ -> x__ {_SingleMessageMetadata'eventTime = y__}))
        (Data.ProtoLens.maybeLens 0)
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "maybe'eventTime" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'eventTime
           (\ x__ y__ -> x__ {_SingleMessageMetadata'eventTime = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "partitionKeyB64Encoded" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'partitionKeyB64Encoded
           (\ x__ y__
              -> x__ {_SingleMessageMetadata'partitionKeyB64Encoded = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "maybe'partitionKeyB64Encoded" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'partitionKeyB64Encoded
           (\ x__ y__
              -> x__ {_SingleMessageMetadata'partitionKeyB64Encoded = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "orderingKey" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'orderingKey
           (\ x__ y__ -> x__ {_SingleMessageMetadata'orderingKey = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "maybe'orderingKey" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'orderingKey
           (\ x__ y__ -> x__ {_SingleMessageMetadata'orderingKey = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "sequenceId" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'sequenceId
           (\ x__ y__ -> x__ {_SingleMessageMetadata'sequenceId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "maybe'sequenceId" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'sequenceId
           (\ x__ y__ -> x__ {_SingleMessageMetadata'sequenceId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "nullValue" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'nullValue
           (\ x__ y__ -> x__ {_SingleMessageMetadata'nullValue = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "maybe'nullValue" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'nullValue
           (\ x__ y__ -> x__ {_SingleMessageMetadata'nullValue = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "nullPartitionKey" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'nullPartitionKey
           (\ x__ y__ -> x__ {_SingleMessageMetadata'nullPartitionKey = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField SingleMessageMetadata "maybe'nullPartitionKey" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SingleMessageMetadata'nullPartitionKey
           (\ x__ y__ -> x__ {_SingleMessageMetadata'nullPartitionKey = y__}))
        Prelude.id
instance Data.ProtoLens.Message SingleMessageMetadata where
  messageName _ = Data.Text.pack "pulsar.proto.SingleMessageMetadata"
  packedMessageDescriptor _
    = "\n\
      \\NAKSingleMessageMetadata\DC26\n\
      \\n\
      \properties\CAN\SOH \ETX(\v2\SYN.pulsar.proto.KeyValueR\n\
      \properties\DC2#\n\
      \\rpartition_key\CAN\STX \SOH(\tR\fpartitionKey\DC2!\n\
      \\fpayload_size\CAN\ETX \STX(\ENQR\vpayloadSize\DC2*\n\
      \\rcompacted_out\CAN\EOT \SOH(\b:\ENQfalseR\fcompactedOut\DC2 \n\
      \\n\
      \event_time\CAN\ENQ \SOH(\EOT:\SOH0R\teventTime\DC2@\n\
      \\EMpartition_key_b64_encoded\CAN\ACK \SOH(\b:\ENQfalseR\SYNpartitionKeyB64Encoded\DC2!\n\
      \\fordering_key\CAN\a \SOH(\fR\vorderingKey\DC2\US\n\
      \\vsequence_id\CAN\b \SOH(\EOTR\n\
      \sequenceId\DC2$\n\
      \\n\
      \null_value\CAN\t \SOH(\b:\ENQfalseR\tnullValue\DC23\n\
      \\DC2null_partition_key\CAN\n\
      \ \SOH(\b:\ENQfalseR\DLEnullPartitionKey"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        properties__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "properties"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor KeyValue)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"properties")) ::
              Data.ProtoLens.FieldDescriptor SingleMessageMetadata
        partitionKey__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "partition_key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'partitionKey")) ::
              Data.ProtoLens.FieldDescriptor SingleMessageMetadata
        payloadSize__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "payload_size"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"payloadSize")) ::
              Data.ProtoLens.FieldDescriptor SingleMessageMetadata
        compactedOut__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "compacted_out"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'compactedOut")) ::
              Data.ProtoLens.FieldDescriptor SingleMessageMetadata
        eventTime__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "event_time"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'eventTime")) ::
              Data.ProtoLens.FieldDescriptor SingleMessageMetadata
        partitionKeyB64Encoded__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "partition_key_b64_encoded"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'partitionKeyB64Encoded")) ::
              Data.ProtoLens.FieldDescriptor SingleMessageMetadata
        orderingKey__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ordering_key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'orderingKey")) ::
              Data.ProtoLens.FieldDescriptor SingleMessageMetadata
        sequenceId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sequence_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'sequenceId")) ::
              Data.ProtoLens.FieldDescriptor SingleMessageMetadata
        nullValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "null_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nullValue")) ::
              Data.ProtoLens.FieldDescriptor SingleMessageMetadata
        nullPartitionKey__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "null_partition_key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nullPartitionKey")) ::
              Data.ProtoLens.FieldDescriptor SingleMessageMetadata
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, properties__field_descriptor),
           (Data.ProtoLens.Tag 2, partitionKey__field_descriptor),
           (Data.ProtoLens.Tag 3, payloadSize__field_descriptor),
           (Data.ProtoLens.Tag 4, compactedOut__field_descriptor),
           (Data.ProtoLens.Tag 5, eventTime__field_descriptor),
           (Data.ProtoLens.Tag 6, partitionKeyB64Encoded__field_descriptor),
           (Data.ProtoLens.Tag 7, orderingKey__field_descriptor),
           (Data.ProtoLens.Tag 8, sequenceId__field_descriptor),
           (Data.ProtoLens.Tag 9, nullValue__field_descriptor),
           (Data.ProtoLens.Tag 10, nullPartitionKey__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _SingleMessageMetadata'_unknownFields
        (\ x__ y__ -> x__ {_SingleMessageMetadata'_unknownFields = y__})
  defMessage
    = SingleMessageMetadata'_constructor
        {_SingleMessageMetadata'properties = Data.Vector.Generic.empty,
         _SingleMessageMetadata'partitionKey = Prelude.Nothing,
         _SingleMessageMetadata'payloadSize = Data.ProtoLens.fieldDefault,
         _SingleMessageMetadata'compactedOut = Prelude.Nothing,
         _SingleMessageMetadata'eventTime = Prelude.Nothing,
         _SingleMessageMetadata'partitionKeyB64Encoded = Prelude.Nothing,
         _SingleMessageMetadata'orderingKey = Prelude.Nothing,
         _SingleMessageMetadata'sequenceId = Prelude.Nothing,
         _SingleMessageMetadata'nullValue = Prelude.Nothing,
         _SingleMessageMetadata'nullPartitionKey = Prelude.Nothing,
         _SingleMessageMetadata'_unknownFields = []}
  parseMessage
    = let
        loop ::
          SingleMessageMetadata
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld KeyValue
                -> Data.ProtoLens.Encoding.Bytes.Parser SingleMessageMetadata
        loop x required'payloadSize mutable'properties
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'properties <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                mutable'properties)
                      (let
                         missing
                           = (if required'payloadSize then (:) "payload_size" else Prelude.id)
                               []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'properties")
                              frozen'properties
                              x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "properties"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'properties y)
                                loop x required'payloadSize v
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "partition_key"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"partitionKey") y x)
                                  required'payloadSize
                                  mutable'properties
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "payload_size"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"payloadSize") y x)
                                  Prelude.False
                                  mutable'properties
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "compacted_out"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"compactedOut") y x)
                                  required'payloadSize
                                  mutable'properties
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "event_time"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"eventTime") y x)
                                  required'payloadSize
                                  mutable'properties
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "partition_key_b64_encoded"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"partitionKeyB64Encoded") y x)
                                  required'payloadSize
                                  mutable'properties
                        58
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "ordering_key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"orderingKey") y x)
                                  required'payloadSize
                                  mutable'properties
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "sequence_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"sequenceId") y x)
                                  required'payloadSize
                                  mutable'properties
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "null_value"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"nullValue") y x)
                                  required'payloadSize
                                  mutable'properties
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "null_partition_key"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"nullPartitionKey") y x)
                                  required'payloadSize
                                  mutable'properties
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'payloadSize
                                  mutable'properties
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'properties <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage Prelude.True mutable'properties)
          "SingleMessageMetadata"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage
                           _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'properties") _x))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'partitionKey") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8
                             _v))
                ((Data.Monoid.<>)
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                      ((Prelude..)
                         Data.ProtoLens.Encoding.Bytes.putVarInt
                         Prelude.fromIntegral
                         (Lens.Family2.view
                            (Data.ProtoLens.Field.field @"payloadSize") _x)))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'compactedOut") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (\ b -> if b then 1 else 0)
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'eventTime") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'partitionKeyB64Encoded") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (\ b -> if b then 1 else 0)
                                         _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'orderingKey") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                         ((\ bs
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     (Prelude.fromIntegral
                                                        (Data.ByteString.length bs)))
                                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'sequenceId") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'nullValue") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  (\ b -> if b then 1 else 0)
                                                  _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field
                                                  @"maybe'nullPartitionKey")
                                               _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     (\ b -> if b then 1 else 0)
                                                     _v))
                                        (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                           (Lens.Family2.view
                                              Data.ProtoLens.unknownFields _x)))))))))))
instance Control.DeepSeq.NFData SingleMessageMetadata where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_SingleMessageMetadata'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_SingleMessageMetadata'properties x__)
                (Control.DeepSeq.deepseq
                   (_SingleMessageMetadata'partitionKey x__)
                   (Control.DeepSeq.deepseq
                      (_SingleMessageMetadata'payloadSize x__)
                      (Control.DeepSeq.deepseq
                         (_SingleMessageMetadata'compactedOut x__)
                         (Control.DeepSeq.deepseq
                            (_SingleMessageMetadata'eventTime x__)
                            (Control.DeepSeq.deepseq
                               (_SingleMessageMetadata'partitionKeyB64Encoded x__)
                               (Control.DeepSeq.deepseq
                                  (_SingleMessageMetadata'orderingKey x__)
                                  (Control.DeepSeq.deepseq
                                     (_SingleMessageMetadata'sequenceId x__)
                                     (Control.DeepSeq.deepseq
                                        (_SingleMessageMetadata'nullValue x__)
                                        (Control.DeepSeq.deepseq
                                           (_SingleMessageMetadata'nullPartitionKey x__)
                                           ()))))))))))
{- | Fields :
     
         * 'Proto.PulsarApi_Fields.topic' @:: Lens' Subscription Data.Text.Text@
         * 'Proto.PulsarApi_Fields.subscription' @:: Lens' Subscription Data.Text.Text@ -}
data Subscription
  = Subscription'_constructor {_Subscription'topic :: !Data.Text.Text,
                               _Subscription'subscription :: !Data.Text.Text,
                               _Subscription'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Subscription where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Subscription "topic" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Subscription'topic (\ x__ y__ -> x__ {_Subscription'topic = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Subscription "subscription" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Subscription'subscription
           (\ x__ y__ -> x__ {_Subscription'subscription = y__}))
        Prelude.id
instance Data.ProtoLens.Message Subscription where
  messageName _ = Data.Text.pack "pulsar.proto.Subscription"
  packedMessageDescriptor _
    = "\n\
      \\fSubscription\DC2\DC4\n\
      \\ENQtopic\CAN\SOH \STX(\tR\ENQtopic\DC2\"\n\
      \\fsubscription\CAN\STX \STX(\tR\fsubscription"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        topic__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "topic"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"topic")) ::
              Data.ProtoLens.FieldDescriptor Subscription
        subscription__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "subscription"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"subscription")) ::
              Data.ProtoLens.FieldDescriptor Subscription
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, topic__field_descriptor),
           (Data.ProtoLens.Tag 2, subscription__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Subscription'_unknownFields
        (\ x__ y__ -> x__ {_Subscription'_unknownFields = y__})
  defMessage
    = Subscription'_constructor
        {_Subscription'topic = Data.ProtoLens.fieldDefault,
         _Subscription'subscription = Data.ProtoLens.fieldDefault,
         _Subscription'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Subscription
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser Subscription
        loop x required'subscription required'topic
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'subscription then
                                  (:) "subscription"
                              else
                                  Prelude.id)
                               ((if required'topic then (:) "topic" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "topic"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"topic") y x)
                                  required'subscription
                                  Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                       Data.ProtoLens.Encoding.Bytes.getBytes
                                                         (Prelude.fromIntegral len)
                                           Data.ProtoLens.Encoding.Bytes.runEither
                                             (case Data.Text.Encoding.decodeUtf8' value of
                                                (Prelude.Left err)
                                                  -> Prelude.Left (Prelude.show err)
                                                (Prelude.Right r) -> Prelude.Right r))
                                       "subscription"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"subscription") y x)
                                  Prelude.False
                                  required'topic
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'subscription
                                  required'topic
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "Subscription"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"topic") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((Prelude..)
                      (\ bs
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      Data.Text.Encoding.encodeUtf8
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"subscription") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData Subscription where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Subscription'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Subscription'topic x__)
                (Control.DeepSeq.deepseq (_Subscription'subscription x__) ()))
data TxnAction
  = COMMIT | ABORT
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum TxnAction where
  maybeToEnum 0 = Prelude.Just COMMIT
  maybeToEnum 1 = Prelude.Just ABORT
  maybeToEnum _ = Prelude.Nothing
  showEnum COMMIT = "COMMIT"
  showEnum ABORT = "ABORT"
  readEnum k
    | (Prelude.==) k "COMMIT" = Prelude.Just COMMIT
    | (Prelude.==) k "ABORT" = Prelude.Just ABORT
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded TxnAction where
  minBound = COMMIT
  maxBound = ABORT
instance Prelude.Enum TxnAction where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum TxnAction: " (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum COMMIT = 0
  fromEnum ABORT = 1
  succ ABORT
    = Prelude.error
        "TxnAction.succ: bad argument ABORT. This value would be out of bounds."
  succ COMMIT = ABORT
  pred COMMIT
    = Prelude.error
        "TxnAction.pred: bad argument COMMIT. This value would be out of bounds."
  pred ABORT = COMMIT
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault TxnAction where
  fieldDefault = COMMIT
instance Control.DeepSeq.NFData TxnAction where
  rnf x__ = Prelude.seq x__ ()
packedFileDescriptor :: Data.ByteString.ByteString
packedFileDescriptor
  = "\n\
    \\DLEpulsar_api.proto\DC2\fpulsar.proto\"\226\STX\n\
    \\ACKSchema\DC2\DC2\n\
    \\EOTname\CAN\SOH \STX(\tR\EOTname\DC2\US\n\
    \\vschema_data\CAN\ETX \STX(\fR\n\
    \schemaData\DC2-\n\
    \\EOTtype\CAN\EOT \STX(\SO2\EM.pulsar.proto.Schema.TypeR\EOTtype\DC26\n\
    \\n\
    \properties\CAN\ENQ \ETX(\v2\SYN.pulsar.proto.KeyValueR\n\
    \properties\"\187\SOH\n\
    \\EOTType\DC2\b\n\
    \\EOTNone\DLE\NUL\DC2\n\
    \\n\
    \\ACKString\DLE\SOH\DC2\b\n\
    \\EOTJson\DLE\STX\DC2\f\n\
    \\bProtobuf\DLE\ETX\DC2\b\n\
    \\EOTAvro\DLE\EOT\DC2\b\n\
    \\EOTBool\DLE\ENQ\DC2\b\n\
    \\EOTInt8\DLE\ACK\DC2\t\n\
    \\ENQInt16\DLE\a\DC2\t\n\
    \\ENQInt32\DLE\b\DC2\t\n\
    \\ENQInt64\DLE\t\DC2\t\n\
    \\ENQFloat\DLE\n\
    \\DC2\n\
    \\n\
    \\ACKDouble\DLE\v\DC2\b\n\
    \\EOTDate\DLE\f\DC2\b\n\
    \\EOTTime\DLE\r\DC2\r\n\
    \\tTimestamp\DLE\SO\DC2\f\n\
    \\bKeyValue\DLE\SI\"\165\SOH\n\
    \\rMessageIdData\DC2\SUB\n\
    \\bledgerId\CAN\SOH \STX(\EOTR\bledgerId\DC2\CAN\n\
    \\aentryId\CAN\STX \STX(\EOTR\aentryId\DC2 \n\
    \\tpartition\CAN\ETX \SOH(\ENQ:\STX-1R\tpartition\DC2#\n\
    \\vbatch_index\CAN\EOT \SOH(\ENQ:\STX-1R\n\
    \batchIndex\DC2\ETB\n\
    \\aack_set\CAN\ENQ \ETX(\ETXR\ACKackSet\"2\n\
    \\bKeyValue\DC2\DLE\n\
    \\ETXkey\CAN\SOH \STX(\tR\ETXkey\DC2\DC4\n\
    \\ENQvalue\CAN\STX \STX(\tR\ENQvalue\"6\n\
    \\fKeyLongValue\DC2\DLE\n\
    \\ETXkey\CAN\SOH \STX(\tR\ETXkey\DC2\DC4\n\
    \\ENQvalue\CAN\STX \STX(\EOTR\ENQvalue\"2\n\
    \\bIntRange\DC2\DC4\n\
    \\ENQstart\CAN\SOH \STX(\ENQR\ENQstart\DC2\DLE\n\
    \\ETXend\CAN\STX \STX(\ENQR\ETXend\"l\n\
    \\SOEncryptionKeys\DC2\DLE\n\
    \\ETXkey\CAN\SOH \STX(\tR\ETXkey\DC2\DC4\n\
    \\ENQvalue\CAN\STX \STX(\fR\ENQvalue\DC22\n\
    \\bmetadata\CAN\ETX \ETX(\v2\SYN.pulsar.proto.KeyValueR\bmetadata\"\209\t\n\
    \\SIMessageMetadata\DC2#\n\
    \\rproducer_name\CAN\SOH \STX(\tR\fproducerName\DC2\US\n\
    \\vsequence_id\CAN\STX \STX(\EOTR\n\
    \sequenceId\DC2!\n\
    \\fpublish_time\CAN\ETX \STX(\EOTR\vpublishTime\DC26\n\
    \\n\
    \properties\CAN\EOT \ETX(\v2\SYN.pulsar.proto.KeyValueR\n\
    \properties\DC2'\n\
    \\SIreplicated_from\CAN\ENQ \SOH(\tR\SOreplicatedFrom\DC2#\n\
    \\rpartition_key\CAN\ACK \SOH(\tR\fpartitionKey\DC2!\n\
    \\freplicate_to\CAN\a \ETX(\tR\vreplicateTo\DC2E\n\
    \\vcompression\CAN\b \SOH(\SO2\GS.pulsar.proto.CompressionType:\EOTNONER\vcompression\DC2.\n\
    \\DC1uncompressed_size\CAN\t \SOH(\r:\SOH0R\DLEuncompressedSize\DC24\n\
    \\NAKnum_messages_in_batch\CAN\v \SOH(\ENQ:\SOH1R\DC2numMessagesInBatch\DC2 \n\
    \\n\
    \event_time\CAN\f \SOH(\EOT:\SOH0R\teventTime\DC2E\n\
    \\SIencryption_keys\CAN\r \ETX(\v2\FS.pulsar.proto.EncryptionKeysR\SOencryptionKeys\DC2'\n\
    \\SIencryption_algo\CAN\SO \SOH(\tR\SOencryptionAlgo\DC2)\n\
    \\DLEencryption_param\CAN\SI \SOH(\fR\SIencryptionParam\DC2%\n\
    \\SOschema_version\CAN\DLE \SOH(\fR\rschemaVersion\DC2@\n\
    \\EMpartition_key_b64_encoded\CAN\DC1 \SOH(\b:\ENQfalseR\SYNpartitionKeyB64Encoded\DC2!\n\
    \\fordering_key\CAN\DC2 \SOH(\fR\vorderingKey\DC2&\n\
    \\SIdeliver_at_time\CAN\DC3 \SOH(\ETXR\rdeliverAtTime\DC2\US\n\
    \\vmarker_type\CAN\DC4 \SOH(\ENQR\n\
    \markerType\DC2(\n\
    \\DLEtxnid_least_bits\CAN\SYN \SOH(\EOTR\SOtxnidLeastBits\DC2&\n\
    \\SItxnid_most_bits\CAN\ETB \SOH(\EOTR\rtxnidMostBits\DC21\n\
    \\DC3highest_sequence_id\CAN\CAN \SOH(\EOT:\SOH0R\DC1highestSequenceId\DC2$\n\
    \\n\
    \null_value\CAN\EM \SOH(\b:\ENQfalseR\tnullValue\DC2\DC2\n\
    \\EOTuuid\CAN\SUB \SOH(\tR\EOTuuid\DC2-\n\
    \\DC3num_chunks_from_msg\CAN\ESC \SOH(\ENQR\DLEnumChunksFromMsg\DC2/\n\
    \\DC4total_chunk_msg_size\CAN\FS \SOH(\ENQR\DC1totalChunkMsgSize\DC2\EM\n\
    \\bchunk_id\CAN\GS \SOH(\ENQR\achunkId\DC23\n\
    \\DC2null_partition_key\CAN\RS \SOH(\b:\ENQfalseR\DLEnullPartitionKey\"\198\ETX\n\
    \\NAKSingleMessageMetadata\DC26\n\
    \\n\
    \properties\CAN\SOH \ETX(\v2\SYN.pulsar.proto.KeyValueR\n\
    \properties\DC2#\n\
    \\rpartition_key\CAN\STX \SOH(\tR\fpartitionKey\DC2!\n\
    \\fpayload_size\CAN\ETX \STX(\ENQR\vpayloadSize\DC2*\n\
    \\rcompacted_out\CAN\EOT \SOH(\b:\ENQfalseR\fcompactedOut\DC2 \n\
    \\n\
    \event_time\CAN\ENQ \SOH(\EOT:\SOH0R\teventTime\DC2@\n\
    \\EMpartition_key_b64_encoded\CAN\ACK \SOH(\b:\ENQfalseR\SYNpartitionKeyB64Encoded\DC2!\n\
    \\fordering_key\CAN\a \SOH(\fR\vorderingKey\DC2\US\n\
    \\vsequence_id\CAN\b \SOH(\EOTR\n\
    \sequenceId\DC2$\n\
    \\n\
    \null_value\CAN\t \SOH(\b:\ENQfalseR\tnullValue\DC23\n\
    \\DC2null_partition_key\CAN\n\
    \ \SOH(\b:\ENQfalseR\DLEnullPartitionKey\"\230\ETX\n\
    \\SOCommandConnect\DC2%\n\
    \\SOclient_version\CAN\SOH \STX(\tR\rclientVersion\DC29\n\
    \\vauth_method\CAN\STX \SOH(\SO2\CAN.pulsar.proto.AuthMethodR\n\
    \authMethod\DC2(\n\
    \\DLEauth_method_name\CAN\ENQ \SOH(\tR\SOauthMethodName\DC2\ESC\n\
    \\tauth_data\CAN\ETX \SOH(\fR\bauthData\DC2,\n\
    \\DLEprotocol_version\CAN\EOT \SOH(\ENQ:\SOH0R\SIprotocolVersion\DC2-\n\
    \\DC3proxy_to_broker_url\CAN\ACK \SOH(\tR\DLEproxyToBrokerUrl\DC2-\n\
    \\DC2original_principal\CAN\a \SOH(\tR\DC1originalPrincipal\DC2,\n\
    \\DC2original_auth_data\CAN\b \SOH(\tR\DLEoriginalAuthData\DC20\n\
    \\DC4original_auth_method\CAN\t \SOH(\tR\DC2originalAuthMethod\DC2?\n\
    \\rfeature_flags\CAN\n\
    \ \SOH(\v2\SUB.pulsar.proto.FeatureFlagsR\ffeatureFlags\"I\n\
    \\fFeatureFlags\DC29\n\
    \\NAKsupports_auth_refresh\CAN\SOH \SOH(\b:\ENQfalseR\DC3supportsAuthRefresh\"\145\SOH\n\
    \\DLECommandConnected\DC2%\n\
    \\SOserver_version\CAN\SOH \STX(\tR\rserverVersion\DC2,\n\
    \\DLEprotocol_version\CAN\STX \SOH(\ENQ:\SOH0R\SIprotocolVersion\DC2(\n\
    \\DLEmax_message_size\CAN\ETX \SOH(\ENQR\SOmaxMessageSize\"\158\SOH\n\
    \\DC3CommandAuthResponse\DC2%\n\
    \\SOclient_version\CAN\SOH \SOH(\tR\rclientVersion\DC22\n\
    \\bresponse\CAN\STX \SOH(\v2\SYN.pulsar.proto.AuthDataR\bresponse\DC2,\n\
    \\DLEprotocol_version\CAN\ETX \SOH(\ENQ:\SOH0R\SIprotocolVersion\"\161\SOH\n\
    \\DC4CommandAuthChallenge\DC2%\n\
    \\SOserver_version\CAN\SOH \SOH(\tR\rserverVersion\DC24\n\
    \\tchallenge\CAN\STX \SOH(\v2\SYN.pulsar.proto.AuthDataR\tchallenge\DC2,\n\
    \\DLEprotocol_version\CAN\ETX \SOH(\ENQ:\SOH0R\SIprotocolVersion\"Q\n\
    \\bAuthData\DC2(\n\
    \\DLEauth_method_name\CAN\SOH \SOH(\tR\SOauthMethodName\DC2\ESC\n\
    \\tauth_data\CAN\STX \SOH(\fR\bauthData\"\203\SOH\n\
    \\rKeySharedMeta\DC2A\n\
    \\rkeySharedMode\CAN\SOH \STX(\SO2\ESC.pulsar.proto.KeySharedModeR\rkeySharedMode\DC26\n\
    \\n\
    \hashRanges\CAN\ETX \ETX(\v2\SYN.pulsar.proto.IntRangeR\n\
    \hashRanges\DC2?\n\
    \\ETBallowOutOfOrderDelivery\CAN\EOT \SOH(\b:\ENQfalseR\ETBallowOutOfOrderDelivery\"\235\a\n\
    \\DLECommandSubscribe\DC2\DC4\n\
    \\ENQtopic\CAN\SOH \STX(\tR\ENQtopic\DC2\"\n\
    \\fsubscription\CAN\STX \STX(\tR\fsubscription\DC2@\n\
    \\asubType\CAN\ETX \STX(\SO2&.pulsar.proto.CommandSubscribe.SubTypeR\asubType\DC2\US\n\
    \\vconsumer_id\CAN\EOT \STX(\EOTR\n\
    \consumerId\DC2\GS\n\
    \\n\
    \request_id\CAN\ENQ \STX(\EOTR\trequestId\DC2#\n\
    \\rconsumer_name\CAN\ACK \SOH(\tR\fconsumerName\DC2%\n\
    \\SOpriority_level\CAN\a \SOH(\ENQR\rpriorityLevel\DC2\RS\n\
    \\adurable\CAN\b \SOH(\b:\EOTtrueR\adurable\DC2E\n\
    \\DLEstart_message_id\CAN\t \SOH(\v2\ESC.pulsar.proto.MessageIdDataR\SOstartMessageId\DC22\n\
    \\bmetadata\CAN\n\
    \ \ETX(\v2\SYN.pulsar.proto.KeyValueR\bmetadata\DC2%\n\
    \\SOread_compacted\CAN\v \SOH(\bR\rreadCompacted\DC2,\n\
    \\ACKschema\CAN\f \SOH(\v2\DC4.pulsar.proto.SchemaR\ACKschema\DC2`\n\
    \\SIinitialPosition\CAN\r \SOH(\SO2..pulsar.proto.CommandSubscribe.InitialPosition:\ACKLatestR\SIinitialPosition\DC2@\n\
    \\FSreplicate_subscription_state\CAN\SO \SOH(\bR\SUBreplicateSubscriptionState\DC26\n\
    \\DC4force_topic_creation\CAN\SI \SOH(\b:\EOTtrueR\DC2forceTopicCreation\DC2O\n\
    \#start_message_rollback_duration_sec\CAN\DLE \SOH(\EOT:\SOH0R\USstartMessageRollbackDurationSec\DC2A\n\
    \\rkeySharedMeta\CAN\DC1 \SOH(\v2\ESC.pulsar.proto.KeySharedMetaR\rkeySharedMeta\"B\n\
    \\aSubType\DC2\r\n\
    \\tExclusive\DLE\NUL\DC2\n\
    \\n\
    \\ACKShared\DLE\SOH\DC2\f\n\
    \\bFailover\DLE\STX\DC2\SO\n\
    \\n\
    \Key_Shared\DLE\ETX\"+\n\
    \\SIInitialPosition\DC2\n\
    \\n\
    \\ACKLatest\DLE\NUL\DC2\f\n\
    \\bEarliest\DLE\SOH\"\229\SOH\n\
    \\USCommandPartitionedTopicMetadata\DC2\DC4\n\
    \\ENQtopic\CAN\SOH \STX(\tR\ENQtopic\DC2\GS\n\
    \\n\
    \request_id\CAN\STX \STX(\EOTR\trequestId\DC2-\n\
    \\DC2original_principal\CAN\ETX \SOH(\tR\DC1originalPrincipal\DC2,\n\
    \\DC2original_auth_data\CAN\EOT \SOH(\tR\DLEoriginalAuthData\DC20\n\
    \\DC4original_auth_method\CAN\ENQ \SOH(\tR\DC2originalAuthMethod\"\184\STX\n\
    \'CommandPartitionedTopicMetadataResponse\DC2\RS\n\
    \\n\
    \partitions\CAN\SOH \SOH(\rR\n\
    \partitions\DC2\GS\n\
    \\n\
    \request_id\CAN\STX \STX(\EOTR\trequestId\DC2\\\n\
    \\bresponse\CAN\ETX \SOH(\SO2@.pulsar.proto.CommandPartitionedTopicMetadataResponse.LookupTypeR\bresponse\DC2/\n\
    \\ENQerror\CAN\EOT \SOH(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
    \\amessage\CAN\ENQ \SOH(\tR\amessage\"%\n\
    \\n\
    \LookupType\DC2\v\n\
    \\aSuccess\DLE\NUL\DC2\n\
    \\n\
    \\ACKFailed\DLE\SOH\"\191\STX\n\
    \\DC2CommandLookupTopic\DC2\DC4\n\
    \\ENQtopic\CAN\SOH \STX(\tR\ENQtopic\DC2\GS\n\
    \\n\
    \request_id\CAN\STX \STX(\EOTR\trequestId\DC2+\n\
    \\rauthoritative\CAN\ETX \SOH(\b:\ENQfalseR\rauthoritative\DC2-\n\
    \\DC2original_principal\CAN\EOT \SOH(\tR\DC1originalPrincipal\DC2,\n\
    \\DC2original_auth_data\CAN\ENQ \SOH(\tR\DLEoriginalAuthData\DC20\n\
    \\DC4original_auth_method\CAN\ACK \SOH(\tR\DC2originalAuthMethod\DC28\n\
    \\CANadvertised_listener_name\CAN\a \SOH(\tR\SYNadvertisedListenerName\"\217\ETX\n\
    \\SUBCommandLookupTopicResponse\DC2*\n\
    \\DLEbrokerServiceUrl\CAN\SOH \SOH(\tR\DLEbrokerServiceUrl\DC20\n\
    \\DC3brokerServiceUrlTls\CAN\STX \SOH(\tR\DC3brokerServiceUrlTls\DC2O\n\
    \\bresponse\CAN\ETX \SOH(\SO23.pulsar.proto.CommandLookupTopicResponse.LookupTypeR\bresponse\DC2\GS\n\
    \\n\
    \request_id\CAN\EOT \STX(\EOTR\trequestId\DC2+\n\
    \\rauthoritative\CAN\ENQ \SOH(\b:\ENQfalseR\rauthoritative\DC2/\n\
    \\ENQerror\CAN\ACK \SOH(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
    \\amessage\CAN\a \SOH(\tR\amessage\DC2@\n\
    \\EMproxy_through_service_url\CAN\b \SOH(\b:\ENQfalseR\SYNproxyThroughServiceUrl\"3\n\
    \\n\
    \LookupType\DC2\f\n\
    \\bRedirect\DLE\NUL\DC2\v\n\
    \\aConnect\DLE\SOH\DC2\n\
    \\n\
    \\ACKFailed\DLE\STX\"\241\STX\n\
    \\SICommandProducer\DC2\DC4\n\
    \\ENQtopic\CAN\SOH \STX(\tR\ENQtopic\DC2\US\n\
    \\vproducer_id\CAN\STX \STX(\EOTR\n\
    \producerId\DC2\GS\n\
    \\n\
    \request_id\CAN\ETX \STX(\EOTR\trequestId\DC2#\n\
    \\rproducer_name\CAN\EOT \SOH(\tR\fproducerName\DC2#\n\
    \\tencrypted\CAN\ENQ \SOH(\b:\ENQfalseR\tencrypted\DC22\n\
    \\bmetadata\CAN\ACK \ETX(\v2\SYN.pulsar.proto.KeyValueR\bmetadata\DC2,\n\
    \\ACKschema\CAN\a \SOH(\v2\DC4.pulsar.proto.SchemaR\ACKschema\DC2\ETB\n\
    \\ENQepoch\CAN\b \SOH(\EOT:\SOH0R\ENQepoch\DC2C\n\
    \\ESCuser_provided_producer_name\CAN\t \SOH(\b:\EOTtrueR\CANuserProvidedProducerName\"\162\STX\n\
    \\vCommandSend\DC2\US\n\
    \\vproducer_id\CAN\SOH \STX(\EOTR\n\
    \producerId\DC2\US\n\
    \\vsequence_id\CAN\STX \STX(\EOTR\n\
    \sequenceId\DC2$\n\
    \\fnum_messages\CAN\ETX \SOH(\ENQ:\SOH1R\vnumMessages\DC2+\n\
    \\DLEtxnid_least_bits\CAN\EOT \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
    \\SItxnid_most_bits\CAN\ENQ \SOH(\EOT:\SOH0R\rtxnidMostBits\DC21\n\
    \\DC3highest_sequence_id\CAN\ACK \SOH(\EOT:\SOH0R\DC1highestSequenceId\DC2 \n\
    \\bis_chunk\CAN\a \SOH(\b:\ENQfalseR\aisChunk\"\197\SOH\n\
    \\DC2CommandSendReceipt\DC2\US\n\
    \\vproducer_id\CAN\SOH \STX(\EOTR\n\
    \producerId\DC2\US\n\
    \\vsequence_id\CAN\STX \STX(\EOTR\n\
    \sequenceId\DC2:\n\
    \\n\
    \message_id\CAN\ETX \SOH(\v2\ESC.pulsar.proto.MessageIdDataR\tmessageId\DC21\n\
    \\DC3highest_sequence_id\CAN\EOT \SOH(\EOT:\SOH0R\DC1highestSequenceId\"\159\SOH\n\
    \\DLECommandSendError\DC2\US\n\
    \\vproducer_id\CAN\SOH \STX(\EOTR\n\
    \producerId\DC2\US\n\
    \\vsequence_id\CAN\STX \STX(\EOTR\n\
    \sequenceId\DC2/\n\
    \\ENQerror\CAN\ETX \STX(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
    \\amessage\CAN\EOT \STX(\tR\amessage\"\180\SOH\n\
    \\SOCommandMessage\DC2\US\n\
    \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
    \consumerId\DC2:\n\
    \\n\
    \message_id\CAN\STX \STX(\v2\ESC.pulsar.proto.MessageIdDataR\tmessageId\DC2,\n\
    \\DLEredelivery_count\CAN\ETX \SOH(\r:\SOH0R\SIredeliveryCount\DC2\ETB\n\
    \\aack_set\CAN\EOT \ETX(\ETXR\ACKackSet\"\204\EOT\n\
    \\n\
    \CommandAck\DC2\US\n\
    \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
    \consumerId\DC2;\n\
    \\back_type\CAN\STX \STX(\SO2 .pulsar.proto.CommandAck.AckTypeR\aackType\DC2:\n\
    \\n\
    \message_id\CAN\ETX \ETX(\v2\ESC.pulsar.proto.MessageIdDataR\tmessageId\DC2S\n\
    \\DLEvalidation_error\CAN\EOT \SOH(\SO2(.pulsar.proto.CommandAck.ValidationErrorR\SIvalidationError\DC2:\n\
    \\n\
    \properties\CAN\ENQ \ETX(\v2\SUB.pulsar.proto.KeyLongValueR\n\
    \properties\DC2+\n\
    \\DLEtxnid_least_bits\CAN\ACK \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
    \\SItxnid_most_bits\CAN\a \SOH(\EOT:\SOH0R\rtxnidMostBits\")\n\
    \\aAckType\DC2\SO\n\
    \\n\
    \Individual\DLE\NUL\DC2\SO\n\
    \\n\
    \Cumulative\DLE\SOH\"\143\SOH\n\
    \\SIValidationError\DC2\RS\n\
    \\SUBUncompressedSizeCorruption\DLE\NUL\DC2\SYN\n\
    \\DC2DecompressionError\DLE\SOH\DC2\DC4\n\
    \\DLEChecksumMismatch\DLE\STX\DC2\EM\n\
    \\NAKBatchDeSerializeError\DLE\ETX\DC2\DC3\n\
    \\SIDecryptionError\DLE\EOT\"\216\SOH\n\
    \\DC2CommandAckResponse\DC2\US\n\
    \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
    \consumerId\DC2+\n\
    \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
    \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2/\n\
    \\ENQerror\CAN\EOT \SOH(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
    \\amessage\CAN\ENQ \SOH(\tR\amessage\"b\n\
    \\ESCCommandActiveConsumerChange\DC2\US\n\
    \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
    \consumerId\DC2\"\n\
    \\tis_active\CAN\STX \SOH(\b:\ENQfalseR\bisActive\"V\n\
    \\vCommandFlow\DC2\US\n\
    \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
    \consumerId\DC2&\n\
    \\SOmessagePermits\CAN\STX \STX(\rR\SOmessagePermits\"T\n\
    \\DC2CommandUnsubscribe\DC2\US\n\
    \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
    \consumerId\DC2\GS\n\
    \\n\
    \request_id\CAN\STX \STX(\EOTR\trequestId\"\187\SOH\n\
    \\vCommandSeek\DC2\US\n\
    \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
    \consumerId\DC2\GS\n\
    \\n\
    \request_id\CAN\STX \STX(\EOTR\trequestId\DC2:\n\
    \\n\
    \message_id\CAN\ETX \SOH(\v2\ESC.pulsar.proto.MessageIdDataR\tmessageId\DC20\n\
    \\DC4message_publish_time\CAN\EOT \SOH(\EOTR\DC2messagePublishTime\";\n\
    \\CANCommandReachedEndOfTopic\DC2\US\n\
    \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
    \consumerId\"V\n\
    \\DC4CommandCloseProducer\DC2\US\n\
    \\vproducer_id\CAN\SOH \STX(\EOTR\n\
    \producerId\DC2\GS\n\
    \\n\
    \request_id\CAN\STX \STX(\EOTR\trequestId\"V\n\
    \\DC4CommandCloseConsumer\DC2\US\n\
    \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
    \consumerId\DC2\GS\n\
    \\n\
    \request_id\CAN\STX \STX(\EOTR\trequestId\"\135\SOH\n\
    \&CommandRedeliverUnacknowledgedMessages\DC2\US\n\
    \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
    \consumerId\DC2<\n\
    \\vmessage_ids\CAN\STX \ETX(\v2\ESC.pulsar.proto.MessageIdDataR\n\
    \messageIds\"]\n\
    \\SOCommandSuccess\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2,\n\
    \\ACKschema\CAN\STX \SOH(\v2\DC4.pulsar.proto.SchemaR\ACKschema\"\177\SOH\n\
    \\SYNCommandProducerSuccess\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2#\n\
    \\rproducer_name\CAN\STX \STX(\tR\fproducerName\DC2,\n\
    \\DLElast_sequence_id\CAN\ETX \SOH(\ETX:\STX-1R\SOlastSequenceId\DC2%\n\
    \\SOschema_version\CAN\EOT \SOH(\fR\rschemaVersion\"x\n\
    \\fCommandError\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2/\n\
    \\ENQerror\CAN\STX \STX(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
    \\amessage\CAN\ETX \STX(\tR\amessage\"\r\n\
    \\vCommandPing\"\r\n\
    \\vCommandPong\"V\n\
    \\DC4CommandConsumerStats\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2\US\n\
    \\vconsumer_id\CAN\EOT \STX(\EOTR\n\
    \consumerId\"\240\EOT\n\
    \\FSCommandConsumerStatsResponse\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC28\n\
    \\n\
    \error_code\CAN\STX \SOH(\SO2\EM.pulsar.proto.ServerErrorR\terrorCode\DC2#\n\
    \\rerror_message\CAN\ETX \SOH(\tR\ferrorMessage\DC2\RS\n\
    \\n\
    \msgRateOut\CAN\EOT \SOH(\SOHR\n\
    \msgRateOut\DC2*\n\
    \\DLEmsgThroughputOut\CAN\ENQ \SOH(\SOHR\DLEmsgThroughputOut\DC2*\n\
    \\DLEmsgRateRedeliver\CAN\ACK \SOH(\SOHR\DLEmsgRateRedeliver\DC2\"\n\
    \\fconsumerName\CAN\a \SOH(\tR\fconsumerName\DC2*\n\
    \\DLEavailablePermits\CAN\b \SOH(\EOTR\DLEavailablePermits\DC2(\n\
    \\SIunackedMessages\CAN\t \SOH(\EOTR\SIunackedMessages\DC2B\n\
    \\FSblockedConsumerOnUnackedMsgs\CAN\n\
    \ \SOH(\bR\FSblockedConsumerOnUnackedMsgs\DC2\CAN\n\
    \\aaddress\CAN\v \SOH(\tR\aaddress\DC2&\n\
    \\SOconnectedSince\CAN\f \SOH(\tR\SOconnectedSince\DC2\DC2\n\
    \\EOTtype\CAN\r \SOH(\tR\EOTtype\DC2&\n\
    \\SOmsgRateExpired\CAN\SO \SOH(\SOHR\SOmsgRateExpired\DC2\RS\n\
    \\n\
    \msgBacklog\CAN\SI \SOH(\EOTR\n\
    \msgBacklog\"Y\n\
    \\ETBCommandGetLastMessageId\DC2\US\n\
    \\vconsumer_id\CAN\SOH \STX(\EOTR\n\
    \consumerId\DC2\GS\n\
    \\n\
    \request_id\CAN\STX \STX(\EOTR\trequestId\"\133\SOH\n\
    \\USCommandGetLastMessageIdResponse\DC2C\n\
    \\SIlast_message_id\CAN\SOH \STX(\v2\ESC.pulsar.proto.MessageIdDataR\rlastMessageId\DC2\GS\n\
    \\n\
    \request_id\CAN\STX \STX(\EOTR\trequestId\"\223\SOH\n\
    \\ESCCommandGetTopicsOfNamespace\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2\FS\n\
    \\tnamespace\CAN\STX \STX(\tR\tnamespace\DC2N\n\
    \\EOTmode\CAN\ETX \SOH(\SO2..pulsar.proto.CommandGetTopicsOfNamespace.Mode:\n\
    \PERSISTENTR\EOTmode\"3\n\
    \\EOTMode\DC2\SO\n\
    \\n\
    \PERSISTENT\DLE\NUL\DC2\DC2\n\
    \\SONON_PERSISTENT\DLE\SOH\DC2\a\n\
    \\ETXALL\DLE\STX\"\\\n\
    \#CommandGetTopicsOfNamespaceResponse\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2\SYN\n\
    \\ACKtopics\CAN\STX \ETX(\tR\ACKtopics\"n\n\
    \\DLECommandGetSchema\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2\DC4\n\
    \\ENQtopic\CAN\STX \STX(\tR\ENQtopic\DC2%\n\
    \\SOschema_version\CAN\ETX \SOH(\fR\rschemaVersion\"\237\SOH\n\
    \\CANCommandGetSchemaResponse\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC28\n\
    \\n\
    \error_code\CAN\STX \SOH(\SO2\EM.pulsar.proto.ServerErrorR\terrorCode\DC2#\n\
    \\rerror_message\CAN\ETX \SOH(\tR\ferrorMessage\DC2,\n\
    \\ACKschema\CAN\EOT \SOH(\v2\DC4.pulsar.proto.SchemaR\ACKschema\DC2%\n\
    \\SOschema_version\CAN\ENQ \SOH(\fR\rschemaVersion\"}\n\
    \\CANCommandGetOrCreateSchema\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2\DC4\n\
    \\ENQtopic\CAN\STX \STX(\tR\ENQtopic\DC2,\n\
    \\ACKschema\CAN\ETX \STX(\v2\DC4.pulsar.proto.SchemaR\ACKschema\"\199\SOH\n\
    \ CommandGetOrCreateSchemaResponse\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC28\n\
    \\n\
    \error_code\CAN\STX \SOH(\SO2\EM.pulsar.proto.ServerErrorR\terrorCode\DC2#\n\
    \\rerror_message\CAN\ETX \SOH(\tR\ferrorMessage\DC2%\n\
    \\SOschema_version\CAN\EOT \SOH(\fR\rschemaVersion\"q\n\
    \\rCommandNewTxn\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2)\n\
    \\SItxn_ttl_seconds\CAN\STX \SOH(\EOT:\SOH0R\rtxnTtlSeconds\DC2\SYN\n\
    \\ENQtc_id\CAN\ETX \SOH(\EOT:\SOH0R\EOTtcId\"\217\SOH\n\
    \\NAKCommandNewTxnResponse\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
    \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
    \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2/\n\
    \\ENQerror\CAN\EOT \SOH(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
    \\amessage\CAN\ENQ \SOH(\tR\amessage\"\177\SOH\n\
    \\CANCommandAddPartitionToTxn\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
    \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
    \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2\RS\n\
    \\n\
    \partitions\CAN\EOT \ETX(\tR\n\
    \partitions\"\228\SOH\n\
    \ CommandAddPartitionToTxnResponse\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
    \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
    \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2/\n\
    \\ENQerror\CAN\EOT \SOH(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
    \\amessage\CAN\ENQ \SOH(\tR\amessage\"H\n\
    \\fSubscription\DC2\DC4\n\
    \\ENQtopic\CAN\SOH \STX(\tR\ENQtopic\DC2\"\n\
    \\fsubscription\CAN\STX \STX(\tR\fsubscription\"\212\SOH\n\
    \\ESCCommandAddSubscriptionToTxn\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
    \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
    \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2>\n\
    \\fsubscription\CAN\EOT \ETX(\v2\SUB.pulsar.proto.SubscriptionR\fsubscription\"\231\SOH\n\
    \#CommandAddSubscriptionToTxnResponse\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
    \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
    \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2/\n\
    \\ENQerror\CAN\EOT \SOH(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
    \\amessage\CAN\ENQ \SOH(\tR\amessage\"\190\SOH\n\
    \\rCommandEndTxn\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
    \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
    \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC26\n\
    \\n\
    \txn_action\CAN\EOT \SOH(\SO2\ETB.pulsar.proto.TxnActionR\ttxnAction\"\217\SOH\n\
    \\NAKCommandEndTxnResponse\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
    \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
    \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2/\n\
    \\ENQerror\CAN\EOT \SOH(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
    \\amessage\CAN\ENQ \SOH(\tR\amessage\"\223\SOH\n\
    \\CANCommandEndTxnOnPartition\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
    \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
    \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2\DC4\n\
    \\ENQtopic\CAN\EOT \SOH(\tR\ENQtopic\DC26\n\
    \\n\
    \txn_action\CAN\ENQ \SOH(\SO2\ETB.pulsar.proto.TxnActionR\ttxnAction\"\228\SOH\n\
    \ CommandEndTxnOnPartitionResponse\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
    \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
    \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2/\n\
    \\ENQerror\CAN\EOT \SOH(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
    \\amessage\CAN\ENQ \SOH(\tR\amessage\"\140\STX\n\
    \\ESCCommandEndTxnOnSubscription\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
    \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
    \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2>\n\
    \\fsubscription\CAN\EOT \SOH(\v2\SUB.pulsar.proto.SubscriptionR\fsubscription\DC26\n\
    \\n\
    \txn_action\CAN\ENQ \SOH(\SO2\ETB.pulsar.proto.TxnActionR\ttxnAction\"\231\SOH\n\
    \#CommandEndTxnOnSubscriptionResponse\DC2\GS\n\
    \\n\
    \request_id\CAN\SOH \STX(\EOTR\trequestId\DC2+\n\
    \\DLEtxnid_least_bits\CAN\STX \SOH(\EOT:\SOH0R\SOtxnidLeastBits\DC2)\n\
    \\SItxnid_most_bits\CAN\ETX \SOH(\EOT:\SOH0R\rtxnidMostBits\DC2/\n\
    \\ENQerror\CAN\EOT \SOH(\SO2\EM.pulsar.proto.ServerErrorR\ENQerror\DC2\CAN\n\
    \\amessage\CAN\ENQ \SOH(\tR\amessage\"\200(\n\
    \\vBaseCommand\DC22\n\
    \\EOTtype\CAN\SOH \STX(\SO2\RS.pulsar.proto.BaseCommand.TypeR\EOTtype\DC26\n\
    \\aconnect\CAN\STX \SOH(\v2\FS.pulsar.proto.CommandConnectR\aconnect\DC2<\n\
    \\tconnected\CAN\ETX \SOH(\v2\RS.pulsar.proto.CommandConnectedR\tconnected\DC2<\n\
    \\tsubscribe\CAN\EOT \SOH(\v2\RS.pulsar.proto.CommandSubscribeR\tsubscribe\DC29\n\
    \\bproducer\CAN\ENQ \SOH(\v2\GS.pulsar.proto.CommandProducerR\bproducer\DC2-\n\
    \\EOTsend\CAN\ACK \SOH(\v2\EM.pulsar.proto.CommandSendR\EOTsend\DC2C\n\
    \\fsend_receipt\CAN\a \SOH(\v2 .pulsar.proto.CommandSendReceiptR\vsendReceipt\DC2=\n\
    \\n\
    \send_error\CAN\b \SOH(\v2\RS.pulsar.proto.CommandSendErrorR\tsendError\DC26\n\
    \\amessage\CAN\t \SOH(\v2\FS.pulsar.proto.CommandMessageR\amessage\DC2*\n\
    \\ETXack\CAN\n\
    \ \SOH(\v2\CAN.pulsar.proto.CommandAckR\ETXack\DC2-\n\
    \\EOTflow\CAN\v \SOH(\v2\EM.pulsar.proto.CommandFlowR\EOTflow\DC2B\n\
    \\vunsubscribe\CAN\f \SOH(\v2 .pulsar.proto.CommandUnsubscribeR\vunsubscribe\DC26\n\
    \\asuccess\CAN\r \SOH(\v2\FS.pulsar.proto.CommandSuccessR\asuccess\DC20\n\
    \\ENQerror\CAN\SO \SOH(\v2\SUB.pulsar.proto.CommandErrorR\ENQerror\DC2I\n\
    \\SOclose_producer\CAN\SI \SOH(\v2\".pulsar.proto.CommandCloseProducerR\rcloseProducer\DC2I\n\
    \\SOclose_consumer\CAN\DLE \SOH(\v2\".pulsar.proto.CommandCloseConsumerR\rcloseConsumer\DC2O\n\
    \\DLEproducer_success\CAN\DC1 \SOH(\v2$.pulsar.proto.CommandProducerSuccessR\SIproducerSuccess\DC2-\n\
    \\EOTping\CAN\DC2 \SOH(\v2\EM.pulsar.proto.CommandPingR\EOTping\DC2-\n\
    \\EOTpong\CAN\DC3 \SOH(\v2\EM.pulsar.proto.CommandPongR\EOTpong\DC2~\n\
    \\USredeliverUnacknowledgedMessages\CAN\DC4 \SOH(\v24.pulsar.proto.CommandRedeliverUnacknowledgedMessagesR\USredeliverUnacknowledgedMessages\DC2[\n\
    \\DC1partitionMetadata\CAN\NAK \SOH(\v2-.pulsar.proto.CommandPartitionedTopicMetadataR\DC1partitionMetadata\DC2s\n\
    \\EMpartitionMetadataResponse\CAN\SYN \SOH(\v25.pulsar.proto.CommandPartitionedTopicMetadataResponseR\EMpartitionMetadataResponse\DC2B\n\
    \\vlookupTopic\CAN\ETB \SOH(\v2 .pulsar.proto.CommandLookupTopicR\vlookupTopic\DC2Z\n\
    \\DC3lookupTopicResponse\CAN\CAN \SOH(\v2(.pulsar.proto.CommandLookupTopicResponseR\DC3lookupTopicResponse\DC2H\n\
    \\rconsumerStats\CAN\EM \SOH(\v2\".pulsar.proto.CommandConsumerStatsR\rconsumerStats\DC2`\n\
    \\NAKconsumerStatsResponse\CAN\SUB \SOH(\v2*.pulsar.proto.CommandConsumerStatsResponseR\NAKconsumerStatsResponse\DC2T\n\
    \\DC1reachedEndOfTopic\CAN\ESC \SOH(\v2&.pulsar.proto.CommandReachedEndOfTopicR\DC1reachedEndOfTopic\DC2-\n\
    \\EOTseek\CAN\FS \SOH(\v2\EM.pulsar.proto.CommandSeekR\EOTseek\DC2Q\n\
    \\DLEgetLastMessageId\CAN\GS \SOH(\v2%.pulsar.proto.CommandGetLastMessageIdR\DLEgetLastMessageId\DC2i\n\
    \\CANgetLastMessageIdResponse\CAN\RS \SOH(\v2-.pulsar.proto.CommandGetLastMessageIdResponseR\CANgetLastMessageIdResponse\DC2_\n\
    \\SYNactive_consumer_change\CAN\US \SOH(\v2).pulsar.proto.CommandActiveConsumerChangeR\DC4activeConsumerChange\DC2]\n\
    \\DC4getTopicsOfNamespace\CAN  \SOH(\v2).pulsar.proto.CommandGetTopicsOfNamespaceR\DC4getTopicsOfNamespace\DC2u\n\
    \\FSgetTopicsOfNamespaceResponse\CAN! \SOH(\v21.pulsar.proto.CommandGetTopicsOfNamespaceResponseR\FSgetTopicsOfNamespaceResponse\DC2<\n\
    \\tgetSchema\CAN\" \SOH(\v2\RS.pulsar.proto.CommandGetSchemaR\tgetSchema\DC2T\n\
    \\DC1getSchemaResponse\CAN# \SOH(\v2&.pulsar.proto.CommandGetSchemaResponseR\DC1getSchemaResponse\DC2H\n\
    \\rauthChallenge\CAN$ \SOH(\v2\".pulsar.proto.CommandAuthChallengeR\rauthChallenge\DC2E\n\
    \\fauthResponse\CAN% \SOH(\v2!.pulsar.proto.CommandAuthResponseR\fauthResponse\DC2B\n\
    \\vackResponse\CAN& \SOH(\v2 .pulsar.proto.CommandAckResponseR\vackResponse\DC2T\n\
    \\DC1getOrCreateSchema\CAN' \SOH(\v2&.pulsar.proto.CommandGetOrCreateSchemaR\DC1getOrCreateSchema\DC2l\n\
    \\EMgetOrCreateSchemaResponse\CAN( \SOH(\v2..pulsar.proto.CommandGetOrCreateSchemaResponseR\EMgetOrCreateSchemaResponse\DC23\n\
    \\ACKnewTxn\CAN2 \SOH(\v2\ESC.pulsar.proto.CommandNewTxnR\ACKnewTxn\DC2K\n\
    \\SOnewTxnResponse\CAN3 \SOH(\v2#.pulsar.proto.CommandNewTxnResponseR\SOnewTxnResponse\DC2T\n\
    \\DC1addPartitionToTxn\CAN4 \SOH(\v2&.pulsar.proto.CommandAddPartitionToTxnR\DC1addPartitionToTxn\DC2l\n\
    \\EMaddPartitionToTxnResponse\CAN5 \SOH(\v2..pulsar.proto.CommandAddPartitionToTxnResponseR\EMaddPartitionToTxnResponse\DC2]\n\
    \\DC4addSubscriptionToTxn\CAN6 \SOH(\v2).pulsar.proto.CommandAddSubscriptionToTxnR\DC4addSubscriptionToTxn\DC2u\n\
    \\FSaddSubscriptionToTxnResponse\CAN7 \SOH(\v21.pulsar.proto.CommandAddSubscriptionToTxnResponseR\FSaddSubscriptionToTxnResponse\DC23\n\
    \\ACKendTxn\CAN8 \SOH(\v2\ESC.pulsar.proto.CommandEndTxnR\ACKendTxn\DC2K\n\
    \\SOendTxnResponse\CAN9 \SOH(\v2#.pulsar.proto.CommandEndTxnResponseR\SOendTxnResponse\DC2T\n\
    \\DC1endTxnOnPartition\CAN: \SOH(\v2&.pulsar.proto.CommandEndTxnOnPartitionR\DC1endTxnOnPartition\DC2l\n\
    \\EMendTxnOnPartitionResponse\CAN; \SOH(\v2..pulsar.proto.CommandEndTxnOnPartitionResponseR\EMendTxnOnPartitionResponse\DC2]\n\
    \\DC4endTxnOnSubscription\CAN< \SOH(\v2).pulsar.proto.CommandEndTxnOnSubscriptionR\DC4endTxnOnSubscription\DC2u\n\
    \\FSendTxnOnSubscriptionResponse\CAN= \SOH(\v21.pulsar.proto.CommandEndTxnOnSubscriptionResponseR\FSendTxnOnSubscriptionResponse\"\223\b\n\
    \\EOTType\DC2\v\n\
    \\aCONNECT\DLE\STX\DC2\r\n\
    \\tCONNECTED\DLE\ETX\DC2\r\n\
    \\tSUBSCRIBE\DLE\EOT\DC2\f\n\
    \\bPRODUCER\DLE\ENQ\DC2\b\n\
    \\EOTSEND\DLE\ACK\DC2\DLE\n\
    \\fSEND_RECEIPT\DLE\a\DC2\SO\n\
    \\n\
    \SEND_ERROR\DLE\b\DC2\v\n\
    \\aMESSAGE\DLE\t\DC2\a\n\
    \\ETXACK\DLE\n\
    \\DC2\b\n\
    \\EOTFLOW\DLE\v\DC2\SI\n\
    \\vUNSUBSCRIBE\DLE\f\DC2\v\n\
    \\aSUCCESS\DLE\r\DC2\t\n\
    \\ENQERROR\DLE\SO\DC2\DC2\n\
    \\SOCLOSE_PRODUCER\DLE\SI\DC2\DC2\n\
    \\SOCLOSE_CONSUMER\DLE\DLE\DC2\DC4\n\
    \\DLEPRODUCER_SUCCESS\DLE\DC1\DC2\b\n\
    \\EOTPING\DLE\DC2\DC2\b\n\
    \\EOTPONG\DLE\DC3\DC2%\n\
    \!REDELIVER_UNACKNOWLEDGED_MESSAGES\DLE\DC4\DC2\CAN\n\
    \\DC4PARTITIONED_METADATA\DLE\NAK\DC2!\n\
    \\GSPARTITIONED_METADATA_RESPONSE\DLE\SYN\DC2\n\
    \\n\
    \\ACKLOOKUP\DLE\ETB\DC2\DC3\n\
    \\SILOOKUP_RESPONSE\DLE\CAN\DC2\DC2\n\
    \\SOCONSUMER_STATS\DLE\EM\DC2\ESC\n\
    \\ETBCONSUMER_STATS_RESPONSE\DLE\SUB\DC2\CAN\n\
    \\DC4REACHED_END_OF_TOPIC\DLE\ESC\DC2\b\n\
    \\EOTSEEK\DLE\FS\DC2\ETB\n\
    \\DC3GET_LAST_MESSAGE_ID\DLE\GS\DC2 \n\
    \\FSGET_LAST_MESSAGE_ID_RESPONSE\DLE\RS\DC2\SUB\n\
    \\SYNACTIVE_CONSUMER_CHANGE\DLE\US\DC2\ESC\n\
    \\ETBGET_TOPICS_OF_NAMESPACE\DLE \DC2$\n\
    \ GET_TOPICS_OF_NAMESPACE_RESPONSE\DLE!\DC2\SO\n\
    \\n\
    \GET_SCHEMA\DLE\"\DC2\ETB\n\
    \\DC3GET_SCHEMA_RESPONSE\DLE#\DC2\DC2\n\
    \\SOAUTH_CHALLENGE\DLE$\DC2\DC1\n\
    \\rAUTH_RESPONSE\DLE%\DC2\DLE\n\
    \\fACK_RESPONSE\DLE&\DC2\CAN\n\
    \\DC4GET_OR_CREATE_SCHEMA\DLE'\DC2!\n\
    \\GSGET_OR_CREATE_SCHEMA_RESPONSE\DLE(\DC2\v\n\
    \\aNEW_TXN\DLE2\DC2\DC4\n\
    \\DLENEW_TXN_RESPONSE\DLE3\DC2\CAN\n\
    \\DC4ADD_PARTITION_TO_TXN\DLE4\DC2!\n\
    \\GSADD_PARTITION_TO_TXN_RESPONSE\DLE5\DC2\ESC\n\
    \\ETBADD_SUBSCRIPTION_TO_TXN\DLE6\DC2$\n\
    \ ADD_SUBSCRIPTION_TO_TXN_RESPONSE\DLE7\DC2\v\n\
    \\aEND_TXN\DLE8\DC2\DC4\n\
    \\DLEEND_TXN_RESPONSE\DLE9\DC2\CAN\n\
    \\DC4END_TXN_ON_PARTITION\DLE:\DC2!\n\
    \\GSEND_TXN_ON_PARTITION_RESPONSE\DLE;\DC2\ESC\n\
    \\ETBEND_TXN_ON_SUBSCRIPTION\DLE<\DC2$\n\
    \ END_TXN_ON_SUBSCRIPTION_RESPONSE\DLE=*D\n\
    \\SICompressionType\DC2\b\n\
    \\EOTNONE\DLE\NUL\DC2\a\n\
    \\ETXLZ4\DLE\SOH\DC2\b\n\
    \\EOTZLIB\DLE\STX\DC2\b\n\
    \\EOTZSTD\DLE\ETX\DC2\n\
    \\n\
    \\ACKSNAPPY\DLE\EOT*\188\EOT\n\
    \\vServerError\DC2\DLE\n\
    \\fUnknownError\DLE\NUL\DC2\DC1\n\
    \\rMetadataError\DLE\SOH\DC2\DC4\n\
    \\DLEPersistenceError\DLE\STX\DC2\ETB\n\
    \\DC3AuthenticationError\DLE\ETX\DC2\SYN\n\
    \\DC2AuthorizationError\DLE\EOT\DC2\DLE\n\
    \\fConsumerBusy\DLE\ENQ\DC2\DC3\n\
    \\SIServiceNotReady\DLE\ACK\DC2%\n\
    \!ProducerBlockedQuotaExceededError\DLE\a\DC2)\n\
    \%ProducerBlockedQuotaExceededException\DLE\b\DC2\DC1\n\
    \\rChecksumError\DLE\t\DC2\ESC\n\
    \\ETBUnsupportedVersionError\DLE\n\
    \\DC2\DC1\n\
    \\rTopicNotFound\DLE\v\DC2\CAN\n\
    \\DC4SubscriptionNotFound\DLE\f\DC2\DC4\n\
    \\DLEConsumerNotFound\DLE\r\DC2\DC3\n\
    \\SITooManyRequests\DLE\SO\DC2\CAN\n\
    \\DC4TopicTerminatedError\DLE\SI\DC2\DLE\n\
    \\fProducerBusy\DLE\DLE\DC2\DC4\n\
    \\DLEInvalidTopicName\DLE\DC1\DC2\SYN\n\
    \\DC2IncompatibleSchema\DLE\DC2\DC2\ETB\n\
    \\DC3ConsumerAssignError\DLE\DC3\DC2\"\n\
    \\RSTransactionCoordinatorNotFound\DLE\DC4\DC2\DC4\n\
    \\DLEInvalidTxnStatus\DLE\NAK\DC2\DC3\n\
    \\SINotAllowedError\DLE\SYN*K\n\
    \\n\
    \AuthMethod\DC2\DC2\n\
    \\SOAuthMethodNone\DLE\NUL\DC2\DC3\n\
    \\SIAuthMethodYcaV1\DLE\SOH\DC2\DC4\n\
    \\DLEAuthMethodAthens\DLE\STX*\151\SOH\n\
    \\SIProtocolVersion\DC2\ACK\n\
    \\STXv0\DLE\NUL\DC2\ACK\n\
    \\STXv1\DLE\SOH\DC2\ACK\n\
    \\STXv2\DLE\STX\DC2\ACK\n\
    \\STXv3\DLE\ETX\DC2\ACK\n\
    \\STXv4\DLE\EOT\DC2\ACK\n\
    \\STXv5\DLE\ENQ\DC2\ACK\n\
    \\STXv6\DLE\ACK\DC2\ACK\n\
    \\STXv7\DLE\a\DC2\ACK\n\
    \\STXv8\DLE\b\DC2\ACK\n\
    \\STXv9\DLE\t\DC2\a\n\
    \\ETXv10\DLE\n\
    \\DC2\a\n\
    \\ETXv11\DLE\v\DC2\a\n\
    \\ETXv12\DLE\f\DC2\a\n\
    \\ETXv13\DLE\r\DC2\a\n\
    \\ETXv14\DLE\SO\DC2\a\n\
    \\ETXv15\DLE\SI*+\n\
    \\rKeySharedMode\DC2\SO\n\
    \\n\
    \AUTO_SPLIT\DLE\NUL\DC2\n\
    \\n\
    \\ACKSTICKY\DLE\SOH*\"\n\
    \\tTxnAction\DC2\n\
    \\n\
    \\ACKCOMMIT\DLE\NUL\DC2\t\n\
    \\ENQABORT\DLE\SOHB&\n\
    \\"org.apache.pulsar.common.api.protoH\ETXJ\237\219\STX\n\
    \\a\DC2\ENQ\DC4\NUL\194\a\SOH\n\
    \\253\ACK\n\
    \\SOH\f\DC2\ETX\DC4\NUL\DC2\SUBm Source: https://raw.githubusercontent.com/apache/pulsar/master/pulsar-common/src/main/proto/PulsarApi.proto\n\
    \2\131\ACK*\n\
    \ Licensed to the Apache Software Foundation (ASF) under one\n\
    \ or more contributor license agreements.  See the NOTICE file\n\
    \ distributed with this work for additional information\n\
    \ regarding copyright ownership.  The ASF licenses this file\n\
    \ to you under the Apache License, Version 2.0 (the\n\
    \ \"License\"); you may not use this file except in compliance\n\
    \ with the License.  You may obtain a copy of the License at\n\
    \\n\
    \   http://www.apache.org/licenses/LICENSE-2.0\n\
    \\n\
    \ Unless required by applicable law or agreed to in writing,\n\
    \ software distributed under the License is distributed on an\n\
    \ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\
    \ KIND, either express or implied.  See the License for the\n\
    \ specific language governing permissions and limitations\n\
    \ under the License.\n\
    \\n\
    \\b\n\
    \\SOH\STX\DC2\ETX\SYN\NUL\NAK\n\
    \\b\n\
    \\SOH\b\DC2\ETX\ETB\NUL;\n\
    \\t\n\
    \\STX\b\SOH\DC2\ETX\ETB\NUL;\n\
    \\b\n\
    \\SOH\b\DC2\ETX\CAN\NUL#\n\
    \\t\n\
    \\STX\b\t\DC2\ETX\CAN\NUL#\n\
    \\n\
    \\n\
    \\STX\EOT\NUL\DC2\EOT\SUB\NUL3\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\NUL\SOH\DC2\ETX\SUB\b\SO\n\
    \\f\n\
    \\EOT\EOT\NUL\EOT\NUL\DC2\EOT\ESC\EOT,\ENQ\n\
    \\f\n\
    \\ENQ\EOT\NUL\EOT\NUL\SOH\DC2\ETX\ESC\t\r\n\
    \\r\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\NUL\DC2\ETX\FS\b\DC1\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\NUL\SOH\DC2\ETX\FS\b\f\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\NUL\STX\DC2\ETX\FS\SI\DLE\n\
    \\r\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\SOH\DC2\ETX\GS\b\DC3\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\SOH\SOH\DC2\ETX\GS\b\SO\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\SOH\STX\DC2\ETX\GS\DC1\DC2\n\
    \\r\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\STX\DC2\ETX\RS\b\DC1\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\STX\SOH\DC2\ETX\RS\b\f\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\STX\STX\DC2\ETX\RS\SI\DLE\n\
    \\r\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\ETX\DC2\ETX\US\b\NAK\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\ETX\SOH\DC2\ETX\US\b\DLE\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\ETX\STX\DC2\ETX\US\DC3\DC4\n\
    \\r\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\EOT\DC2\ETX \b\DC1\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\EOT\SOH\DC2\ETX \b\f\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\EOT\STX\DC2\ETX \SI\DLE\n\
    \\r\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\ENQ\DC2\ETX!\b\DC1\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\ENQ\SOH\DC2\ETX!\b\f\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\ENQ\STX\DC2\ETX!\SI\DLE\n\
    \\r\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\ACK\DC2\ETX\"\b\DC1\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\ACK\SOH\DC2\ETX\"\b\f\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\ACK\STX\DC2\ETX\"\SI\DLE\n\
    \\r\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\a\DC2\ETX#\b\DC2\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\a\SOH\DC2\ETX#\b\r\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\a\STX\DC2\ETX#\DLE\DC1\n\
    \\r\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\b\DC2\ETX$\b\DC2\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\b\SOH\DC2\ETX$\b\r\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\b\STX\DC2\ETX$\DLE\DC1\n\
    \\r\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\t\DC2\ETX%\b\DC2\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\t\SOH\DC2\ETX%\b\r\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\t\STX\DC2\ETX%\DLE\DC1\n\
    \\r\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\n\
    \\DC2\ETX&\b\DC3\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\n\
    \\SOH\DC2\ETX&\b\r\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\n\
    \\STX\DC2\ETX&\DLE\DC2\n\
    \\r\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\v\DC2\ETX'\b\DC4\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\v\SOH\DC2\ETX'\b\SO\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\v\STX\DC2\ETX'\DC1\DC3\n\
    \\r\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\f\DC2\ETX(\b\DC2\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\f\SOH\DC2\ETX(\b\f\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\f\STX\DC2\ETX(\SI\DC1\n\
    \\r\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\r\DC2\ETX)\b\DC2\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\r\SOH\DC2\ETX)\b\f\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\r\STX\DC2\ETX)\SI\DC1\n\
    \\r\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\SO\DC2\ETX*\b\ETB\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\SO\SOH\DC2\ETX*\b\DC1\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\SO\STX\DC2\ETX*\DC4\SYN\n\
    \\r\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\SI\DC2\ETX+\b\SYN\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\SI\SOH\DC2\ETX+\b\DLE\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\SI\STX\DC2\ETX+\DC3\NAK\n\
    \\v\n\
    \\EOT\EOT\NUL\STX\NUL\DC2\ETX.\EOT\GS\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\EOT\DC2\ETX.\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\ENQ\DC2\ETX.\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\SOH\DC2\ETX.\DC4\CAN\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\ETX\DC2\ETX.\ESC\FS\n\
    \\v\n\
    \\EOT\EOT\NUL\STX\SOH\DC2\ETX/\EOT#\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\EOT\DC2\ETX/\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\ENQ\DC2\ETX/\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\SOH\DC2\ETX/\DC3\RS\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\ETX\DC2\ETX/!\"\n\
    \\v\n\
    \\EOT\EOT\NUL\STX\STX\DC2\ETX0\EOT\ESC\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\STX\EOT\DC2\ETX0\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\STX\ACK\DC2\ETX0\r\DC1\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\STX\SOH\DC2\ETX0\DC2\SYN\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\STX\ETX\DC2\ETX0\EM\SUB\n\
    \\v\n\
    \\EOT\EOT\NUL\STX\ETX\DC2\ETX1\EOT%\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ETX\EOT\DC2\ETX1\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ETX\ACK\DC2\ETX1\r\NAK\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ETX\SOH\DC2\ETX1\SYN \n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ETX\ETX\DC2\ETX1#$\n\
    \\n\
    \\n\
    \\STX\EOT\SOH\DC2\EOT5\NUL;\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\SOH\SOH\DC2\ETX5\b\NAK\n\
    \\v\n\
    \\EOT\EOT\SOH\STX\NUL\DC2\ETX6\EOT!\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\EOT\DC2\ETX6\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\ENQ\DC2\ETX6\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\SOH\DC2\ETX6\DC4\FS\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\ETX\DC2\ETX6\US \n\
    \\v\n\
    \\EOT\EOT\SOH\STX\SOH\DC2\ETX7\EOT!\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\EOT\DC2\ETX7\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\ENQ\DC2\ETX7\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\SOH\DC2\ETX7\DC4\ESC\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\ETX\DC2\ETX7\US \n\
    \\v\n\
    \\EOT\EOT\SOH\STX\STX\DC2\ETX8\EOT0\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\STX\EOT\DC2\ETX8\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\STX\ENQ\DC2\ETX8\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\STX\SOH\DC2\ETX8\DC3\FS\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\STX\ETX\DC2\ETX8\US \n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\STX\b\DC2\ETX8!/\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\STX\a\DC2\ETX8,.\n\
    \\v\n\
    \\EOT\EOT\SOH\STX\ETX\DC2\ETX9\EOT2\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ETX\EOT\DC2\ETX9\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ETX\ENQ\DC2\ETX9\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ETX\SOH\DC2\ETX9\DC3\RS\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ETX\ETX\DC2\ETX9!\"\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ETX\b\DC2\ETX9#1\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ETX\a\DC2\ETX9.0\n\
    \\v\n\
    \\EOT\EOT\SOH\STX\EOT\DC2\ETX:\EOT\US\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\EOT\EOT\DC2\ETX:\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\EOT\ENQ\DC2\ETX:\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\EOT\SOH\DC2\ETX:\DC3\SUB\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\EOT\ETX\DC2\ETX:\GS\RS\n\
    \\n\
    \\n\
    \\STX\EOT\STX\DC2\EOT=\NUL@\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\STX\SOH\DC2\ETX=\b\DLE\n\
    \\v\n\
    \\EOT\EOT\STX\STX\NUL\DC2\ETX>\EOT\FS\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\NUL\EOT\DC2\ETX>\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\NUL\ENQ\DC2\ETX>\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\NUL\SOH\DC2\ETX>\DC4\ETB\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\NUL\ETX\DC2\ETX>\SUB\ESC\n\
    \\v\n\
    \\EOT\EOT\STX\STX\SOH\DC2\ETX?\EOT\RS\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\SOH\EOT\DC2\ETX?\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\SOH\ENQ\DC2\ETX?\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\SOH\SOH\DC2\ETX?\DC4\EM\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\SOH\ETX\DC2\ETX?\FS\GS\n\
    \\n\
    \\n\
    \\STX\EOT\ETX\DC2\EOTB\NULE\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\ETX\SOH\DC2\ETXB\b\DC4\n\
    \\v\n\
    \\EOT\EOT\ETX\STX\NUL\DC2\ETXC\EOT\FS\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\NUL\EOT\DC2\ETXC\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\NUL\ENQ\DC2\ETXC\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\NUL\SOH\DC2\ETXC\DC4\ETB\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\NUL\ETX\DC2\ETXC\SUB\ESC\n\
    \\v\n\
    \\EOT\EOT\ETX\STX\SOH\DC2\ETXD\EOT\RS\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\SOH\EOT\DC2\ETXD\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\SOH\ENQ\DC2\ETXD\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\SOH\SOH\DC2\ETXD\DC4\EM\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\SOH\ETX\DC2\ETXD\FS\GS\n\
    \\n\
    \\n\
    \\STX\EOT\EOT\DC2\EOTG\NULJ\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\EOT\SOH\DC2\ETXG\b\DLE\n\
    \\v\n\
    \\EOT\EOT\EOT\STX\NUL\DC2\ETXH\EOT\GS\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\NUL\EOT\DC2\ETXH\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\NUL\ENQ\DC2\ETXH\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\NUL\SOH\DC2\ETXH\DC3\CAN\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\NUL\ETX\DC2\ETXH\ESC\FS\n\
    \\v\n\
    \\EOT\EOT\EOT\STX\SOH\DC2\ETXI\EOT\ESC\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\SOH\EOT\DC2\ETXI\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\SOH\ENQ\DC2\ETXI\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\SOH\SOH\DC2\ETXI\DC3\SYN\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\SOH\ETX\DC2\ETXI\EM\SUB\n\
    \\n\
    \\n\
    \\STX\EOT\ENQ\DC2\EOTL\NULP\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\ENQ\SOH\DC2\ETXL\b\SYN\n\
    \\v\n\
    \\EOT\EOT\ENQ\STX\NUL\DC2\ETXM\EOT\FS\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\NUL\EOT\DC2\ETXM\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\NUL\ENQ\DC2\ETXM\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\NUL\SOH\DC2\ETXM\DC4\ETB\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\NUL\ETX\DC2\ETXM\SUB\ESC\n\
    \\v\n\
    \\EOT\EOT\ENQ\STX\SOH\DC2\ETXN\EOT\GS\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\SOH\EOT\DC2\ETXN\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\SOH\ENQ\DC2\ETXN\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\SOH\SOH\DC2\ETXN\DC3\CAN\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\SOH\ETX\DC2\ETXN\ESC\FS\n\
    \\v\n\
    \\EOT\EOT\ENQ\STX\STX\DC2\ETXO\EOT#\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\STX\EOT\DC2\ETXO\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\STX\ACK\DC2\ETXO\r\NAK\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\STX\SOH\DC2\ETXO\SYN\RS\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\STX\ETX\DC2\ETXO!\"\n\
    \\n\
    \\n\
    \\STX\ENQ\NUL\DC2\EOTR\NULX\SOH\n\
    \\n\
    \\n\
    \\ETX\ENQ\NUL\SOH\DC2\ETXR\ENQ\DC4\n\
    \\v\n\
    \\EOT\ENQ\NUL\STX\NUL\DC2\ETXS\EOT\SI\n\
    \\f\n\
    \\ENQ\ENQ\NUL\STX\NUL\SOH\DC2\ETXS\EOT\b\n\
    \\f\n\
    \\ENQ\ENQ\NUL\STX\NUL\STX\DC2\ETXS\r\SO\n\
    \\v\n\
    \\EOT\ENQ\NUL\STX\SOH\DC2\ETXT\EOT\SI\n\
    \\f\n\
    \\ENQ\ENQ\NUL\STX\SOH\SOH\DC2\ETXT\EOT\a\n\
    \\f\n\
    \\ENQ\ENQ\NUL\STX\SOH\STX\DC2\ETXT\r\SO\n\
    \\v\n\
    \\EOT\ENQ\NUL\STX\STX\DC2\ETXU\EOT\SI\n\
    \\f\n\
    \\ENQ\ENQ\NUL\STX\STX\SOH\DC2\ETXU\EOT\b\n\
    \\f\n\
    \\ENQ\ENQ\NUL\STX\STX\STX\DC2\ETXU\r\SO\n\
    \\v\n\
    \\EOT\ENQ\NUL\STX\ETX\DC2\ETXV\EOT\SI\n\
    \\f\n\
    \\ENQ\ENQ\NUL\STX\ETX\SOH\DC2\ETXV\EOT\b\n\
    \\f\n\
    \\ENQ\ENQ\NUL\STX\ETX\STX\DC2\ETXV\r\SO\n\
    \\v\n\
    \\EOT\ENQ\NUL\STX\EOT\DC2\ETXW\EOT\DC1\n\
    \\f\n\
    \\ENQ\ENQ\NUL\STX\EOT\SOH\DC2\ETXW\EOT\n\
    \\n\
    \\f\n\
    \\ENQ\ENQ\NUL\STX\EOT\STX\DC2\ETXW\SI\DLE\n\
    \\v\n\
    \\STX\EOT\ACK\DC2\ENQZ\NUL\150\SOH\SOH\n\
    \\n\
    \\n\
    \\ETX\EOT\ACK\SOH\DC2\ETXZ\b\ETB\n\
    \\v\n\
    \\EOT\EOT\ACK\STX\NUL\DC2\ETX[\EOT(\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\NUL\EOT\DC2\ETX[\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\NUL\ENQ\DC2\ETX[\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\NUL\SOH\DC2\ETX[\DC4!\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\NUL\ETX\DC2\ETX[&'\n\
    \\v\n\
    \\EOT\EOT\ACK\STX\SOH\DC2\ETX\\\EOT(\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SOH\EOT\DC2\ETX\\\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SOH\ENQ\DC2\ETX\\\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SOH\SOH\DC2\ETX\\\DC4\US\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SOH\ETX\DC2\ETX\\&'\n\
    \\v\n\
    \\EOT\EOT\ACK\STX\STX\DC2\ETX]\EOT(\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\STX\EOT\DC2\ETX]\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\STX\ENQ\DC2\ETX]\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\STX\SOH\DC2\ETX]\DC4 \n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\STX\ETX\DC2\ETX]&'\n\
    \\v\n\
    \\EOT\EOT\ACK\STX\ETX\DC2\ETX^\EOT(\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\ETX\EOT\DC2\ETX^\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\ETX\ACK\DC2\ETX^\r\NAK\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\ETX\SOH\DC2\ETX^\SYN \n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\ETX\ETX\DC2\ETX^&'\n\
    \T\n\
    \\EOT\EOT\ACK\STX\EOT\DC2\ETXb\EOT(\SUBG Property set on replicated message,\n\
    \ includes the source cluster name\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\EOT\EOT\DC2\ETXb\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\EOT\ENQ\DC2\ETXb\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\EOT\SOH\DC2\ETXb\DC4#\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\EOT\ETX\DC2\ETXb&'\n\
    \1\n\
    \\EOT\EOT\ACK\STX\ENQ\DC2\ETXd\EOT(\SUB$key to decide partition for the msg\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\ENQ\EOT\DC2\ETXd\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\ENQ\ENQ\DC2\ETXd\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\ENQ\SOH\DC2\ETXd\DC4!\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\ENQ\ETX\DC2\ETXd&'\n\
    \/\n\
    \\EOT\EOT\ACK\STX\ACK\DC2\ETXf\EOT(\SUB\" Override namespace's replication\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\ACK\EOT\DC2\ETXf\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\ACK\ENQ\DC2\ETXf\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\ACK\SOH\DC2\ETXf\DC4 \n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\ACK\ETX\DC2\ETXf&'\n\
    \\v\n\
    \\EOT\EOT\ACK\STX\a\DC2\ETXg\EOT>\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\a\EOT\DC2\ETXg\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\a\ACK\DC2\ETXg\r\FS\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\a\SOH\DC2\ETXg\GS(\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\a\ETX\DC2\ETXg+,\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\a\b\DC2\ETXg-=\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\a\a\DC2\ETXg8<\n\
    \\v\n\
    \\EOT\EOT\ACK\STX\b\DC2\ETXh\EOT8\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\b\EOT\DC2\ETXh\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\b\ENQ\DC2\ETXh\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\b\SOH\DC2\ETXh\DC4%\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\b\ETX\DC2\ETXh()\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\b\b\DC2\ETXh*7\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\b\a\DC2\ETXh56\n\
    \\219\SOH\n\
    \\EOT\EOT\ACK\STX\t\DC2\ETXm\EOT<\SUB\205\SOH Removed below checksum field from Metadata as\n\
    \ it should be part of send-command which keeps checksum of header + payload\n\
    \optional sfixed64 checksum = 10;\n\
    \ differentiate single and batch message metadata\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\t\EOT\DC2\ETXm\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\t\ENQ\DC2\ETXm\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\t\SOH\DC2\ETXm\DC3(\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\t\ETX\DC2\ETXm+-\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\t\b\DC2\ETXm.;\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\t\a\DC2\ETXm9:\n\
    \\177\SOH\n\
    \\EOT\EOT\ACK\STX\n\
    \\DC2\ETXq\EOT2\SUB\163\SOH the timestamp that this event occurs. it is typically set by applications.\n\
    \ if this field is omitted, `publish_time` can be used for the purpose of `event_time`.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\n\
    \\EOT\DC2\ETXq\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\n\
    \\ENQ\DC2\ETXq\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\n\
    \\SOH\DC2\ETXq\DC4\RS\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\n\
    \\ETX\DC2\ETXq!#\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\n\
    \\b\DC2\ETXq$1\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\n\
    \\a\DC2\ETXq/0\n\
    \[\n\
    \\EOT\EOT\ACK\STX\v\DC2\ETXs\EOT1\SUBN Contains encryption key name, encrypted key and metadata to describe the key\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\v\EOT\DC2\ETXs\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\v\ACK\DC2\ETXs\r\ESC\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\v\SOH\DC2\ETXs\FS+\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\v\ETX\DC2\ETXs.0\n\
    \1\n\
    \\EOT\EOT\ACK\STX\f\DC2\ETXu\EOT)\SUB$ Algorithm used to encrypt data key\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\f\EOT\DC2\ETXu\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\f\ENQ\DC2\ETXu\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\f\SOH\DC2\ETXu\DC4#\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\f\ETX\DC2\ETXu&(\n\
    \;\n\
    \\EOT\EOT\ACK\STX\r\DC2\ETXw\EOT)\SUB. Additional parameters required by encryption\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\r\EOT\DC2\ETXw\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\r\ENQ\DC2\ETXw\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\r\SOH\DC2\ETXw\DC3#\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\r\ETX\DC2\ETXw&(\n\
    \\v\n\
    \\EOT\EOT\ACK\STX\SO\DC2\ETXx\EOT'\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SO\EOT\DC2\ETXx\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SO\ENQ\DC2\ETXx\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SO\SOH\DC2\ETXx\DC3!\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SO\ETX\DC2\ETXx$&\n\
    \\v\n\
    \\EOT\EOT\ACK\STX\SI\DC2\ETXz\EOTE\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SI\EOT\DC2\ETXz\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SI\ENQ\DC2\ETXz\r\DC1\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SI\SOH\DC2\ETXz\DC2+\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SI\ETX\DC2\ETXz.0\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SI\b\DC2\ETXz1D\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SI\a\DC2\ETXz=B\n\
    \o\n\
    \\EOT\EOT\ACK\STX\DLE\DC2\ETX|\EOT%\SUBb Specific a key to overwrite the message key which used for ordering dispatch in Key_Shared mode.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\DLE\EOT\DC2\ETX|\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\DLE\ENQ\DC2\ETX|\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\DLE\SOH\DC2\ETX|\DC3\US\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\DLE\ETX\DC2\ETX|\"$\n\
    \S\n\
    \\EOT\EOT\ACK\STX\DC1\DC2\ETX\DEL\EOT(\SUBF Mark the message to be delivered at or after the specified timestamp\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\DC1\EOT\DC2\ETX\DEL\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\DC1\ENQ\DC2\ETX\DEL\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\DC1\SOH\DC2\ETX\DEL\DC3\"\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\DC1\ETX\DC2\ETX\DEL%'\n\
    \\190\SOH\n\
    \\EOT\EOT\ACK\STX\DC2\DC2\EOT\132\SOH\EOT$\SUB\175\SOH Identify whether a message is a \"marker\" message used for\n\
    \ internal metadata instead of application published data.\n\
    \ Markers will generally not be propagated back to clients\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\DC2\EOT\DC2\EOT\132\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\DC2\ENQ\DC2\EOT\132\SOH\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\DC2\SOH\DC2\EOT\132\SOH\DC3\RS\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\DC2\ETX\DC2\EOT\132\SOH!#\n\
    \0\n\
    \\EOT\EOT\ACK\STX\DC3\DC2\EOT\135\SOH\EOT*\SUB\" transaction related message info\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\DC3\EOT\DC2\EOT\135\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\DC3\ENQ\DC2\EOT\135\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\DC3\SOH\DC2\EOT\135\SOH\DC4$\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\DC3\ETX\DC2\EOT\135\SOH')\n\
    \\f\n\
    \\EOT\EOT\ACK\STX\DC4\DC2\EOT\136\SOH\EOT)\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\DC4\EOT\DC2\EOT\136\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\DC4\ENQ\DC2\EOT\136\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\DC4\SOH\DC2\EOT\136\SOH\DC4#\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\DC4\ETX\DC2\EOT\136\SOH&(\n\
    \[\n\
    \\EOT\EOT\ACK\STX\NAK\DC2\EOT\139\SOH\EOT;\SUBM/ Add highest sequence id to support batch message with external sequence id\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\NAK\EOT\DC2\EOT\139\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\NAK\ENQ\DC2\EOT\139\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\NAK\SOH\DC2\EOT\139\SOH\DC4'\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\NAK\ETX\DC2\EOT\139\SOH*,\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\NAK\b\DC2\EOT\139\SOH-:\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\NAK\a\DC2\EOT\139\SOH89\n\
    \<\n\
    \\EOT\EOT\ACK\STX\SYN\DC2\EOT\142\SOH\EOT6\SUB. Indicate if the message payload value is set\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\SYN\EOT\DC2\EOT\142\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\SYN\ENQ\DC2\EOT\142\SOH\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\SYN\SOH\DC2\EOT\142\SOH\DC2\FS\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\SYN\ETX\DC2\EOT\142\SOH\US!\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\SYN\b\DC2\EOT\142\SOH\"5\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\SYN\a\DC2\EOT\142\SOH.3\n\
    \\f\n\
    \\EOT\EOT\ACK\STX\ETB\DC2\EOT\143\SOH\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\ETB\EOT\DC2\EOT\143\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\ETB\ENQ\DC2\EOT\143\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\ETB\SOH\DC2\EOT\143\SOH\DC4\CAN\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\ETB\ETX\DC2\EOT\143\SOH\ESC\GS\n\
    \\f\n\
    \\EOT\EOT\ACK\STX\CAN\DC2\EOT\144\SOH\b0\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\CAN\EOT\DC2\EOT\144\SOH\b\DLE\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\CAN\ENQ\DC2\EOT\144\SOH\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\CAN\SOH\DC2\EOT\144\SOH\ETB*\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\CAN\ETX\DC2\EOT\144\SOH-/\n\
    \\f\n\
    \\EOT\EOT\ACK\STX\EM\DC2\EOT\145\SOH\b1\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\EM\EOT\DC2\EOT\145\SOH\b\DLE\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\EM\ENQ\DC2\EOT\145\SOH\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\EM\SOH\DC2\EOT\145\SOH\ETB+\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\EM\ETX\DC2\EOT\145\SOH.0\n\
    \\f\n\
    \\EOT\EOT\ACK\STX\SUB\DC2\EOT\146\SOH\b%\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\SUB\EOT\DC2\EOT\146\SOH\b\DLE\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\SUB\ENQ\DC2\EOT\146\SOH\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\SUB\SOH\DC2\EOT\146\SOH\ETB\US\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\SUB\ETX\DC2\EOT\146\SOH\"$\n\
    \<\n\
    \\EOT\EOT\ACK\STX\ESC\DC2\EOT\149\SOH\EOT<\SUB. Indicate if the message partition key is set\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\ESC\EOT\DC2\EOT\149\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\ESC\ENQ\DC2\EOT\149\SOH\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\ESC\SOH\DC2\EOT\149\SOH\DC2$\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\ESC\ETX\DC2\EOT\149\SOH')\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\ESC\b\DC2\EOT\149\SOH*;\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\ESC\a\DC2\EOT\149\SOH5:\n\
    \\f\n\
    \\STX\EOT\a\DC2\ACK\152\SOH\NUL\170\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\a\SOH\DC2\EOT\152\SOH\b\GS\n\
    \\f\n\
    \\EOT\EOT\a\STX\NUL\DC2\EOT\153\SOH\EOT(\n\
    \\r\n\
    \\ENQ\EOT\a\STX\NUL\EOT\DC2\EOT\153\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\a\STX\NUL\ACK\DC2\EOT\153\SOH\r\NAK\n\
    \\r\n\
    \\ENQ\EOT\a\STX\NUL\SOH\DC2\EOT\153\SOH\SYN \n\
    \\r\n\
    \\ENQ\EOT\a\STX\NUL\ETX\DC2\EOT\153\SOH&'\n\
    \\f\n\
    \\EOT\EOT\a\STX\SOH\DC2\EOT\154\SOH\EOT(\n\
    \\r\n\
    \\ENQ\EOT\a\STX\SOH\EOT\DC2\EOT\154\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\a\STX\SOH\ENQ\DC2\EOT\154\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\a\STX\SOH\SOH\DC2\EOT\154\SOH\DC4!\n\
    \\r\n\
    \\ENQ\EOT\a\STX\SOH\ETX\DC2\EOT\154\SOH&'\n\
    \\f\n\
    \\EOT\EOT\a\STX\STX\DC2\EOT\155\SOH\EOT'\n\
    \\r\n\
    \\ENQ\EOT\a\STX\STX\EOT\DC2\EOT\155\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\a\STX\STX\ENQ\DC2\EOT\155\SOH\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\a\STX\STX\SOH\DC2\EOT\155\SOH\DC3\US\n\
    \\r\n\
    \\ENQ\EOT\a\STX\STX\ETX\DC2\EOT\155\SOH%&\n\
    \\f\n\
    \\EOT\EOT\a\STX\ETX\DC2\EOT\156\SOH\EOT:\n\
    \\r\n\
    \\ENQ\EOT\a\STX\ETX\EOT\DC2\EOT\156\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\a\STX\ETX\ENQ\DC2\EOT\156\SOH\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\a\STX\ETX\SOH\DC2\EOT\156\SOH\DC2\US\n\
    \\r\n\
    \\ENQ\EOT\a\STX\ETX\ETX\DC2\EOT\156\SOH&'\n\
    \\r\n\
    \\ENQ\EOT\a\STX\ETX\b\DC2\EOT\156\SOH(9\n\
    \\r\n\
    \\ENQ\EOT\a\STX\ETX\a\DC2\EOT\156\SOH38\n\
    \\178\SOH\n\
    \\EOT\EOT\a\STX\EOT\DC2\EOT\160\SOH\EOT1\SUB\163\SOH the timestamp that this event occurs. it is typically set by applications.\n\
    \ if this field is omitted, `publish_time` can be used for the purpose of `event_time`.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\a\STX\EOT\EOT\DC2\EOT\160\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\a\STX\EOT\ENQ\DC2\EOT\160\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\a\STX\EOT\SOH\DC2\EOT\160\SOH\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT\a\STX\EOT\ETX\DC2\EOT\160\SOH!\"\n\
    \\r\n\
    \\ENQ\EOT\a\STX\EOT\b\DC2\EOT\160\SOH#0\n\
    \\r\n\
    \\ENQ\EOT\a\STX\EOT\a\DC2\EOT\160\SOH./\n\
    \\f\n\
    \\EOT\EOT\a\STX\ENQ\DC2\EOT\161\SOH\EOTD\n\
    \\r\n\
    \\ENQ\EOT\a\STX\ENQ\EOT\DC2\EOT\161\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\a\STX\ENQ\ENQ\DC2\EOT\161\SOH\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\a\STX\ENQ\SOH\DC2\EOT\161\SOH\DC2+\n\
    \\r\n\
    \\ENQ\EOT\a\STX\ENQ\ETX\DC2\EOT\161\SOH./\n\
    \\r\n\
    \\ENQ\EOT\a\STX\ENQ\b\DC2\EOT\161\SOH0C\n\
    \\r\n\
    \\ENQ\EOT\a\STX\ENQ\a\DC2\EOT\161\SOH<A\n\
    \p\n\
    \\EOT\EOT\a\STX\ACK\DC2\EOT\163\SOH\EOT$\SUBb Specific a key to overwrite the message key which used for ordering dispatch in Key_Shared mode.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\a\STX\ACK\EOT\DC2\EOT\163\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\a\STX\ACK\ENQ\DC2\EOT\163\SOH\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\a\STX\ACK\SOH\DC2\EOT\163\SOH\DC3\US\n\
    \\r\n\
    \\ENQ\EOT\a\STX\ACK\ETX\DC2\EOT\163\SOH\"#\n\
    \O\n\
    \\EOT\EOT\a\STX\a\DC2\EOT\165\SOH\EOT$\SUBA Allows consumer retrieve the sequence id that the producer set.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\a\STX\a\EOT\DC2\EOT\165\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\a\STX\a\ENQ\DC2\EOT\165\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\a\STX\a\SOH\DC2\EOT\165\SOH\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\a\STX\a\ETX\DC2\EOT\165\SOH\"#\n\
    \<\n\
    \\EOT\EOT\a\STX\b\DC2\EOT\167\SOH\EOT5\SUB. Indicate if the message payload value is set\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\a\STX\b\EOT\DC2\EOT\167\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\a\STX\b\ENQ\DC2\EOT\167\SOH\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\a\STX\b\SOH\DC2\EOT\167\SOH\DC2\FS\n\
    \\r\n\
    \\ENQ\EOT\a\STX\b\ETX\DC2\EOT\167\SOH\US \n\
    \\r\n\
    \\ENQ\EOT\a\STX\b\b\DC2\EOT\167\SOH!4\n\
    \\r\n\
    \\ENQ\EOT\a\STX\b\a\DC2\EOT\167\SOH-2\n\
    \<\n\
    \\EOT\EOT\a\STX\t\DC2\EOT\169\SOH\EOT=\SUB. Indicate if the message partition key is set\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\a\STX\t\EOT\DC2\EOT\169\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\a\STX\t\ENQ\DC2\EOT\169\SOH\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\a\STX\t\SOH\DC2\EOT\169\SOH\DC2$\n\
    \\r\n\
    \\ENQ\EOT\a\STX\t\ETX\DC2\EOT\169\SOH')\n\
    \\r\n\
    \\ENQ\EOT\a\STX\t\b\DC2\EOT\169\SOH*<\n\
    \\r\n\
    \\ENQ\EOT\a\STX\t\a\DC2\EOT\169\SOH6;\n\
    \\f\n\
    \\STX\ENQ\SOH\DC2\ACK\172\SOH\NUL\201\SOH\SOH\n\
    \\v\n\
    \\ETX\ENQ\SOH\SOH\DC2\EOT\172\SOH\ENQ\DLE\n\
    \\f\n\
    \\EOT\ENQ\SOH\STX\NUL\DC2\EOT\173\SOH\EOT\FS\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\NUL\SOH\DC2\EOT\173\SOH\EOT\DLE\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\NUL\STX\DC2\EOT\173\SOH\SUB\ESC\n\
    \&\n\
    \\EOT\ENQ\SOH\STX\SOH\DC2\EOT\174\SOH\EOT\FS\"\CAN Error with ZK/metadata\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\SOH\SOH\DC2\EOT\174\SOH\EOT\DC1\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\SOH\STX\DC2\EOT\174\SOH\SUB\ESC\n\
    \-\n\
    \\EOT\ENQ\SOH\STX\STX\DC2\EOT\175\SOH\EOT\FS\"\US Error writing reading from BK\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\STX\SOH\DC2\EOT\175\SOH\EOT\DC4\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\STX\STX\DC2\EOT\175\SOH\SUB\ESC\n\
    \(\n\
    \\EOT\ENQ\SOH\STX\ETX\DC2\EOT\176\SOH\EOT\FS\"\SUB Non valid authentication\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\ETX\SOH\DC2\EOT\176\SOH\EOT\ETB\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\ETX\STX\DC2\EOT\176\SOH\SUB\ESC\n\
    \.\n\
    \\EOT\ENQ\SOH\STX\EOT\DC2\EOT\177\SOH\EOT\FS\"  Not authorized to use resource\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\EOT\SOH\DC2\EOT\177\SOH\EOT\SYN\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\EOT\STX\DC2\EOT\177\SOH\SUB\ESC\n\
    \7\n\
    \\EOT\ENQ\SOH\STX\ENQ\DC2\EOT\179\SOH\EOT\FS\") Unable to subscribe/unsubscribe because\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\ENQ\SOH\DC2\EOT\179\SOH\EOT\DLE\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\ENQ\STX\DC2\EOT\179\SOH\SUB\ESC\n\
    \s\n\
    \\EOT\ENQ\SOH\STX\ACK\DC2\EOT\181\SOH\EOT\FS\SUB\US other consumers are connected\n\
    \\"D Any error that requires client retry operation with a fresh lookup\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\ACK\SOH\DC2\EOT\181\SOH\EOT\DC3\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\ACK\STX\DC2\EOT\181\SOH\SUB\ESC\n\
    \H\n\
    \\EOT\ENQ\SOH\STX\a\DC2\EOT\182\SOH\EOT*\": Unable to create producer because backlog quota exceeded\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\a\SOH\DC2\EOT\182\SOH\EOT%\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\a\STX\DC2\EOT\182\SOH()\n\
    \H\n\
    \\EOT\ENQ\SOH\STX\b\DC2\EOT\183\SOH\EOT.\": Exception while creating producer because quota exceeded\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\b\SOH\DC2\EOT\183\SOH\EOT)\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\b\STX\DC2\EOT\183\SOH,-\n\
    \6\n\
    \\EOT\ENQ\SOH\STX\t\DC2\EOT\184\SOH\EOT\SYN\"( Error while verifying message checksum\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\t\SOH\DC2\EOT\184\SOH\EOT\DC1\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\t\STX\DC2\EOT\184\SOH\DC4\NAK\n\
    \U\n\
    \\EOT\ENQ\SOH\STX\n\
    \\DC2\EOT\185\SOH\EOT!\"G Error when an older client/version doesn't support a required feature\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\n\
    \\SOH\DC2\EOT\185\SOH\EOT\ESC\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\n\
    \\STX\DC2\EOT\185\SOH\RS \n\
    \\US\n\
    \\EOT\ENQ\SOH\STX\v\DC2\EOT\186\SOH\EOT\ETB\"\DC1 Topic not found\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\v\SOH\DC2\EOT\186\SOH\EOT\DC1\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\v\STX\DC2\EOT\186\SOH\DC4\SYN\n\
    \&\n\
    \\EOT\ENQ\SOH\STX\f\DC2\EOT\187\SOH\EOT\RS\"\CAN Subscription not found\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\f\SOH\DC2\EOT\187\SOH\EOT\CAN\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\f\STX\DC2\EOT\187\SOH\ESC\GS\n\
    \\"\n\
    \\EOT\ENQ\SOH\STX\r\DC2\EOT\188\SOH\EOT\SUB\"\DC4 Consumer not found\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\r\SOH\DC2\EOT\188\SOH\EOT\DC4\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\r\STX\DC2\EOT\188\SOH\ETB\EM\n\
    \:\n\
    \\EOT\ENQ\SOH\STX\SO\DC2\EOT\189\SOH\EOT\EM\", Error with too many simultaneously request\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\SO\SOH\DC2\EOT\189\SOH\EOT\DC3\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\SO\STX\DC2\EOT\189\SOH\SYN\CAN\n\
    \-\n\
    \\EOT\ENQ\SOH\STX\SI\DC2\EOT\190\SOH\EOT\RS\"\US The topic has been terminated\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\SI\SOH\DC2\EOT\190\SOH\EOT\CAN\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\SI\STX\DC2\EOT\190\SOH\ESC\GS\n\
    \<\n\
    \\EOT\ENQ\SOH\STX\DLE\DC2\EOT\192\SOH\EOT\RS\". Producer with same name is already connected\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\DLE\SOH\DC2\EOT\192\SOH\EOT\DLE\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\DLE\STX\DC2\EOT\192\SOH\ESC\GS\n\
    \+\n\
    \\EOT\ENQ\SOH\STX\DC1\DC2\EOT\193\SOH\EOT\SUB\"\GS The topic name is not valid\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\DC1\SOH\DC2\EOT\193\SOH\EOT\DC4\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\DC1\STX\DC2\EOT\193\SOH\ETB\EM\n\
    \C\n\
    \\EOT\ENQ\SOH\STX\DC2\DC2\EOT\195\SOH\EOT\FS\"5 Specified schema was incompatible with topic schema\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\DC2\SOH\DC2\EOT\195\SOH\EOT\SYN\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\DC2\STX\DC2\EOT\195\SOH\EM\ESC\n\
    \0\n\
    \\EOT\ENQ\SOH\STX\DC3\DC2\EOT\196\SOH\EOT\GS\"\" Dispatcher assign consumer error\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\DC3\SOH\DC2\EOT\196\SOH\EOT\ETB\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\DC3\STX\DC2\EOT\196\SOH\SUB\FS\n\
    \7\n\
    \\EOT\ENQ\SOH\STX\DC4\DC2\EOT\198\SOH\EOT(\") Transaction coordinator not found error\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\DC4\SOH\DC2\EOT\198\SOH\EOT\"\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\DC4\STX\DC2\EOT\198\SOH%'\n\
    \(\n\
    \\EOT\ENQ\SOH\STX\NAK\DC2\EOT\199\SOH\EOT\SUB\"\SUB Invalid txn status error\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\NAK\SOH\DC2\EOT\199\SOH\EOT\DC4\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\NAK\STX\DC2\EOT\199\SOH\ETB\EM\n\
    \!\n\
    \\EOT\ENQ\SOH\STX\SYN\DC2\EOT\200\SOH\EOT\EM\"\DC3 Not allowed error\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\SYN\SOH\DC2\EOT\200\SOH\EOT\DC3\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\SYN\STX\DC2\EOT\200\SOH\SYN\CAN\n\
    \\f\n\
    \\STX\ENQ\STX\DC2\ACK\203\SOH\NUL\207\SOH\SOH\n\
    \\v\n\
    \\ETX\ENQ\STX\SOH\DC2\EOT\203\SOH\ENQ\SI\n\
    \\f\n\
    \\EOT\ENQ\STX\STX\NUL\DC2\EOT\204\SOH\EOT\EM\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\NUL\SOH\DC2\EOT\204\SOH\EOT\DC2\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\NUL\STX\DC2\EOT\204\SOH\ETB\CAN\n\
    \\f\n\
    \\EOT\ENQ\STX\STX\SOH\DC2\EOT\205\SOH\EOT\EM\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\SOH\SOH\DC2\EOT\205\SOH\EOT\DC3\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\SOH\STX\DC2\EOT\205\SOH\ETB\CAN\n\
    \\f\n\
    \\EOT\ENQ\STX\STX\STX\DC2\EOT\206\SOH\EOT\EM\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\STX\SOH\DC2\EOT\206\SOH\EOT\DC4\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\STX\STX\DC2\EOT\206\SOH\ETB\CAN\n\
    \i\n\
    \\STX\ENQ\ETX\DC2\ACK\211\SOH\NUL\231\SOH\SOH\SUB[ Each protocol version identify new features that are\n\
    \ incrementally added to the protocol\n\
    \\n\
    \\v\n\
    \\ETX\ENQ\ETX\SOH\DC2\EOT\211\SOH\ENQ\DC4\n\
    \\"\n\
    \\EOT\ENQ\ETX\STX\NUL\DC2\EOT\212\SOH\EOT\v\"\DC4 Initial versioning\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\NUL\SOH\DC2\EOT\212\SOH\EOT\ACK\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\NUL\STX\DC2\EOT\212\SOH\t\n\
    \\n\
    \,\n\
    \\EOT\ENQ\ETX\STX\SOH\DC2\EOT\213\SOH\EOT\v\"\RS Added application keep-alive\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\SOH\SOH\DC2\EOT\213\SOH\EOT\ACK\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\SOH\STX\DC2\EOT\213\SOH\t\n\
    \\n\
    \=\n\
    \\EOT\ENQ\ETX\STX\STX\DC2\EOT\214\SOH\EOT\v\"/ Added RedeliverUnacknowledgedMessages Command\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\STX\SOH\DC2\EOT\214\SOH\EOT\ACK\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\STX\STX\DC2\EOT\214\SOH\t\n\
    \\n\
    \3\n\
    \\EOT\ENQ\ETX\STX\ETX\DC2\EOT\215\SOH\EOT\v\"% Added compression with LZ4 and ZLib\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\ETX\SOH\DC2\EOT\215\SOH\EOT\ACK\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\ETX\STX\DC2\EOT\215\SOH\t\n\
    \\n\
    \+\n\
    \\EOT\ENQ\ETX\STX\EOT\DC2\EOT\216\SOH\EOT\v\"\GS Added batch message support\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\EOT\SOH\DC2\EOT\216\SOH\EOT\ACK\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\EOT\STX\DC2\EOT\216\SOH\t\n\
    \\n\
    \>\n\
    \\EOT\ENQ\ETX\STX\ENQ\DC2\EOT\217\SOH\EOT\v\"0 Added disconnect client w/o closing connection\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\ENQ\SOH\DC2\EOT\217\SOH\EOT\ACK\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\ENQ\STX\DC2\EOT\217\SOH\t\n\
    \\n\
    \A\n\
    \\EOT\ENQ\ETX\STX\ACK\DC2\EOT\218\SOH\EOT\v\"3 Added checksum computation for metadata + payload\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\ACK\SOH\DC2\EOT\218\SOH\EOT\ACK\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\ACK\STX\DC2\EOT\218\SOH\t\n\
    \\n\
    \8\n\
    \\EOT\ENQ\ETX\STX\a\DC2\EOT\219\SOH\EOT\v\"* Added CommandLookupTopic - Binary Lookup\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\a\SOH\DC2\EOT\219\SOH\EOT\ACK\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\a\STX\DC2\EOT\219\SOH\t\n\
    \\n\
    \V\n\
    \\EOT\ENQ\ETX\STX\b\DC2\EOT\220\SOH\EOT\v\"H Added CommandConsumerStats - Client fetches broker side consumer stats\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\b\SOH\DC2\EOT\220\SOH\EOT\ACK\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\b\STX\DC2\EOT\220\SOH\t\n\
    \\n\
    \/\n\
    \\EOT\ENQ\ETX\STX\t\DC2\EOT\221\SOH\EOT\v\"! Added end of topic notification\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\t\SOH\DC2\EOT\221\SOH\EOT\ACK\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\t\STX\DC2\EOT\221\SOH\t\n\
    \\n\
    \%\n\
    \\EOT\ENQ\ETX\STX\n\
    \\DC2\EOT\222\SOH\EOT\r\"\ETB Added proxy to broker\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\n\
    \\SOH\DC2\EOT\222\SOH\EOT\a\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\n\
    \\STX\DC2\EOT\222\SOH\n\
    \\f\n\
    \_\n\
    \\EOT\ENQ\ETX\STX\v\DC2\EOT\223\SOH\EOT\r\"Q C++ consumers before this version are not correctly handling the checksum field\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\v\SOH\DC2\EOT\223\SOH\EOT\a\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\v\STX\DC2\EOT\223\SOH\n\
    \\f\n\
    \<\n\
    \\EOT\ENQ\ETX\STX\f\DC2\EOT\224\SOH\EOT\r\". Added get topic's last messageId from broker\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\f\SOH\DC2\EOT\224\SOH\EOT\a\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\f\STX\DC2\EOT\224\SOH\n\
    \\f\n\
    \\139\SOH\n\
    \\EOT\ENQ\ETX\STX\r\DC2\EOT\227\SOH\EOT\r\SUBF Added CommandActiveConsumerChange\n\
    \ Added CommandGetTopicsOfNamespace\n\
    \\"5 Schema-registry : added avro schema format for json\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\r\SOH\DC2\EOT\227\SOH\EOT\a\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\r\STX\DC2\EOT\227\SOH\n\
    \\f\n\
    \P\n\
    \\EOT\ENQ\ETX\STX\SO\DC2\EOT\228\SOH\EOT\r\"B Add CommandAuthChallenge and CommandAuthResponse for mutual auth\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\SO\SOH\DC2\EOT\228\SOH\EOT\a\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\SO\STX\DC2\EOT\228\SOH\n\
    \\f\n\
    \r\n\
    \\EOT\ENQ\ETX\STX\SI\DC2\EOT\230\SOH\EOT\r\SUB\US Added Key_Shared subscription\n\
    \\"C Add CommandGetOrCreateSchema and CommandGetOrCreateSchemaResponse\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\SI\SOH\DC2\EOT\230\SOH\EOT\a\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\SI\STX\DC2\EOT\230\SOH\n\
    \\f\n\
    \\f\n\
    \\STX\EOT\b\DC2\ACK\233\SOH\NUL\129\STX\SOH\n\
    \\v\n\
    \\ETX\EOT\b\SOH\DC2\EOT\233\SOH\b\SYN\n\
    \\f\n\
    \\EOT\EOT\b\STX\NUL\DC2\EOT\234\SOH\EOT'\n\
    \\r\n\
    \\ENQ\EOT\b\STX\NUL\EOT\DC2\EOT\234\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\b\STX\NUL\ENQ\DC2\EOT\234\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\b\STX\NUL\SOH\DC2\EOT\234\SOH\DC4\"\n\
    \\r\n\
    \\ENQ\EOT\b\STX\NUL\ETX\DC2\EOT\234\SOH%&\n\
    \;\n\
    \\EOT\EOT\b\STX\SOH\DC2\EOT\235\SOH\EOT(\"- Deprecated. Use \"auth_method_name\" instead.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\b\STX\SOH\EOT\DC2\EOT\235\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\b\STX\SOH\ACK\DC2\EOT\235\SOH\r\ETB\n\
    \\r\n\
    \\ENQ\EOT\b\STX\SOH\SOH\DC2\EOT\235\SOH\CAN#\n\
    \\r\n\
    \\ENQ\EOT\b\STX\SOH\ETX\DC2\EOT\235\SOH&'\n\
    \\f\n\
    \\EOT\EOT\b\STX\STX\DC2\EOT\236\SOH\EOT)\n\
    \\r\n\
    \\ENQ\EOT\b\STX\STX\EOT\DC2\EOT\236\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\b\STX\STX\ENQ\DC2\EOT\236\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\b\STX\STX\SOH\DC2\EOT\236\SOH\DC4$\n\
    \\r\n\
    \\ENQ\EOT\b\STX\STX\ETX\DC2\EOT\236\SOH'(\n\
    \\f\n\
    \\EOT\EOT\b\STX\ETX\DC2\EOT\237\SOH\EOT!\n\
    \\r\n\
    \\ENQ\EOT\b\STX\ETX\EOT\DC2\EOT\237\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\b\STX\ETX\ENQ\DC2\EOT\237\SOH\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\b\STX\ETX\SOH\DC2\EOT\237\SOH\DC3\FS\n\
    \\r\n\
    \\ENQ\EOT\b\STX\ETX\ETX\DC2\EOT\237\SOH\US \n\
    \\f\n\
    \\EOT\EOT\b\STX\EOT\DC2\EOT\238\SOH\EOT6\n\
    \\r\n\
    \\ENQ\EOT\b\STX\EOT\EOT\DC2\EOT\238\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\b\STX\EOT\ENQ\DC2\EOT\238\SOH\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\b\STX\EOT\SOH\DC2\EOT\238\SOH\DC3#\n\
    \\r\n\
    \\ENQ\EOT\b\STX\EOT\ETX\DC2\EOT\238\SOH&'\n\
    \\r\n\
    \\ENQ\EOT\b\STX\EOT\b\DC2\EOT\238\SOH(5\n\
    \\r\n\
    \\ENQ\EOT\b\STX\EOT\a\DC2\EOT\238\SOH34\n\
    \j\n\
    \\EOT\EOT\b\STX\ENQ\DC2\EOT\242\SOH\EOT,\SUB\\ Client can ask to be proxyied to a specific broker\n\
    \ This is only honored by a Pulsar proxy\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\b\STX\ENQ\EOT\DC2\EOT\242\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\b\STX\ENQ\ENQ\DC2\EOT\242\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\b\STX\ENQ\SOH\DC2\EOT\242\SOH\DC4'\n\
    \\r\n\
    \\ENQ\EOT\b\STX\ENQ\ETX\DC2\EOT\242\SOH*+\n\
    \\144\SOH\n\
    \\EOT\EOT\b\STX\ACK\DC2\EOT\247\SOH\EOT+\SUB\129\SOH Original principal that was verified by\n\
    \ a Pulsar proxy. In this case the auth info above\n\
    \ will be the auth of the proxy itself\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\b\STX\ACK\EOT\DC2\EOT\247\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\b\STX\ACK\ENQ\DC2\EOT\247\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\b\STX\ACK\SOH\DC2\EOT\247\SOH\DC4&\n\
    \\r\n\
    \\ENQ\EOT\b\STX\ACK\ETX\DC2\EOT\247\SOH)*\n\
    \\153\SOH\n\
    \\EOT\EOT\b\STX\a\DC2\EOT\252\SOH\EOT+\SUB\138\SOH Original auth role and auth Method that was passed\n\
    \ to the proxy. In this case the auth info above\n\
    \ will be the auth of the proxy itself\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\b\STX\a\EOT\DC2\EOT\252\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\b\STX\a\ENQ\DC2\EOT\252\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\b\STX\a\SOH\DC2\EOT\252\SOH\DC4&\n\
    \\r\n\
    \\ENQ\EOT\b\STX\a\ETX\DC2\EOT\252\SOH)*\n\
    \\f\n\
    \\EOT\EOT\b\STX\b\DC2\EOT\253\SOH\EOT-\n\
    \\r\n\
    \\ENQ\EOT\b\STX\b\EOT\DC2\EOT\253\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\b\STX\b\ENQ\DC2\EOT\253\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\b\STX\b\SOH\DC2\EOT\253\SOH\DC4(\n\
    \\r\n\
    \\ENQ\EOT\b\STX\b\ETX\DC2\EOT\253\SOH+,\n\
    \\GS\n\
    \\EOT\EOT\b\STX\t\DC2\EOT\128\STX\EOT-\SUB\SI Feature flags\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\b\STX\t\EOT\DC2\EOT\128\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\b\STX\t\ACK\DC2\EOT\128\STX\r\EM\n\
    \\r\n\
    \\ENQ\EOT\b\STX\t\SOH\DC2\EOT\128\STX\SUB'\n\
    \\r\n\
    \\ENQ\EOT\b\STX\t\ETX\DC2\EOT\128\STX*,\n\
    \\f\n\
    \\STX\EOT\t\DC2\ACK\131\STX\NUL\133\STX\SOH\n\
    \\v\n\
    \\ETX\EOT\t\SOH\DC2\EOT\131\STX\b\DC4\n\
    \\f\n\
    \\EOT\EOT\t\STX\NUL\DC2\EOT\132\STX\STX<\n\
    \\r\n\
    \\ENQ\EOT\t\STX\NUL\EOT\DC2\EOT\132\STX\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\t\STX\NUL\ENQ\DC2\EOT\132\STX\v\SI\n\
    \\r\n\
    \\ENQ\EOT\t\STX\NUL\SOH\DC2\EOT\132\STX\DLE%\n\
    \\r\n\
    \\ENQ\EOT\t\STX\NUL\ETX\DC2\EOT\132\STX()\n\
    \\r\n\
    \\ENQ\EOT\t\STX\NUL\b\DC2\EOT\132\STX*;\n\
    \\r\n\
    \\ENQ\EOT\t\STX\NUL\a\DC2\EOT\132\STX5:\n\
    \\f\n\
    \\STX\EOT\n\
    \\DC2\ACK\135\STX\NUL\139\STX\SOH\n\
    \\v\n\
    \\ETX\EOT\n\
    \\SOH\DC2\EOT\135\STX\b\CAN\n\
    \\f\n\
    \\EOT\EOT\n\
    \\STX\NUL\DC2\EOT\136\STX\EOT'\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\NUL\EOT\DC2\EOT\136\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\NUL\ENQ\DC2\EOT\136\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\NUL\SOH\DC2\EOT\136\STX\DC4\"\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\NUL\ETX\DC2\EOT\136\STX%&\n\
    \\f\n\
    \\EOT\EOT\n\
    \\STX\SOH\DC2\EOT\137\STX\EOT6\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\SOH\EOT\DC2\EOT\137\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\SOH\ENQ\DC2\EOT\137\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\SOH\SOH\DC2\EOT\137\STX\DC3#\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\SOH\ETX\DC2\EOT\137\STX&'\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\SOH\b\DC2\EOT\137\STX(5\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\SOH\a\DC2\EOT\137\STX34\n\
    \\f\n\
    \\EOT\EOT\n\
    \\STX\STX\DC2\EOT\138\STX\EOT(\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\STX\EOT\DC2\EOT\138\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\STX\ENQ\DC2\EOT\138\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\STX\SOH\DC2\EOT\138\STX\DC3#\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\STX\ETX\DC2\EOT\138\STX&'\n\
    \\f\n\
    \\STX\EOT\v\DC2\ACK\141\STX\NUL\145\STX\SOH\n\
    \\v\n\
    \\ETX\EOT\v\SOH\DC2\EOT\141\STX\b\ESC\n\
    \\f\n\
    \\EOT\EOT\v\STX\NUL\DC2\EOT\142\STX\EOT'\n\
    \\r\n\
    \\ENQ\EOT\v\STX\NUL\EOT\DC2\EOT\142\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\NUL\ENQ\DC2\EOT\142\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\v\STX\NUL\SOH\DC2\EOT\142\STX\DC4\"\n\
    \\r\n\
    \\ENQ\EOT\v\STX\NUL\ETX\DC2\EOT\142\STX%&\n\
    \\f\n\
    \\EOT\EOT\v\STX\SOH\DC2\EOT\143\STX\EOT#\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SOH\EOT\DC2\EOT\143\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SOH\ACK\DC2\EOT\143\STX\r\NAK\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SOH\SOH\DC2\EOT\143\STX\SYN\RS\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SOH\ETX\DC2\EOT\143\STX!\"\n\
    \\f\n\
    \\EOT\EOT\v\STX\STX\DC2\EOT\144\STX\EOT6\n\
    \\r\n\
    \\ENQ\EOT\v\STX\STX\EOT\DC2\EOT\144\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\STX\ENQ\DC2\EOT\144\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\v\STX\STX\SOH\DC2\EOT\144\STX\DC3#\n\
    \\r\n\
    \\ENQ\EOT\v\STX\STX\ETX\DC2\EOT\144\STX&'\n\
    \\r\n\
    \\ENQ\EOT\v\STX\STX\b\DC2\EOT\144\STX(5\n\
    \\r\n\
    \\ENQ\EOT\v\STX\STX\a\DC2\EOT\144\STX34\n\
    \\f\n\
    \\STX\EOT\f\DC2\ACK\147\STX\NUL\151\STX\SOH\n\
    \\v\n\
    \\ETX\EOT\f\SOH\DC2\EOT\147\STX\b\FS\n\
    \\f\n\
    \\EOT\EOT\f\STX\NUL\DC2\EOT\148\STX\EOT'\n\
    \\r\n\
    \\ENQ\EOT\f\STX\NUL\EOT\DC2\EOT\148\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\f\STX\NUL\ENQ\DC2\EOT\148\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\f\STX\NUL\SOH\DC2\EOT\148\STX\DC4\"\n\
    \\r\n\
    \\ENQ\EOT\f\STX\NUL\ETX\DC2\EOT\148\STX%&\n\
    \\f\n\
    \\EOT\EOT\f\STX\SOH\DC2\EOT\149\STX\EOT$\n\
    \\r\n\
    \\ENQ\EOT\f\STX\SOH\EOT\DC2\EOT\149\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\f\STX\SOH\ACK\DC2\EOT\149\STX\r\NAK\n\
    \\r\n\
    \\ENQ\EOT\f\STX\SOH\SOH\DC2\EOT\149\STX\SYN\US\n\
    \\r\n\
    \\ENQ\EOT\f\STX\SOH\ETX\DC2\EOT\149\STX\"#\n\
    \\f\n\
    \\EOT\EOT\f\STX\STX\DC2\EOT\150\STX\EOT6\n\
    \\r\n\
    \\ENQ\EOT\f\STX\STX\EOT\DC2\EOT\150\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\f\STX\STX\ENQ\DC2\EOT\150\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\f\STX\STX\SOH\DC2\EOT\150\STX\DC3#\n\
    \\r\n\
    \\ENQ\EOT\f\STX\STX\ETX\DC2\EOT\150\STX&'\n\
    \\r\n\
    \\ENQ\EOT\f\STX\STX\b\DC2\EOT\150\STX(5\n\
    \\r\n\
    \\ENQ\EOT\f\STX\STX\a\DC2\EOT\150\STX34\n\
    \g\n\
    \\STX\EOT\r\DC2\ACK\154\STX\NUL\157\STX\SOH\SUBY To support mutual authentication type, such as Sasl, reuse this command to mutual auth.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\r\SOH\DC2\EOT\154\STX\b\DLE\n\
    \\f\n\
    \\EOT\EOT\r\STX\NUL\DC2\EOT\155\STX\EOT)\n\
    \\r\n\
    \\ENQ\EOT\r\STX\NUL\EOT\DC2\EOT\155\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\r\STX\NUL\ENQ\DC2\EOT\155\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\r\STX\NUL\SOH\DC2\EOT\155\STX\DC4$\n\
    \\r\n\
    \\ENQ\EOT\r\STX\NUL\ETX\DC2\EOT\155\STX'(\n\
    \\f\n\
    \\EOT\EOT\r\STX\SOH\DC2\EOT\156\STX\EOT!\n\
    \\r\n\
    \\ENQ\EOT\r\STX\SOH\EOT\DC2\EOT\156\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\r\STX\SOH\ENQ\DC2\EOT\156\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\r\STX\SOH\SOH\DC2\EOT\156\STX\DC3\FS\n\
    \\r\n\
    \\ENQ\EOT\r\STX\SOH\ETX\DC2\EOT\156\STX\US \n\
    \\f\n\
    \\STX\ENQ\EOT\DC2\ACK\159\STX\NUL\162\STX\SOH\n\
    \\v\n\
    \\ETX\ENQ\EOT\SOH\DC2\EOT\159\STX\ENQ\DC2\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\NUL\DC2\EOT\160\STX\EOT\DC3\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\NUL\SOH\DC2\EOT\160\STX\EOT\SO\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\NUL\STX\DC2\EOT\160\STX\DC1\DC2\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\SOH\DC2\EOT\161\STX\EOT\SI\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\SOH\SOH\DC2\EOT\161\STX\EOT\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\SOH\STX\DC2\EOT\161\STX\r\SO\n\
    \\f\n\
    \\STX\EOT\SO\DC2\ACK\164\STX\NUL\168\STX\SOH\n\
    \\v\n\
    \\ETX\EOT\SO\SOH\DC2\EOT\164\STX\b\NAK\n\
    \\f\n\
    \\EOT\EOT\SO\STX\NUL\DC2\EOT\165\STX\EOT-\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\NUL\EOT\DC2\EOT\165\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\NUL\ACK\DC2\EOT\165\STX\r\SUB\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\NUL\SOH\DC2\EOT\165\STX\ESC(\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\NUL\ETX\DC2\EOT\165\STX+,\n\
    \\f\n\
    \\EOT\EOT\SO\STX\SOH\DC2\EOT\166\STX\EOT%\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\SOH\EOT\DC2\EOT\166\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\SOH\ACK\DC2\EOT\166\STX\r\NAK\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\SOH\SOH\DC2\EOT\166\STX\SYN \n\
    \\r\n\
    \\ENQ\EOT\SO\STX\SOH\ETX\DC2\EOT\166\STX#$\n\
    \\f\n\
    \\EOT\EOT\SO\STX\STX\DC2\EOT\167\STX\EOT@\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\STX\EOT\DC2\EOT\167\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\STX\ENQ\DC2\EOT\167\STX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\STX\SOH\DC2\EOT\167\STX\DC2)\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\STX\ETX\DC2\EOT\167\STX,-\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\STX\b\DC2\EOT\167\STX.?\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\STX\a\DC2\EOT\167\STX9>\n\
    \\f\n\
    \\STX\EOT\SI\DC2\ACK\170\STX\NUL\226\STX\SOH\n\
    \\v\n\
    \\ETX\EOT\SI\SOH\DC2\EOT\170\STX\b\CAN\n\
    \\SO\n\
    \\EOT\EOT\SI\EOT\NUL\DC2\ACK\171\STX\EOT\176\STX\ENQ\n\
    \\r\n\
    \\ENQ\EOT\SI\EOT\NUL\SOH\DC2\EOT\171\STX\t\DLE\n\
    \\SO\n\
    \\ACK\EOT\SI\EOT\NUL\STX\NUL\DC2\EOT\172\STX\b\SYN\n\
    \\SI\n\
    \\a\EOT\SI\EOT\NUL\STX\NUL\SOH\DC2\EOT\172\STX\b\DC1\n\
    \\SI\n\
    \\a\EOT\SI\EOT\NUL\STX\NUL\STX\DC2\EOT\172\STX\DC4\NAK\n\
    \\SO\n\
    \\ACK\EOT\SI\EOT\NUL\STX\SOH\DC2\EOT\173\STX\b\SYN\n\
    \\SI\n\
    \\a\EOT\SI\EOT\NUL\STX\SOH\SOH\DC2\EOT\173\STX\b\SO\n\
    \\SI\n\
    \\a\EOT\SI\EOT\NUL\STX\SOH\STX\DC2\EOT\173\STX\DC4\NAK\n\
    \\SO\n\
    \\ACK\EOT\SI\EOT\NUL\STX\STX\DC2\EOT\174\STX\b\SYN\n\
    \\SI\n\
    \\a\EOT\SI\EOT\NUL\STX\STX\SOH\DC2\EOT\174\STX\b\DLE\n\
    \\SI\n\
    \\a\EOT\SI\EOT\NUL\STX\STX\STX\DC2\EOT\174\STX\DC4\NAK\n\
    \\SO\n\
    \\ACK\EOT\SI\EOT\NUL\STX\ETX\DC2\EOT\175\STX\b\ETB\n\
    \\SI\n\
    \\a\EOT\SI\EOT\NUL\STX\ETX\SOH\DC2\EOT\175\STX\b\DC2\n\
    \\SI\n\
    \\a\EOT\SI\EOT\NUL\STX\ETX\STX\DC2\EOT\175\STX\NAK\SYN\n\
    \\f\n\
    \\EOT\EOT\SI\STX\NUL\DC2\EOT\177\STX\EOT%\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\NUL\EOT\DC2\EOT\177\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\NUL\ENQ\DC2\EOT\177\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\NUL\SOH\DC2\EOT\177\STX\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\NUL\ETX\DC2\EOT\177\STX#$\n\
    \\f\n\
    \\EOT\EOT\SI\STX\SOH\DC2\EOT\178\STX\EOT%\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SOH\EOT\DC2\EOT\178\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SOH\ENQ\DC2\EOT\178\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SOH\SOH\DC2\EOT\178\STX\DC4 \n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SOH\ETX\DC2\EOT\178\STX#$\n\
    \\f\n\
    \\EOT\EOT\SI\STX\STX\DC2\EOT\179\STX\EOT%\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\STX\EOT\DC2\EOT\179\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\STX\ACK\DC2\EOT\179\STX\r\DC4\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\STX\SOH\DC2\EOT\179\STX\NAK\FS\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\STX\ETX\DC2\EOT\179\STX#$\n\
    \\f\n\
    \\EOT\EOT\SI\STX\ETX\DC2\EOT\181\STX\EOT%\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ETX\EOT\DC2\EOT\181\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ETX\ENQ\DC2\EOT\181\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ETX\SOH\DC2\EOT\181\STX\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ETX\ETX\DC2\EOT\181\STX#$\n\
    \\f\n\
    \\EOT\EOT\SI\STX\EOT\DC2\EOT\182\STX\EOT%\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\EOT\EOT\DC2\EOT\182\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\EOT\ENQ\DC2\EOT\182\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\EOT\SOH\DC2\EOT\182\STX\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\EOT\ETX\DC2\EOT\182\STX#$\n\
    \\f\n\
    \\EOT\EOT\SI\STX\ENQ\DC2\EOT\183\STX\EOT&\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ENQ\EOT\DC2\EOT\183\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ENQ\ENQ\DC2\EOT\183\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ENQ\SOH\DC2\EOT\183\STX\DC4!\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ENQ\ETX\DC2\EOT\183\STX$%\n\
    \\f\n\
    \\EOT\EOT\SI\STX\ACK\DC2\EOT\184\STX\EOT&\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ACK\EOT\DC2\EOT\184\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ACK\ENQ\DC2\EOT\184\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ACK\SOH\DC2\EOT\184\STX\DC3!\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ACK\ETX\DC2\EOT\184\STX$%\n\
    \[\n\
    \\EOT\EOT\SI\STX\a\DC2\EOT\188\STX\EOT/\SUBM Signal wether the subscription should be backed by a\n\
    \ durable cursor or not\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\a\EOT\DC2\EOT\188\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\a\ENQ\DC2\EOT\188\STX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\a\SOH\DC2\EOT\188\STX\DC2\EM\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\a\ETX\DC2\EOT\188\STX\FS\GS\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\a\b\DC2\EOT\188\STX\RS.\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\a\a\DC2\EOT\188\STX)-\n\
    \\165\SOH\n\
    \\EOT\EOT\SI\STX\b\DC2\EOT\193\STX\EOT0\SUB\150\SOH If specified, the subscription will position the cursor\n\
    \ markd-delete position  on the particular message id and\n\
    \ will send messages from that point\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\b\EOT\DC2\EOT\193\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\b\ACK\DC2\EOT\193\STX\r\SUB\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\b\SOH\DC2\EOT\193\STX\ESC+\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\b\ETX\DC2\EOT\193\STX./\n\
    \A\n\
    \\EOT\EOT\SI\STX\t\DC2\EOT\196\STX\EOT$\SUB3/ Add optional metadata key=value to this consumer\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\t\EOT\DC2\EOT\196\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\t\ACK\DC2\EOT\196\STX\r\NAK\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\t\SOH\DC2\EOT\196\STX\SYN\RS\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\t\ETX\DC2\EOT\196\STX!#\n\
    \\f\n\
    \\EOT\EOT\SI\STX\n\
    \\DC2\EOT\198\STX\EOT&\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\n\
    \\EOT\DC2\EOT\198\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\n\
    \\ENQ\DC2\EOT\198\STX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\n\
    \\SOH\DC2\EOT\198\STX\DC2 \n\
    \\r\n\
    \\ENQ\EOT\SI\STX\n\
    \\ETX\DC2\EOT\198\STX#%\n\
    \\f\n\
    \\EOT\EOT\SI\STX\v\DC2\EOT\200\STX\EOT \n\
    \\r\n\
    \\ENQ\EOT\SI\STX\v\EOT\DC2\EOT\200\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\v\ACK\DC2\EOT\200\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\v\SOH\DC2\EOT\200\STX\DC4\SUB\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\v\ETX\DC2\EOT\200\STX\GS\US\n\
    \\SO\n\
    \\EOT\EOT\SI\EOT\SOH\DC2\ACK\201\STX\EOT\204\STX\ENQ\n\
    \\r\n\
    \\ENQ\EOT\SI\EOT\SOH\SOH\DC2\EOT\201\STX\t\CAN\n\
    \\SO\n\
    \\ACK\EOT\SI\EOT\SOH\STX\NUL\DC2\EOT\202\STX\b\NAK\n\
    \\SI\n\
    \\a\EOT\SI\EOT\SOH\STX\NUL\SOH\DC2\EOT\202\STX\b\SO\n\
    \\SI\n\
    \\a\EOT\SI\EOT\SOH\STX\NUL\STX\DC2\EOT\202\STX\DC3\DC4\n\
    \\SO\n\
    \\ACK\EOT\SI\EOT\SOH\STX\SOH\DC2\EOT\203\STX\b\NAK\n\
    \\SI\n\
    \\a\EOT\SI\EOT\SOH\STX\SOH\SOH\DC2\EOT\203\STX\b\DLE\n\
    \\SI\n\
    \\a\EOT\SI\EOT\SOH\STX\SOH\STX\DC2\EOT\203\STX\DC3\DC4\n\
    \]\n\
    \\EOT\EOT\SI\STX\f\DC2\EOT\207\STX\EOTE\SUBO Signal whether the subscription will initialize on latest\n\
    \ or not -- earliest\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\f\EOT\DC2\EOT\207\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\f\ACK\DC2\EOT\207\STX\r\FS\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\f\SOH\DC2\EOT\207\STX\GS,\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\f\ETX\DC2\EOT\207\STX/1\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\f\b\DC2\EOT\207\STX2D\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\f\a\DC2\EOT\207\STX=C\n\
    \\194\SOH\n\
    \\EOT\EOT\SI\STX\r\DC2\EOT\212\STX\EOT4\SUB\179\SOH Mark the subscription as \"replicated\". Pulsar will make sure\n\
    \ to periodically sync the state of replicated subscriptions\n\
    \ across different clusters (when using geo-replication).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\r\EOT\DC2\EOT\212\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\r\ENQ\DC2\EOT\212\STX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\r\SOH\DC2\EOT\212\STX\DC2.\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\r\ETX\DC2\EOT\212\STX13\n\
    \\238\SOH\n\
    \\EOT\EOT\SI\STX\SO\DC2\EOT\219\STX\EOT=\SUB\223\SOH If true, the subscribe operation will cause a topic to be\n\
    \ created if it does not exist already (and if topic auto-creation\n\
    \ is allowed by broker.\n\
    \ If false, the subscribe operation will fail if the topic\n\
    \ does not exist.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SO\EOT\DC2\EOT\219\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SO\ENQ\DC2\EOT\219\STX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SO\SOH\DC2\EOT\219\STX\DC2&\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SO\ETX\DC2\EOT\219\STX)+\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SO\b\DC2\EOT\219\STX,<\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SO\a\DC2\EOT\219\STX7;\n\
    \\143\SOH\n\
    \\EOT\EOT\SI\STX\SI\DC2\EOT\223\STX\EOTK\SUB\128\SOH If specified, the subscription will reset cursor's position back\n\
    \ to specified seconds and  will send messages from that point\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SI\EOT\DC2\EOT\223\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SI\ENQ\DC2\EOT\223\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SI\SOH\DC2\EOT\223\STX\DC47\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SI\ETX\DC2\EOT\223\STX:<\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SI\b\DC2\EOT\223\STX=J\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SI\a\DC2\EOT\223\STXHI\n\
    \\f\n\
    \\EOT\EOT\SI\STX\DLE\DC2\EOT\225\STX\EOT.\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\DLE\EOT\DC2\EOT\225\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\DLE\ACK\DC2\EOT\225\STX\r\SUB\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\DLE\SOH\DC2\EOT\225\STX\ESC(\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\DLE\ETX\DC2\EOT\225\STX+-\n\
    \\f\n\
    \\STX\EOT\DLE\DC2\ACK\228\STX\NUL\240\STX\SOH\n\
    \\v\n\
    \\ETX\EOT\DLE\SOH\DC2\EOT\228\STX\b'\n\
    \\f\n\
    \\EOT\EOT\DLE\STX\NUL\DC2\EOT\229\STX\EOT)\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\NUL\EOT\DC2\EOT\229\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\NUL\ENQ\DC2\EOT\229\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\NUL\SOH\DC2\EOT\229\STX\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\NUL\ETX\DC2\EOT\229\STX'(\n\
    \\f\n\
    \\EOT\EOT\DLE\STX\SOH\DC2\EOT\230\STX\EOT)\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\SOH\EOT\DC2\EOT\230\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\SOH\ENQ\DC2\EOT\230\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\SOH\SOH\DC2\EOT\230\STX\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\SOH\ETX\DC2\EOT\230\STX'(\n\
    \\149\SOH\n\
    \\EOT\EOT\DLE\STX\STX\DC2\EOT\234\STX\EOT+\SUB\134\SOH TODO - Remove original_principal, original_auth_data, original_auth_method\n\
    \ Original principal that was verified by\n\
    \ a Pulsar proxy.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\STX\EOT\DC2\EOT\234\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\STX\ENQ\DC2\EOT\234\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\STX\SOH\DC2\EOT\234\STX\DC4&\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\STX\ETX\DC2\EOT\234\STX)*\n\
    \Q\n\
    \\EOT\EOT\DLE\STX\ETX\DC2\EOT\238\STX\EOT+\SUBC Original auth role and auth Method that was passed\n\
    \ to the proxy.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\ETX\EOT\DC2\EOT\238\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\ETX\ENQ\DC2\EOT\238\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\ETX\SOH\DC2\EOT\238\STX\DC4&\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\ETX\ETX\DC2\EOT\238\STX)*\n\
    \\f\n\
    \\EOT\EOT\DLE\STX\EOT\DC2\EOT\239\STX\EOT-\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\EOT\EOT\DC2\EOT\239\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\EOT\ENQ\DC2\EOT\239\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\EOT\SOH\DC2\EOT\239\STX\DC4(\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\EOT\ETX\DC2\EOT\239\STX+,\n\
    \\f\n\
    \\STX\EOT\DC1\DC2\ACK\242\STX\NUL\252\STX\SOH\n\
    \\v\n\
    \\ETX\EOT\DC1\SOH\DC2\EOT\242\STX\b/\n\
    \\SO\n\
    \\EOT\EOT\DC1\EOT\NUL\DC2\ACK\243\STX\EOT\246\STX\ENQ\n\
    \\r\n\
    \\ENQ\EOT\DC1\EOT\NUL\SOH\DC2\EOT\243\STX\t\DC3\n\
    \\SO\n\
    \\ACK\EOT\DC1\EOT\NUL\STX\NUL\DC2\EOT\244\STX\b\NAK\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\NUL\SOH\DC2\EOT\244\STX\b\SI\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\NUL\STX\DC2\EOT\244\STX\DC3\DC4\n\
    \\SO\n\
    \\ACK\EOT\DC1\EOT\NUL\STX\SOH\DC2\EOT\245\STX\b\NAK\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\SOH\SOH\DC2\EOT\245\STX\b\SO\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\SOH\STX\DC2\EOT\245\STX\DC3\DC4\n\
    \)\n\
    \\EOT\EOT\DC1\STX\NUL\DC2\EOT\247\STX\EOT.\"\ESC Optional in case of error\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\NUL\EOT\DC2\EOT\247\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\NUL\ENQ\DC2\EOT\247\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\NUL\SOH\DC2\EOT\247\STX\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\NUL\ETX\DC2\EOT\247\STX,-\n\
    \\f\n\
    \\EOT\EOT\DC1\STX\SOH\DC2\EOT\248\STX\EOT.\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\SOH\EOT\DC2\EOT\248\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\SOH\ENQ\DC2\EOT\248\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\SOH\SOH\DC2\EOT\248\STX\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\SOH\ETX\DC2\EOT\248\STX,-\n\
    \\f\n\
    \\EOT\EOT\DC1\STX\STX\DC2\EOT\249\STX\EOT.\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\STX\EOT\DC2\EOT\249\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\STX\ACK\DC2\EOT\249\STX\r\ETB\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\STX\SOH\DC2\EOT\249\STX\CAN \n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\STX\ETX\DC2\EOT\249\STX,-\n\
    \\f\n\
    \\EOT\EOT\DC1\STX\ETX\DC2\EOT\250\STX\EOT.\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\ETX\EOT\DC2\EOT\250\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\ETX\ACK\DC2\EOT\250\STX\r\CAN\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\ETX\SOH\DC2\EOT\250\STX\EM\RS\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\ETX\ETX\DC2\EOT\250\STX,-\n\
    \\f\n\
    \\EOT\EOT\DC1\STX\EOT\DC2\EOT\251\STX\EOT.\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\EOT\EOT\DC2\EOT\251\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\EOT\ENQ\DC2\EOT\251\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\EOT\SOH\DC2\EOT\251\STX\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\EOT\ETX\DC2\EOT\251\STX,-\n\
    \\f\n\
    \\STX\EOT\DC2\DC2\ACK\254\STX\NUL\142\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT\DC2\SOH\DC2\EOT\254\STX\b\SUB\n\
    \\f\n\
    \\EOT\EOT\DC2\STX\NUL\DC2\EOT\255\STX\EOT)\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\NUL\EOT\DC2\EOT\255\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\NUL\ENQ\DC2\EOT\255\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\NUL\SOH\DC2\EOT\255\STX\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\NUL\ETX\DC2\EOT\255\STX'(\n\
    \\f\n\
    \\EOT\EOT\DC2\STX\SOH\DC2\EOT\128\ETX\EOT)\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\SOH\EOT\DC2\EOT\128\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\SOH\ENQ\DC2\EOT\128\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\SOH\SOH\DC2\EOT\128\ETX\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\SOH\ETX\DC2\EOT\128\ETX'(\n\
    \\f\n\
    \\EOT\EOT\DC2\STX\STX\DC2\EOT\129\ETX\EOT;\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\STX\EOT\DC2\EOT\129\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\STX\ENQ\DC2\EOT\129\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\STX\SOH\DC2\EOT\129\ETX\DC2\US\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\STX\ETX\DC2\EOT\129\ETX'(\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\STX\b\DC2\EOT\129\ETX):\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\STX\a\DC2\EOT\129\ETX49\n\
    \\149\SOH\n\
    \\EOT\EOT\DC2\STX\ETX\DC2\EOT\134\ETX\EOT+\SUB\134\SOH TODO - Remove original_principal, original_auth_data, original_auth_method\n\
    \ Original principal that was verified by\n\
    \ a Pulsar proxy.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\ETX\EOT\DC2\EOT\134\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\ETX\ENQ\DC2\EOT\134\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\ETX\SOH\DC2\EOT\134\ETX\DC4&\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\ETX\ETX\DC2\EOT\134\ETX)*\n\
    \Q\n\
    \\EOT\EOT\DC2\STX\EOT\DC2\EOT\138\ETX\EOT+\SUBC Original auth role and auth Method that was passed\n\
    \ to the proxy.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\EOT\EOT\DC2\EOT\138\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\EOT\ENQ\DC2\EOT\138\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\EOT\SOH\DC2\EOT\138\ETX\DC4&\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\EOT\ETX\DC2\EOT\138\ETX)*\n\
    \\f\n\
    \\EOT\EOT\DC2\STX\ENQ\DC2\EOT\139\ETX\EOT-\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\ENQ\EOT\DC2\EOT\139\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\ENQ\ENQ\DC2\EOT\139\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\ENQ\SOH\DC2\EOT\139\ETX\DC4(\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\ENQ\ETX\DC2\EOT\139\ETX+,\n\
    \\SI\n\
    \\EOT\EOT\DC2\STX\ACK\DC2\EOT\141\ETX\EOT1\SUB\SOH\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\ACK\EOT\DC2\EOT\141\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\ACK\ENQ\DC2\EOT\141\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\ACK\SOH\DC2\EOT\141\ETX\DC4,\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\ACK\ETX\DC2\EOT\141\ETX/0\n\
    \\f\n\
    \\STX\EOT\DC3\DC2\ACK\144\ETX\NUL\163\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT\DC3\SOH\DC2\EOT\144\ETX\b\"\n\
    \\SO\n\
    \\EOT\EOT\DC3\EOT\NUL\DC2\ACK\145\ETX\EOT\149\ETX\ENQ\n\
    \\r\n\
    \\ENQ\EOT\DC3\EOT\NUL\SOH\DC2\EOT\145\ETX\t\DC3\n\
    \\SO\n\
    \\ACK\EOT\DC3\EOT\NUL\STX\NUL\DC2\EOT\146\ETX\b\NAK\n\
    \\SI\n\
    \\a\EOT\DC3\EOT\NUL\STX\NUL\SOH\DC2\EOT\146\ETX\b\DLE\n\
    \\SI\n\
    \\a\EOT\DC3\EOT\NUL\STX\NUL\STX\DC2\EOT\146\ETX\DC3\DC4\n\
    \\SO\n\
    \\ACK\EOT\DC3\EOT\NUL\STX\SOH\DC2\EOT\147\ETX\b\NAK\n\
    \\SI\n\
    \\a\EOT\DC3\EOT\NUL\STX\SOH\SOH\DC2\EOT\147\ETX\b\SI\n\
    \\SI\n\
    \\a\EOT\DC3\EOT\NUL\STX\SOH\STX\DC2\EOT\147\ETX\DC3\DC4\n\
    \\SO\n\
    \\ACK\EOT\DC3\EOT\NUL\STX\STX\DC2\EOT\148\ETX\b\NAK\n\
    \\SI\n\
    \\a\EOT\DC3\EOT\NUL\STX\STX\SOH\DC2\EOT\148\ETX\b\SO\n\
    \\SI\n\
    \\a\EOT\DC3\EOT\NUL\STX\STX\STX\DC2\EOT\148\ETX\DC3\DC4\n\
    \)\n\
    \\EOT\EOT\DC3\STX\NUL\DC2\EOT\151\ETX\EOT.\"\ESC Optional in case of error\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NUL\EOT\DC2\EOT\151\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NUL\ENQ\DC2\EOT\151\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NUL\SOH\DC2\EOT\151\ETX\DC4$\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NUL\ETX\DC2\EOT\151\ETX,-\n\
    \\f\n\
    \\EOT\EOT\DC3\STX\SOH\DC2\EOT\152\ETX\EOT.\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SOH\EOT\DC2\EOT\152\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SOH\ENQ\DC2\EOT\152\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SOH\SOH\DC2\EOT\152\ETX\DC4'\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SOH\ETX\DC2\EOT\152\ETX,-\n\
    \\f\n\
    \\EOT\EOT\DC3\STX\STX\DC2\EOT\153\ETX\EOT.\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\STX\EOT\DC2\EOT\153\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\STX\ACK\DC2\EOT\153\ETX\r\ETB\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\STX\SOH\DC2\EOT\153\ETX\CAN \n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\STX\ETX\DC2\EOT\153\ETX,-\n\
    \\f\n\
    \\EOT\EOT\DC3\STX\ETX\DC2\EOT\154\ETX\EOT.\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ETX\EOT\DC2\EOT\154\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ETX\ENQ\DC2\EOT\154\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ETX\SOH\DC2\EOT\154\ETX\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ETX\ETX\DC2\EOT\154\ETX,-\n\
    \\f\n\
    \\EOT\EOT\DC3\STX\EOT\DC2\EOT\155\ETX\EOT@\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\EOT\EOT\DC2\EOT\155\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\EOT\ENQ\DC2\EOT\155\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\EOT\SOH\DC2\EOT\155\ETX\DC2\US\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\EOT\ETX\DC2\EOT\155\ETX,-\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\EOT\b\DC2\EOT\155\ETX.?\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\EOT\a\DC2\EOT\155\ETX9>\n\
    \\f\n\
    \\EOT\EOT\DC3\STX\ENQ\DC2\EOT\156\ETX\EOT.\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ENQ\EOT\DC2\EOT\156\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ENQ\ACK\DC2\EOT\156\ETX\r\CAN\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ENQ\SOH\DC2\EOT\156\ETX\EM\RS\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ENQ\ETX\DC2\EOT\156\ETX,-\n\
    \\f\n\
    \\EOT\EOT\DC3\STX\ACK\DC2\EOT\157\ETX\EOT.\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ACK\EOT\DC2\EOT\157\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ACK\ENQ\DC2\EOT\157\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ACK\SOH\DC2\EOT\157\ETX\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ACK\ETX\DC2\EOT\157\ETX,-\n\
    \\145\SOH\n\
    \\EOT\EOT\DC3\STX\a\DC2\EOT\162\ETX\EOTB\SUB\130\SOH If it's true, indicates to the client that it must\n\
    \ always connect through the service url after the\n\
    \ lookup has been completed.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\a\EOT\DC2\EOT\162\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\a\ENQ\DC2\EOT\162\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\a\SOH\DC2\EOT\162\ETX\DC2+\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\a\ETX\DC2\EOT\162\ETX./\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\a\b\DC2\EOT\162\ETX0A\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\a\a\DC2\EOT\162\ETX;@\n\
    \\157\SOH\n\
    \\STX\EOT\DC4\DC2\ACK\167\ETX\NUL\189\ETX\SOH\SUB\142\SOH/ Create a new Producer on a topic, assigning the given producer_id,\n\
    \/ all messages sent with this producer_id will be persisted on the topic\n\
    \\n\
    \\v\n\
    \\ETX\EOT\DC4\SOH\DC2\EOT\167\ETX\b\ETB\n\
    \\f\n\
    \\EOT\EOT\DC4\STX\NUL\DC2\EOT\168\ETX\EOT&\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\NUL\EOT\DC2\EOT\168\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\NUL\ENQ\DC2\EOT\168\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\NUL\SOH\DC2\EOT\168\ETX\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\NUL\ETX\DC2\EOT\168\ETX$%\n\
    \\f\n\
    \\EOT\EOT\DC4\STX\SOH\DC2\EOT\169\ETX\EOT&\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SOH\EOT\DC2\EOT\169\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SOH\ENQ\DC2\EOT\169\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SOH\SOH\DC2\EOT\169\ETX\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SOH\ETX\DC2\EOT\169\ETX$%\n\
    \\f\n\
    \\EOT\EOT\DC4\STX\STX\DC2\EOT\170\ETX\EOT&\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\STX\EOT\DC2\EOT\170\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\STX\ENQ\DC2\EOT\170\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\STX\SOH\DC2\EOT\170\ETX\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\STX\ETX\DC2\EOT\170\ETX$%\n\
    \{\n\
    \\EOT\EOT\DC4\STX\ETX\DC2\EOT\174\ETX\EOT&\SUBm/ If a producer name is specified, the name will be used,\n\
    \/ otherwise the broker will generate a unique name\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ETX\EOT\DC2\EOT\174\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ETX\ENQ\DC2\EOT\174\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ETX\SOH\DC2\EOT\174\ETX\DC4!\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ETX\ETX\DC2\EOT\174\ETX$%\n\
    \\f\n\
    \\EOT\EOT\DC4\STX\EOT\DC2\EOT\176\ETX\EOT8\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\EOT\EOT\DC2\EOT\176\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\EOT\ENQ\DC2\EOT\176\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\EOT\SOH\DC2\EOT\176\ETX\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\EOT\ETX\DC2\EOT\176\ETX$%\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\EOT\b\DC2\EOT\176\ETX&7\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\EOT\a\DC2\EOT\176\ETX16\n\
    \A\n\
    \\EOT\EOT\DC4\STX\ENQ\DC2\EOT\179\ETX\EOT&\SUB3/ Add optional metadata key=value to this producer\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ENQ\EOT\DC2\EOT\179\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ENQ\ACK\DC2\EOT\179\ETX\r\NAK\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ENQ\SOH\DC2\EOT\179\ETX\SYN\RS\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ENQ\ETX\DC2\EOT\179\ETX$%\n\
    \\f\n\
    \\EOT\EOT\DC4\STX\ACK\DC2\EOT\181\ETX\EOT\US\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ACK\EOT\DC2\EOT\181\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ACK\ACK\DC2\EOT\181\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ACK\SOH\DC2\EOT\181\ETX\DC4\SUB\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ACK\ETX\DC2\EOT\181\ETX\GS\RS\n\
    \S\n\
    \\EOT\EOT\DC4\STX\a\DC2\EOT\184\ETX\EOT,\SUBE If producer reconnect to broker, the epoch of this producer will +1\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\a\EOT\DC2\EOT\184\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\a\ENQ\DC2\EOT\184\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\a\SOH\DC2\EOT\184\ETX\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\a\ETX\DC2\EOT\184\ETX\FS\GS\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\a\b\DC2\EOT\184\ETX\RS+\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\a\a\DC2\EOT\184\ETX)*\n\
    \\156\SOH\n\
    \\EOT\EOT\DC4\STX\b\DC2\EOT\188\ETX\EOTC\SUB\141\SOH Indicate the name of the producer is generated or user provided\n\
    \ Use default true here is in order to be forward compatible with the client\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\b\EOT\DC2\EOT\188\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\b\ENQ\DC2\EOT\188\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\b\SOH\DC2\EOT\188\ETX\DC2-\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\b\ETX\DC2\EOT\188\ETX01\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\b\b\DC2\EOT\188\ETX2B\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\b\a\DC2\EOT\188\ETX=A\n\
    \\f\n\
    \\STX\EOT\NAK\DC2\ACK\191\ETX\NUL\201\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT\NAK\SOH\DC2\EOT\191\ETX\b\DC3\n\
    \\f\n\
    \\EOT\EOT\NAK\STX\NUL\DC2\EOT\192\ETX\EOT$\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\NUL\EOT\DC2\EOT\192\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\NUL\ENQ\DC2\EOT\192\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\NUL\SOH\DC2\EOT\192\ETX\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\NUL\ETX\DC2\EOT\192\ETX\"#\n\
    \\f\n\
    \\EOT\EOT\NAK\STX\SOH\DC2\EOT\193\ETX\EOT$\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\SOH\EOT\DC2\EOT\193\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\SOH\ENQ\DC2\EOT\193\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\SOH\SOH\DC2\EOT\193\ETX\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\SOH\ETX\DC2\EOT\193\ETX\"#\n\
    \\f\n\
    \\EOT\EOT\NAK\STX\STX\DC2\EOT\194\ETX\EOT2\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\STX\EOT\DC2\EOT\194\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\STX\ENQ\DC2\EOT\194\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\STX\SOH\DC2\EOT\194\ETX\DC3\US\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\STX\ETX\DC2\EOT\194\ETX\"#\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\STX\b\DC2\EOT\194\ETX$1\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\STX\a\DC2\EOT\194\ETX/0\n\
    \\f\n\
    \\EOT\EOT\NAK\STX\ETX\DC2\EOT\195\ETX\EOT7\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ETX\EOT\DC2\EOT\195\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ETX\ENQ\DC2\EOT\195\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ETX\SOH\DC2\EOT\195\ETX\DC4$\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ETX\ETX\DC2\EOT\195\ETX'(\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ETX\b\DC2\EOT\195\ETX)6\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ETX\a\DC2\EOT\195\ETX45\n\
    \\f\n\
    \\EOT\EOT\NAK\STX\EOT\DC2\EOT\196\ETX\EOT6\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\EOT\EOT\DC2\EOT\196\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\EOT\ENQ\DC2\EOT\196\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\EOT\SOH\DC2\EOT\196\ETX\DC4#\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\EOT\ETX\DC2\EOT\196\ETX&'\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\EOT\b\DC2\EOT\196\ETX(5\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\EOT\a\DC2\EOT\196\ETX34\n\
    \[\n\
    \\EOT\EOT\NAK\STX\ENQ\DC2\EOT\199\ETX\EOT:\SUBM/ Add highest sequence id to support batch message with external sequence id\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ENQ\EOT\DC2\EOT\199\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ENQ\ENQ\DC2\EOT\199\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ENQ\SOH\DC2\EOT\199\ETX\DC4'\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ENQ\ETX\DC2\EOT\199\ETX*+\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ENQ\b\DC2\EOT\199\ETX,9\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ENQ\a\DC2\EOT\199\ETX78\n\
    \\f\n\
    \\EOT\EOT\NAK\STX\ACK\DC2\EOT\200\ETX\EOT4\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ACK\EOT\DC2\EOT\200\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ACK\ENQ\DC2\EOT\200\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ACK\SOH\DC2\EOT\200\ETX\DC2\SUB\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ACK\ETX\DC2\EOT\200\ETX !\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ACK\b\DC2\EOT\200\ETX\"3\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ACK\a\DC2\EOT\200\ETX-2\n\
    \\f\n\
    \\STX\EOT\SYN\DC2\ACK\203\ETX\NUL\208\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT\SYN\SOH\DC2\EOT\203\ETX\b\SUB\n\
    \\f\n\
    \\EOT\EOT\SYN\STX\NUL\DC2\EOT\204\ETX\EOT$\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\NUL\EOT\DC2\EOT\204\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\NUL\ENQ\DC2\EOT\204\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\NUL\SOH\DC2\EOT\204\ETX\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\NUL\ETX\DC2\EOT\204\ETX\"#\n\
    \\f\n\
    \\EOT\EOT\SYN\STX\SOH\DC2\EOT\205\ETX\EOT$\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\SOH\EOT\DC2\EOT\205\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\SOH\ENQ\DC2\EOT\205\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\SOH\SOH\DC2\EOT\205\ETX\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\SOH\ETX\DC2\EOT\205\ETX\"#\n\
    \\f\n\
    \\EOT\EOT\SYN\STX\STX\DC2\EOT\206\ETX\EOT*\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\STX\EOT\DC2\EOT\206\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\STX\ACK\DC2\EOT\206\ETX\r\SUB\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\STX\SOH\DC2\EOT\206\ETX\ESC%\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\STX\ETX\DC2\EOT\206\ETX()\n\
    \\f\n\
    \\EOT\EOT\SYN\STX\ETX\DC2\EOT\207\ETX\EOT:\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ETX\EOT\DC2\EOT\207\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ETX\ENQ\DC2\EOT\207\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ETX\SOH\DC2\EOT\207\ETX\DC4'\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ETX\ETX\DC2\EOT\207\ETX*+\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ETX\b\DC2\EOT\207\ETX,9\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ETX\a\DC2\EOT\207\ETX78\n\
    \\f\n\
    \\STX\EOT\ETB\DC2\ACK\210\ETX\NUL\215\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT\ETB\SOH\DC2\EOT\210\ETX\b\CAN\n\
    \\f\n\
    \\EOT\EOT\ETB\STX\NUL\DC2\EOT\211\ETX\EOT$\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\EOT\DC2\EOT\211\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\ENQ\DC2\EOT\211\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\SOH\DC2\EOT\211\ETX\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\ETX\DC2\EOT\211\ETX\"#\n\
    \\f\n\
    \\EOT\EOT\ETB\STX\SOH\DC2\EOT\212\ETX\EOT$\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\EOT\DC2\EOT\212\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\ENQ\DC2\EOT\212\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\SOH\DC2\EOT\212\ETX\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\ETX\DC2\EOT\212\ETX\"#\n\
    \\f\n\
    \\EOT\EOT\ETB\STX\STX\DC2\EOT\213\ETX\EOT$\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\STX\EOT\DC2\EOT\213\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\STX\ACK\DC2\EOT\213\ETX\r\CAN\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\STX\SOH\DC2\EOT\213\ETX\EM\RS\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\STX\ETX\DC2\EOT\213\ETX\"#\n\
    \\f\n\
    \\EOT\EOT\ETB\STX\ETX\DC2\EOT\214\ETX\EOT$\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ETX\EOT\DC2\EOT\214\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ETX\ENQ\DC2\EOT\214\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ETX\SOH\DC2\EOT\214\ETX\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ETX\ETX\DC2\EOT\214\ETX\"#\n\
    \\f\n\
    \\STX\EOT\CAN\DC2\ACK\217\ETX\NUL\222\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT\CAN\SOH\DC2\EOT\217\ETX\b\SYN\n\
    \\f\n\
    \\EOT\EOT\CAN\STX\NUL\DC2\EOT\218\ETX\EOT*\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\EOT\DC2\EOT\218\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\ENQ\DC2\EOT\218\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\SOH\DC2\EOT\218\ETX\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\ETX\DC2\EOT\218\ETX()\n\
    \\f\n\
    \\EOT\EOT\CAN\STX\SOH\DC2\EOT\219\ETX\EOT*\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\EOT\DC2\EOT\219\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\ACK\DC2\EOT\219\ETX\r\SUB\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\SOH\DC2\EOT\219\ETX\ESC%\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\ETX\DC2\EOT\219\ETX()\n\
    \\f\n\
    \\EOT\EOT\CAN\STX\STX\DC2\EOT\220\ETX\EOT8\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\STX\EOT\DC2\EOT\220\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\STX\ENQ\DC2\EOT\220\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\STX\SOH\DC2\EOT\220\ETX\DC4$\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\STX\ETX\DC2\EOT\220\ETX()\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\STX\b\DC2\EOT\220\ETX*7\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\STX\a\DC2\EOT\220\ETX56\n\
    \\f\n\
    \\EOT\EOT\CAN\STX\ETX\DC2\EOT\221\ETX\EOT\US\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ETX\EOT\DC2\EOT\221\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ETX\ENQ\DC2\EOT\221\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ETX\SOH\DC2\EOT\221\ETX\DC3\SUB\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ETX\ETX\DC2\EOT\221\ETX\GS\RS\n\
    \\f\n\
    \\STX\EOT\EM\DC2\ACK\224\ETX\NUL\252\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT\EM\SOH\DC2\EOT\224\ETX\b\DC2\n\
    \\SO\n\
    \\EOT\EOT\EM\EOT\NUL\DC2\ACK\225\ETX\EOT\228\ETX\ENQ\n\
    \\r\n\
    \\ENQ\EOT\EM\EOT\NUL\SOH\DC2\EOT\225\ETX\t\DLE\n\
    \\SO\n\
    \\ACK\EOT\EM\EOT\NUL\STX\NUL\DC2\EOT\226\ETX\b\ETB\n\
    \\SI\n\
    \\a\EOT\EM\EOT\NUL\STX\NUL\SOH\DC2\EOT\226\ETX\b\DC2\n\
    \\SI\n\
    \\a\EOT\EM\EOT\NUL\STX\NUL\STX\DC2\EOT\226\ETX\NAK\SYN\n\
    \\SO\n\
    \\ACK\EOT\EM\EOT\NUL\STX\SOH\DC2\EOT\227\ETX\b\ETB\n\
    \\SI\n\
    \\a\EOT\EM\EOT\NUL\STX\SOH\SOH\DC2\EOT\227\ETX\b\DC2\n\
    \\SI\n\
    \\a\EOT\EM\EOT\NUL\STX\SOH\STX\DC2\EOT\227\ETX\NAK\SYN\n\
    \\f\n\
    \\EOT\EOT\EM\STX\NUL\DC2\EOT\230\ETX\EOT*\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\EOT\DC2\EOT\230\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\ENQ\DC2\EOT\230\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\SOH\DC2\EOT\230\ETX\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\ETX\DC2\EOT\230\ETX()\n\
    \\f\n\
    \\EOT\EOT\EM\STX\SOH\DC2\EOT\231\ETX\EOT*\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\EOT\DC2\EOT\231\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\ACK\DC2\EOT\231\ETX\r\DC4\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\SOH\DC2\EOT\231\ETX\NAK\GS\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\ETX\DC2\EOT\231\ETX()\n\
    \U\n\
    \\EOT\EOT\EM\STX\STX\DC2\EOT\234\ETX\EOT*\SUBG In case of individual acks, the client can pass a list of message ids\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\EOT\DC2\EOT\234\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\ACK\DC2\EOT\234\ETX\r\SUB\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\SOH\DC2\EOT\234\ETX\ESC%\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\ETX\DC2\EOT\234\ETX()\n\
    \\159\SOH\n\
    \\EOT\EOT\EM\EOT\SOH\DC2\ACK\239\ETX\EOT\245\ETX\ENQ\SUB\142\SOH Acks can contain a flag to indicate the consumer\n\
    \ received an invalid message that got discarded\n\
    \ before being passed on to the application.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\EOT\SOH\SOH\DC2\EOT\239\ETX\t\CAN\n\
    \\SO\n\
    \\ACK\EOT\EM\EOT\SOH\STX\NUL\DC2\EOT\240\ETX\b'\n\
    \\SI\n\
    \\a\EOT\EM\EOT\SOH\STX\NUL\SOH\DC2\EOT\240\ETX\b\"\n\
    \\SI\n\
    \\a\EOT\EM\EOT\SOH\STX\NUL\STX\DC2\EOT\240\ETX%&\n\
    \\SO\n\
    \\ACK\EOT\EM\EOT\SOH\STX\SOH\DC2\EOT\241\ETX\b\US\n\
    \\SI\n\
    \\a\EOT\EM\EOT\SOH\STX\SOH\SOH\DC2\EOT\241\ETX\b\SUB\n\
    \\SI\n\
    \\a\EOT\EM\EOT\SOH\STX\SOH\STX\DC2\EOT\241\ETX\GS\RS\n\
    \\SO\n\
    \\ACK\EOT\EM\EOT\SOH\STX\STX\DC2\EOT\242\ETX\b\GS\n\
    \\SI\n\
    \\a\EOT\EM\EOT\SOH\STX\STX\SOH\DC2\EOT\242\ETX\b\CAN\n\
    \\SI\n\
    \\a\EOT\EM\EOT\SOH\STX\STX\STX\DC2\EOT\242\ETX\ESC\FS\n\
    \\SO\n\
    \\ACK\EOT\EM\EOT\SOH\STX\ETX\DC2\EOT\243\ETX\b\"\n\
    \\SI\n\
    \\a\EOT\EM\EOT\SOH\STX\ETX\SOH\DC2\EOT\243\ETX\b\GS\n\
    \\SI\n\
    \\a\EOT\EM\EOT\SOH\STX\ETX\STX\DC2\EOT\243\ETX !\n\
    \\SO\n\
    \\ACK\EOT\EM\EOT\SOH\STX\EOT\DC2\EOT\244\ETX\b\FS\n\
    \\SI\n\
    \\a\EOT\EM\EOT\SOH\STX\EOT\SOH\DC2\EOT\244\ETX\b\ETB\n\
    \\SI\n\
    \\a\EOT\EM\EOT\SOH\STX\EOT\STX\DC2\EOT\244\ETX\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT\EM\STX\ETX\DC2\EOT\247\ETX\EOT2\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\EOT\DC2\EOT\247\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\ACK\DC2\EOT\247\ETX\r\FS\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\SOH\DC2\EOT\247\ETX\GS-\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\ETX\DC2\EOT\247\ETX01\n\
    \\f\n\
    \\EOT\EOT\EM\STX\EOT\DC2\EOT\248\ETX\EOT)\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\EOT\EOT\DC2\EOT\248\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\EOT\ACK\DC2\EOT\248\ETX\r\EM\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\EOT\SOH\DC2\EOT\248\ETX\SUB$\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\EOT\ETX\DC2\EOT\248\ETX'(\n\
    \\f\n\
    \\EOT\EOT\EM\STX\ENQ\DC2\EOT\250\ETX\EOT7\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ENQ\EOT\DC2\EOT\250\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ENQ\ENQ\DC2\EOT\250\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ENQ\SOH\DC2\EOT\250\ETX\DC4$\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ENQ\ETX\DC2\EOT\250\ETX'(\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ENQ\b\DC2\EOT\250\ETX)6\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ENQ\a\DC2\EOT\250\ETX45\n\
    \\f\n\
    \\EOT\EOT\EM\STX\ACK\DC2\EOT\251\ETX\EOT6\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ACK\EOT\DC2\EOT\251\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ACK\ENQ\DC2\EOT\251\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ACK\SOH\DC2\EOT\251\ETX\DC4#\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ACK\ETX\DC2\EOT\251\ETX&'\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ACK\b\DC2\EOT\251\ETX(5\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ACK\a\DC2\EOT\251\ETX34\n\
    \\f\n\
    \\STX\EOT\SUB\DC2\ACK\254\ETX\NUL\132\EOT\SOH\n\
    \\v\n\
    \\ETX\EOT\SUB\SOH\DC2\EOT\254\ETX\b\SUB\n\
    \\f\n\
    \\EOT\EOT\SUB\STX\NUL\DC2\EOT\255\ETX\EOT$\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\EOT\DC2\EOT\255\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\ENQ\DC2\EOT\255\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\SOH\DC2\EOT\255\ETX\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\ETX\DC2\EOT\255\ETX\"#\n\
    \\f\n\
    \\EOT\EOT\SUB\STX\SOH\DC2\EOT\128\EOT\EOT8\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\EOT\DC2\EOT\128\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\ENQ\DC2\EOT\128\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\SOH\DC2\EOT\128\EOT\DC4$\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\ETX\DC2\EOT\128\EOT()\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\b\DC2\EOT\128\EOT*7\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\a\DC2\EOT\128\EOT56\n\
    \\f\n\
    \\EOT\EOT\SUB\STX\STX\DC2\EOT\129\EOT\EOT6\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\STX\EOT\DC2\EOT\129\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\STX\ENQ\DC2\EOT\129\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\STX\SOH\DC2\EOT\129\EOT\DC4#\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\STX\ETX\DC2\EOT\129\EOT&'\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\STX\b\DC2\EOT\129\EOT(5\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\STX\a\DC2\EOT\129\EOT34\n\
    \\f\n\
    \\EOT\EOT\SUB\STX\ETX\DC2\EOT\130\EOT\EOT#\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ETX\EOT\DC2\EOT\130\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ETX\ACK\DC2\EOT\130\EOT\r\CAN\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ETX\SOH\DC2\EOT\130\EOT\EM\RS\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ETX\ETX\DC2\EOT\130\EOT!\"\n\
    \\f\n\
    \\EOT\EOT\SUB\STX\EOT\DC2\EOT\131\EOT\EOT \n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\EOT\EOT\DC2\EOT\131\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\EOT\ENQ\DC2\EOT\131\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\EOT\SOH\DC2\EOT\131\EOT\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\EOT\ETX\DC2\EOT\131\EOT\RS\US\n\
    \*\n\
    \\STX\EOT\ESC\DC2\ACK\135\EOT\NUL\138\EOT\SOH\SUB\FS changes on active consumer\n\
    \\n\
    \\v\n\
    \\ETX\EOT\ESC\SOH\DC2\EOT\135\EOT\b#\n\
    \\f\n\
    \\EOT\EOT\ESC\STX\NUL\DC2\EOT\136\EOT\b+\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\NUL\EOT\DC2\EOT\136\EOT\b\DLE\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\NUL\ENQ\DC2\EOT\136\EOT\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\NUL\SOH\DC2\EOT\136\EOT\CAN#\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\NUL\ETX\DC2\EOT\136\EOT)*\n\
    \\f\n\
    \\EOT\EOT\ESC\STX\SOH\DC2\EOT\137\EOT\b:\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\SOH\EOT\DC2\EOT\137\EOT\b\DLE\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\SOH\ENQ\DC2\EOT\137\EOT\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\SOH\SOH\DC2\EOT\137\EOT\SYN\US\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\SOH\ETX\DC2\EOT\137\EOT&'\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\SOH\b\DC2\EOT\137\EOT(9\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\SOH\a\DC2\EOT\137\EOT38\n\
    \\f\n\
    \\STX\EOT\FS\DC2\ACK\140\EOT\NUL\146\EOT\SOH\n\
    \\v\n\
    \\ETX\EOT\FS\SOH\DC2\EOT\140\EOT\b\DC3\n\
    \\f\n\
    \\EOT\EOT\FS\STX\NUL\DC2\EOT\141\EOT\EOT*\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\NUL\EOT\DC2\EOT\141\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\NUL\ENQ\DC2\EOT\141\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\NUL\SOH\DC2\EOT\141\EOT\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\NUL\ETX\DC2\EOT\141\EOT()\n\
    \c\n\
    \\EOT\EOT\FS\STX\SOH\DC2\EOT\145\EOT\EOT+\SUBU Max number of messages to prefetch, in addition\n\
    \ of any number previously specified\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\SOH\EOT\DC2\EOT\145\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\SOH\ENQ\DC2\EOT\145\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\SOH\SOH\DC2\EOT\145\EOT\DC4\"\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\SOH\ETX\DC2\EOT\145\EOT)*\n\
    \\f\n\
    \\STX\EOT\GS\DC2\ACK\148\EOT\NUL\151\EOT\SOH\n\
    \\v\n\
    \\ETX\EOT\GS\SOH\DC2\EOT\148\EOT\b\SUB\n\
    \\f\n\
    \\EOT\EOT\GS\STX\NUL\DC2\EOT\149\EOT\EOT$\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\NUL\EOT\DC2\EOT\149\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\NUL\ENQ\DC2\EOT\149\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\NUL\SOH\DC2\EOT\149\EOT\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\NUL\ETX\DC2\EOT\149\EOT\"#\n\
    \\f\n\
    \\EOT\EOT\GS\STX\SOH\DC2\EOT\150\EOT\EOT$\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\SOH\EOT\DC2\EOT\150\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\SOH\ENQ\DC2\EOT\150\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\SOH\SOH\DC2\EOT\150\EOT\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\SOH\ETX\DC2\EOT\150\EOT\"#\n\
    \E\n\
    \\STX\EOT\RS\DC2\ACK\154\EOT\NUL\160\EOT\SOH\SUB7 Reset an existing consumer to a particular message id\n\
    \\n\
    \\v\n\
    \\ETX\EOT\RS\SOH\DC2\EOT\154\EOT\b\DC3\n\
    \\f\n\
    \\EOT\EOT\RS\STX\NUL\DC2\EOT\155\EOT\EOT$\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\NUL\EOT\DC2\EOT\155\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\NUL\ENQ\DC2\EOT\155\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\NUL\SOH\DC2\EOT\155\EOT\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\NUL\ETX\DC2\EOT\155\EOT\"#\n\
    \\f\n\
    \\EOT\EOT\RS\STX\SOH\DC2\EOT\156\EOT\EOT$\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\SOH\EOT\DC2\EOT\156\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\SOH\ENQ\DC2\EOT\156\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\SOH\SOH\DC2\EOT\156\EOT\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\SOH\ETX\DC2\EOT\156\EOT\"#\n\
    \\f\n\
    \\EOT\EOT\RS\STX\STX\DC2\EOT\158\EOT\EOT*\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\STX\EOT\DC2\EOT\158\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\STX\ACK\DC2\EOT\158\EOT\r\SUB\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\STX\SOH\DC2\EOT\158\EOT\ESC%\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\STX\ETX\DC2\EOT\158\EOT()\n\
    \\f\n\
    \\EOT\EOT\RS\STX\ETX\DC2\EOT\159\EOT\EOT-\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\ETX\EOT\DC2\EOT\159\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\ETX\ENQ\DC2\EOT\159\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\ETX\SOH\DC2\EOT\159\EOT\DC4(\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\ETX\ETX\DC2\EOT\159\EOT+,\n\
    \\141\SOH\n\
    \\STX\EOT\US\DC2\ACK\165\EOT\NUL\167\EOT\SOH\SUB\DEL Message sent by broker to client when a topic\n\
    \ has been forcefully terminated and there are no more\n\
    \ messages left to consume\n\
    \\n\
    \\v\n\
    \\ETX\EOT\US\SOH\DC2\EOT\165\EOT\b \n\
    \\f\n\
    \\EOT\EOT\US\STX\NUL\DC2\EOT\166\EOT\EOT$\n\
    \\r\n\
    \\ENQ\EOT\US\STX\NUL\EOT\DC2\EOT\166\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\US\STX\NUL\ENQ\DC2\EOT\166\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\US\STX\NUL\SOH\DC2\EOT\166\EOT\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\US\STX\NUL\ETX\DC2\EOT\166\EOT\"#\n\
    \\f\n\
    \\STX\EOT \DC2\ACK\169\EOT\NUL\172\EOT\SOH\n\
    \\v\n\
    \\ETX\EOT \SOH\DC2\EOT\169\EOT\b\FS\n\
    \\f\n\
    \\EOT\EOT \STX\NUL\DC2\EOT\170\EOT\EOT$\n\
    \\r\n\
    \\ENQ\EOT \STX\NUL\EOT\DC2\EOT\170\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT \STX\NUL\ENQ\DC2\EOT\170\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT \STX\NUL\SOH\DC2\EOT\170\EOT\DC4\US\n\
    \\r\n\
    \\ENQ\EOT \STX\NUL\ETX\DC2\EOT\170\EOT\"#\n\
    \\f\n\
    \\EOT\EOT \STX\SOH\DC2\EOT\171\EOT\EOT#\n\
    \\r\n\
    \\ENQ\EOT \STX\SOH\EOT\DC2\EOT\171\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT \STX\SOH\ENQ\DC2\EOT\171\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT \STX\SOH\SOH\DC2\EOT\171\EOT\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT \STX\SOH\ETX\DC2\EOT\171\EOT!\"\n\
    \\f\n\
    \\STX\EOT!\DC2\ACK\174\EOT\NUL\177\EOT\SOH\n\
    \\v\n\
    \\ETX\EOT!\SOH\DC2\EOT\174\EOT\b\FS\n\
    \\f\n\
    \\EOT\EOT!\STX\NUL\DC2\EOT\175\EOT\EOT$\n\
    \\r\n\
    \\ENQ\EOT!\STX\NUL\EOT\DC2\EOT\175\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT!\STX\NUL\ENQ\DC2\EOT\175\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT!\STX\NUL\SOH\DC2\EOT\175\EOT\DC4\US\n\
    \\r\n\
    \\ENQ\EOT!\STX\NUL\ETX\DC2\EOT\175\EOT\"#\n\
    \\f\n\
    \\EOT\EOT!\STX\SOH\DC2\EOT\176\EOT\EOT#\n\
    \\r\n\
    \\ENQ\EOT!\STX\SOH\EOT\DC2\EOT\176\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT!\STX\SOH\ENQ\DC2\EOT\176\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT!\STX\SOH\SOH\DC2\EOT\176\EOT\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT!\STX\SOH\ETX\DC2\EOT\176\EOT!\"\n\
    \\f\n\
    \\STX\EOT\"\DC2\ACK\179\EOT\NUL\182\EOT\SOH\n\
    \\v\n\
    \\ETX\EOT\"\SOH\DC2\EOT\179\EOT\b.\n\
    \\f\n\
    \\EOT\EOT\"\STX\NUL\DC2\EOT\180\EOT\EOT$\n\
    \\r\n\
    \\ENQ\EOT\"\STX\NUL\EOT\DC2\EOT\180\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\"\STX\NUL\ENQ\DC2\EOT\180\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\"\STX\NUL\SOH\DC2\EOT\180\EOT\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\"\STX\NUL\ETX\DC2\EOT\180\EOT\"#\n\
    \\f\n\
    \\EOT\EOT\"\STX\SOH\DC2\EOT\181\EOT\EOT+\n\
    \\r\n\
    \\ENQ\EOT\"\STX\SOH\EOT\DC2\EOT\181\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\"\STX\SOH\ACK\DC2\EOT\181\EOT\r\SUB\n\
    \\r\n\
    \\ENQ\EOT\"\STX\SOH\SOH\DC2\EOT\181\EOT\ESC&\n\
    \\r\n\
    \\ENQ\EOT\"\STX\SOH\ETX\DC2\EOT\181\EOT)*\n\
    \\f\n\
    \\STX\EOT#\DC2\ACK\184\EOT\NUL\187\EOT\SOH\n\
    \\v\n\
    \\ETX\EOT#\SOH\DC2\EOT\184\EOT\b\SYN\n\
    \\f\n\
    \\EOT\EOT#\STX\NUL\DC2\EOT\185\EOT\EOT#\n\
    \\r\n\
    \\ENQ\EOT#\STX\NUL\EOT\DC2\EOT\185\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT#\STX\NUL\ENQ\DC2\EOT\185\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT#\STX\NUL\SOH\DC2\EOT\185\EOT\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT#\STX\NUL\ETX\DC2\EOT\185\EOT!\"\n\
    \\f\n\
    \\EOT\EOT#\STX\SOH\DC2\EOT\186\EOT\EOT\US\n\
    \\r\n\
    \\ENQ\EOT#\STX\SOH\EOT\DC2\EOT\186\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT#\STX\SOH\ACK\DC2\EOT\186\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT#\STX\SOH\SOH\DC2\EOT\186\EOT\DC4\SUB\n\
    \\r\n\
    \\ENQ\EOT#\STX\SOH\ETX\DC2\EOT\186\EOT\GS\RS\n\
    \.\n\
    \\STX\EOT$\DC2\ACK\190\EOT\NUL\198\EOT\SOH\SUB / Response from CommandProducer\n\
    \\n\
    \\v\n\
    \\ETX\EOT$\SOH\DC2\EOT\190\EOT\b\RS\n\
    \\f\n\
    \\EOT\EOT$\STX\NUL\DC2\EOT\191\EOT\EOT&\n\
    \\r\n\
    \\ENQ\EOT$\STX\NUL\EOT\DC2\EOT\191\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT$\STX\NUL\ENQ\DC2\EOT\191\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT$\STX\NUL\SOH\DC2\EOT\191\EOT\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT$\STX\NUL\ETX\DC2\EOT\191\EOT$%\n\
    \\f\n\
    \\EOT\EOT$\STX\SOH\DC2\EOT\192\EOT\EOT&\n\
    \\r\n\
    \\ENQ\EOT$\STX\SOH\EOT\DC2\EOT\192\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT$\STX\SOH\ENQ\DC2\EOT\192\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT$\STX\SOH\SOH\DC2\EOT\192\EOT\DC4!\n\
    \\r\n\
    \\ENQ\EOT$\STX\SOH\ETX\DC2\EOT\192\EOT$%\n\
    \\159\SOH\n\
    \\EOT\EOT$\STX\STX\DC2\EOT\196\EOT\EOT8\SUB\144\SOH The last sequence id that was stored by this producer in the previous session\n\
    \ This will only be meaningful if deduplication has been enabled.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT$\STX\STX\EOT\DC2\EOT\196\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT$\STX\STX\ENQ\DC2\EOT\196\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT$\STX\STX\SOH\DC2\EOT\196\EOT\DC4$\n\
    \\r\n\
    \\ENQ\EOT$\STX\STX\ETX\DC2\EOT\196\EOT'(\n\
    \\r\n\
    \\ENQ\EOT$\STX\STX\b\DC2\EOT\196\EOT)7\n\
    \\r\n\
    \\ENQ\EOT$\STX\STX\a\DC2\EOT\196\EOT46\n\
    \\f\n\
    \\EOT\EOT$\STX\ETX\DC2\EOT\197\EOT\EOT&\n\
    \\r\n\
    \\ENQ\EOT$\STX\ETX\EOT\DC2\EOT\197\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT$\STX\ETX\ENQ\DC2\EOT\197\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT$\STX\ETX\SOH\DC2\EOT\197\EOT\DC3!\n\
    \\r\n\
    \\ENQ\EOT$\STX\ETX\ETX\DC2\EOT\197\EOT$%\n\
    \\f\n\
    \\STX\EOT%\DC2\ACK\200\EOT\NUL\204\EOT\SOH\n\
    \\v\n\
    \\ETX\EOT%\SOH\DC2\EOT\200\EOT\b\DC4\n\
    \\f\n\
    \\EOT\EOT%\STX\NUL\DC2\EOT\201\EOT\EOT$\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\EOT\DC2\EOT\201\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\ENQ\DC2\EOT\201\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\SOH\DC2\EOT\201\EOT\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\ETX\DC2\EOT\201\EOT\"#\n\
    \\f\n\
    \\EOT\EOT%\STX\SOH\DC2\EOT\202\EOT\EOT#\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\EOT\DC2\EOT\202\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\ACK\DC2\EOT\202\EOT\r\CAN\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\SOH\DC2\EOT\202\EOT\EM\RS\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\ETX\DC2\EOT\202\EOT!\"\n\
    \\f\n\
    \\EOT\EOT%\STX\STX\DC2\EOT\203\EOT\EOT#\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\EOT\DC2\EOT\203\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\ENQ\DC2\EOT\203\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\SOH\DC2\EOT\203\EOT\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\ETX\DC2\EOT\203\EOT!\"\n\
    \\172\SOH\n\
    \\STX\EOT&\DC2\ACK\209\EOT\NUL\210\EOT\SOH\SUB\157\SOH Commands to probe the state of connection.\n\
    \ When either client or broker doesn't receive commands for certain\n\
    \ amount of time, they will send a Ping probe.\n\
    \\n\
    \\v\n\
    \\ETX\EOT&\SOH\DC2\EOT\209\EOT\b\DC3\n\
    \\f\n\
    \\STX\EOT'\DC2\ACK\211\EOT\NUL\212\EOT\SOH\n\
    \\v\n\
    \\ETX\EOT'\SOH\DC2\EOT\211\EOT\b\DC3\n\
    \\f\n\
    \\STX\EOT(\DC2\ACK\214\EOT\NUL\219\EOT\SOH\n\
    \\v\n\
    \\ETX\EOT(\SOH\DC2\EOT\214\EOT\b\FS\n\
    \\f\n\
    \\EOT\EOT(\STX\NUL\DC2\EOT\215\EOT\b/\n\
    \\r\n\
    \\ENQ\EOT(\STX\NUL\EOT\DC2\EOT\215\EOT\b\DLE\n\
    \\r\n\
    \\ENQ\EOT(\STX\NUL\ENQ\DC2\EOT\215\EOT\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT(\STX\NUL\SOH\DC2\EOT\215\EOT\CAN\"\n\
    \\r\n\
    \\ENQ\EOT(\STX\NUL\ETX\DC2\EOT\215\EOT-.\n\
    \`\n\
    \\EOT\EOT(\STX\SOH\DC2\EOT\218\EOT\b/\SUBR required string topic_name         = 2;\n\
    \ required string subscription_name  = 3;\n\
    \\n\
    \\r\n\
    \\ENQ\EOT(\STX\SOH\EOT\DC2\EOT\218\EOT\b\DLE\n\
    \\r\n\
    \\ENQ\EOT(\STX\SOH\ENQ\DC2\EOT\218\EOT\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT(\STX\SOH\SOH\DC2\EOT\218\EOT\CAN#\n\
    \\r\n\
    \\ENQ\EOT(\STX\SOH\ETX\DC2\EOT\218\EOT-.\n\
    \\f\n\
    \\STX\EOT)\DC2\ACK\221\EOT\NUL\133\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT)\SOH\DC2\EOT\221\EOT\b$\n\
    \\f\n\
    \\EOT\EOT)\STX\NUL\DC2\EOT\222\EOT\b4\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\EOT\DC2\EOT\222\EOT\b\DLE\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\ENQ\DC2\EOT\222\EOT\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\SOH\DC2\EOT\222\EOT\CAN\"\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\ETX\DC2\EOT\222\EOT23\n\
    \\f\n\
    \\EOT\EOT)\STX\SOH\DC2\EOT\223\EOT\b4\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\EOT\DC2\EOT\223\EOT\b\DLE\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\ACK\DC2\EOT\223\EOT\DC1\FS\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\SOH\DC2\EOT\223\EOT\GS'\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\ETX\DC2\EOT\223\EOT23\n\
    \\f\n\
    \\EOT\EOT)\STX\STX\DC2\EOT\224\EOT\b4\n\
    \\r\n\
    \\ENQ\EOT)\STX\STX\EOT\DC2\EOT\224\EOT\b\DLE\n\
    \\r\n\
    \\ENQ\EOT)\STX\STX\ENQ\DC2\EOT\224\EOT\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT)\STX\STX\SOH\DC2\EOT\224\EOT\CAN%\n\
    \\r\n\
    \\ENQ\EOT)\STX\STX\ETX\DC2\EOT\224\EOT23\n\
    \H\n\
    \\EOT\EOT)\STX\ETX\DC2\EOT\227\EOT\b8\SUB:/ Total rate of messages delivered to the consumer. msg/s\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\ETX\EOT\DC2\EOT\227\EOT\b\DLE\n\
    \\r\n\
    \\ENQ\EOT)\STX\ETX\ENQ\DC2\EOT\227\EOT\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT)\STX\ETX\SOH\DC2\EOT\227\EOT\CAN\"\n\
    \\r\n\
    \\ENQ\EOT)\STX\ETX\ETX\DC2\EOT\227\EOT67\n\
    \D\n\
    \\EOT\EOT)\STX\EOT\DC2\EOT\230\EOT\b8\SUB6/ Total throughput delivered to the consumer. bytes/s\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\EOT\EOT\DC2\EOT\230\EOT\b\DLE\n\
    \\r\n\
    \\ENQ\EOT)\STX\EOT\ENQ\DC2\EOT\230\EOT\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT)\STX\EOT\SOH\DC2\EOT\230\EOT\CAN(\n\
    \\r\n\
    \\ENQ\EOT)\STX\EOT\ETX\DC2\EOT\230\EOT67\n\
    \K\n\
    \\EOT\EOT)\STX\ENQ\DC2\EOT\233\EOT\b8\SUB=/ Total rate of messages redelivered by this consumer. msg/s\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\ENQ\EOT\DC2\EOT\233\EOT\b\DLE\n\
    \\r\n\
    \\ENQ\EOT)\STX\ENQ\ENQ\DC2\EOT\233\EOT\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT)\STX\ENQ\SOH\DC2\EOT\233\EOT\CAN(\n\
    \\r\n\
    \\ENQ\EOT)\STX\ENQ\ETX\DC2\EOT\233\EOT67\n\
    \%\n\
    \\EOT\EOT)\STX\ACK\DC2\EOT\236\EOT\b8\SUB\ETB/ Name of the consumer\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\ACK\EOT\DC2\EOT\236\EOT\b\DLE\n\
    \\r\n\
    \\ENQ\EOT)\STX\ACK\ENQ\DC2\EOT\236\EOT\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT)\STX\ACK\SOH\DC2\EOT\236\EOT\CAN$\n\
    \\r\n\
    \\ENQ\EOT)\STX\ACK\ETX\DC2\EOT\236\EOT67\n\
    \E\n\
    \\EOT\EOT)\STX\a\DC2\EOT\239\EOT\b8\SUB7/ Number of available message permits for the consumer\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\a\EOT\DC2\EOT\239\EOT\b\DLE\n\
    \\r\n\
    \\ENQ\EOT)\STX\a\ENQ\DC2\EOT\239\EOT\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT)\STX\a\SOH\DC2\EOT\239\EOT\CAN(\n\
    \\r\n\
    \\ENQ\EOT)\STX\a\ETX\DC2\EOT\239\EOT67\n\
    \C\n\
    \\EOT\EOT)\STX\b\DC2\EOT\242\EOT\b8\SUB5/ Number of unacknowledged messages for the consumer\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\b\EOT\DC2\EOT\242\EOT\b\DLE\n\
    \\r\n\
    \\ENQ\EOT)\STX\b\ENQ\DC2\EOT\242\EOT\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT)\STX\b\SOH\DC2\EOT\242\EOT\CAN'\n\
    \\r\n\
    \\ENQ\EOT)\STX\b\ETX\DC2\EOT\242\EOT67\n\
    \d\n\
    \\EOT\EOT)\STX\t\DC2\EOT\245\EOT\b9\SUBV/ Flag to verify if consumer is blocked due to reaching threshold of unacked messages\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\t\EOT\DC2\EOT\245\EOT\b\DLE\n\
    \\r\n\
    \\ENQ\EOT)\STX\t\ENQ\DC2\EOT\245\EOT\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOT)\STX\t\SOH\DC2\EOT\245\EOT\SYN2\n\
    \\r\n\
    \\ENQ\EOT)\STX\t\ETX\DC2\EOT\245\EOT68\n\
    \)\n\
    \\EOT\EOT)\STX\n\
    \\DC2\EOT\248\EOT\b9\SUB\ESC/ Address of this consumer\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\n\
    \\EOT\DC2\EOT\248\EOT\b\DLE\n\
    \\r\n\
    \\ENQ\EOT)\STX\n\
    \\ENQ\DC2\EOT\248\EOT\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT)\STX\n\
    \\SOH\DC2\EOT\248\EOT\CAN\US\n\
    \\r\n\
    \\ENQ\EOT)\STX\n\
    \\ETX\DC2\EOT\248\EOT68\n\
    \(\n\
    \\EOT\EOT)\STX\v\DC2\EOT\251\EOT\b9\SUB\SUB/ Timestamp of connection\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\v\EOT\DC2\EOT\251\EOT\b\DLE\n\
    \\r\n\
    \\ENQ\EOT)\STX\v\ENQ\DC2\EOT\251\EOT\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT)\STX\v\SOH\DC2\EOT\251\EOT\CAN&\n\
    \\r\n\
    \\ENQ\EOT)\STX\v\ETX\DC2\EOT\251\EOT68\n\
    \M\n\
    \\EOT\EOT)\STX\f\DC2\EOT\254\EOT\b9\SUB?/ Whether this subscription is Exclusive or Shared or Failover\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\f\EOT\DC2\EOT\254\EOT\b\DLE\n\
    \\r\n\
    \\ENQ\EOT)\STX\f\ENQ\DC2\EOT\254\EOT\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT)\STX\f\SOH\DC2\EOT\254\EOT\CAN\FS\n\
    \\r\n\
    \\ENQ\EOT)\STX\f\ETX\DC2\EOT\254\EOT68\n\
    \K\n\
    \\EOT\EOT)\STX\r\DC2\EOT\129\ENQ\b9\SUB=/ Total rate of messages expired on this subscription. msg/s\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\r\EOT\DC2\EOT\129\ENQ\b\DLE\n\
    \\r\n\
    \\ENQ\EOT)\STX\r\ENQ\DC2\EOT\129\ENQ\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT)\STX\r\SOH\DC2\EOT\129\ENQ\CAN&\n\
    \\r\n\
    \\ENQ\EOT)\STX\r\ETX\DC2\EOT\129\ENQ68\n\
    \?\n\
    \\EOT\EOT)\STX\SO\DC2\EOT\132\ENQ\b9\SUB1/ Number of messages in the subscription backlog\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\SO\EOT\DC2\EOT\132\ENQ\b\DLE\n\
    \\r\n\
    \\ENQ\EOT)\STX\SO\ENQ\DC2\EOT\132\ENQ\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT)\STX\SO\SOH\DC2\EOT\132\ENQ\CAN\"\n\
    \\r\n\
    \\ENQ\EOT)\STX\SO\ETX\DC2\EOT\132\ENQ68\n\
    \\f\n\
    \\STX\EOT*\DC2\ACK\135\ENQ\NUL\138\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT*\SOH\DC2\EOT\135\ENQ\b\US\n\
    \\f\n\
    \\EOT\EOT*\STX\NUL\DC2\EOT\136\ENQ\EOT$\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\EOT\DC2\EOT\136\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\ENQ\DC2\EOT\136\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\SOH\DC2\EOT\136\ENQ\DC4\US\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\ETX\DC2\EOT\136\ENQ\"#\n\
    \\f\n\
    \\EOT\EOT*\STX\SOH\DC2\EOT\137\ENQ\EOT$\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\EOT\DC2\EOT\137\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\ENQ\DC2\EOT\137\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\SOH\DC2\EOT\137\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\ETX\DC2\EOT\137\ENQ\"#\n\
    \\f\n\
    \\STX\EOT+\DC2\ACK\140\ENQ\NUL\143\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT+\SOH\DC2\EOT\140\ENQ\b'\n\
    \\f\n\
    \\EOT\EOT+\STX\NUL\DC2\EOT\141\ENQ\EOT/\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\EOT\DC2\EOT\141\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\ACK\DC2\EOT\141\ENQ\r\SUB\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\SOH\DC2\EOT\141\ENQ\ESC*\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\ETX\DC2\EOT\141\ENQ-.\n\
    \\f\n\
    \\EOT\EOT+\STX\SOH\DC2\EOT\142\ENQ\EOT$\n\
    \\r\n\
    \\ENQ\EOT+\STX\SOH\EOT\DC2\EOT\142\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT+\STX\SOH\ENQ\DC2\EOT\142\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT+\STX\SOH\SOH\DC2\EOT\142\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT+\STX\SOH\ETX\DC2\EOT\142\ENQ\"#\n\
    \\f\n\
    \\STX\EOT,\DC2\ACK\145\ENQ\NUL\154\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT,\SOH\DC2\EOT\145\ENQ\b#\n\
    \\SO\n\
    \\EOT\EOT,\EOT\NUL\DC2\ACK\146\ENQ\EOT\150\ENQ\ENQ\n\
    \\r\n\
    \\ENQ\EOT,\EOT\NUL\SOH\DC2\EOT\146\ENQ\t\r\n\
    \\SO\n\
    \\ACK\EOT,\EOT\NUL\STX\NUL\DC2\EOT\147\ENQ\b\ETB\n\
    \\SI\n\
    \\a\EOT,\EOT\NUL\STX\NUL\SOH\DC2\EOT\147\ENQ\b\DC2\n\
    \\SI\n\
    \\a\EOT,\EOT\NUL\STX\NUL\STX\DC2\EOT\147\ENQ\NAK\SYN\n\
    \\SO\n\
    \\ACK\EOT,\EOT\NUL\STX\SOH\DC2\EOT\148\ENQ\b\ESC\n\
    \\SI\n\
    \\a\EOT,\EOT\NUL\STX\SOH\SOH\DC2\EOT\148\ENQ\b\SYN\n\
    \\SI\n\
    \\a\EOT,\EOT\NUL\STX\SOH\STX\DC2\EOT\148\ENQ\EM\SUB\n\
    \\SO\n\
    \\ACK\EOT,\EOT\NUL\STX\STX\DC2\EOT\149\ENQ\b\DLE\n\
    \\SI\n\
    \\a\EOT,\EOT\NUL\STX\STX\SOH\DC2\EOT\149\ENQ\b\v\n\
    \\SI\n\
    \\a\EOT,\EOT\NUL\STX\STX\STX\DC2\EOT\149\ENQ\SO\SI\n\
    \\f\n\
    \\EOT\EOT,\STX\NUL\DC2\EOT\151\ENQ\EOT&\n\
    \\r\n\
    \\ENQ\EOT,\STX\NUL\EOT\DC2\EOT\151\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT,\STX\NUL\ENQ\DC2\EOT\151\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT,\STX\NUL\SOH\DC2\EOT\151\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT,\STX\NUL\ETX\DC2\EOT\151\ENQ$%\n\
    \\f\n\
    \\EOT\EOT,\STX\SOH\DC2\EOT\152\ENQ\EOT%\n\
    \\r\n\
    \\ENQ\EOT,\STX\SOH\EOT\DC2\EOT\152\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT,\STX\SOH\ENQ\DC2\EOT\152\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT,\STX\SOH\SOH\DC2\EOT\152\ENQ\DC4\GS\n\
    \\r\n\
    \\ENQ\EOT,\STX\SOH\ETX\DC2\EOT\152\ENQ#$\n\
    \\f\n\
    \\EOT\EOT,\STX\STX\DC2\EOT\153\ENQ\EOT2\n\
    \\r\n\
    \\ENQ\EOT,\STX\STX\EOT\DC2\EOT\153\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT,\STX\STX\ACK\DC2\EOT\153\ENQ\r\DC1\n\
    \\r\n\
    \\ENQ\EOT,\STX\STX\SOH\DC2\EOT\153\ENQ\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT,\STX\STX\ETX\DC2\EOT\153\ENQ\EM\SUB\n\
    \\r\n\
    \\ENQ\EOT,\STX\STX\b\DC2\EOT\153\ENQ\ESC1\n\
    \\r\n\
    \\ENQ\EOT,\STX\STX\a\DC2\EOT\153\ENQ&0\n\
    \\f\n\
    \\STX\EOT-\DC2\ACK\156\ENQ\NUL\159\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT-\SOH\DC2\EOT\156\ENQ\b+\n\
    \\f\n\
    \\EOT\EOT-\STX\NUL\DC2\EOT\157\ENQ\EOT&\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\EOT\DC2\EOT\157\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\ENQ\DC2\EOT\157\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\SOH\DC2\EOT\157\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\ETX\DC2\EOT\157\ENQ$%\n\
    \\f\n\
    \\EOT\EOT-\STX\SOH\DC2\EOT\158\ENQ\EOT'\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\EOT\DC2\EOT\158\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\ENQ\DC2\EOT\158\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\SOH\DC2\EOT\158\ENQ\DC4\SUB\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\ETX\DC2\EOT\158\ENQ%&\n\
    \\f\n\
    \\STX\EOT.\DC2\ACK\161\ENQ\NUL\166\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT.\SOH\DC2\EOT\161\ENQ\b\CAN\n\
    \\f\n\
    \\EOT\EOT.\STX\NUL\DC2\EOT\162\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT.\STX\NUL\EOT\DC2\EOT\162\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT.\STX\NUL\ENQ\DC2\EOT\162\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT.\STX\NUL\SOH\DC2\EOT\162\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT.\STX\NUL\ETX\DC2\EOT\162\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT.\STX\SOH\DC2\EOT\163\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT.\STX\SOH\EOT\DC2\EOT\163\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT.\STX\SOH\ENQ\DC2\EOT\163\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT.\STX\SOH\SOH\DC2\EOT\163\ENQ\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT.\STX\SOH\ETX\DC2\EOT\163\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT.\STX\STX\DC2\EOT\165\ENQ\EOT&\n\
    \\r\n\
    \\ENQ\EOT.\STX\STX\EOT\DC2\EOT\165\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT.\STX\STX\ENQ\DC2\EOT\165\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT.\STX\STX\SOH\DC2\EOT\165\ENQ\DC3!\n\
    \\r\n\
    \\ENQ\EOT.\STX\STX\ETX\DC2\EOT\165\ENQ$%\n\
    \\f\n\
    \\STX\EOT/\DC2\ACK\168\ENQ\NUL\175\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT/\SOH\DC2\EOT\168\ENQ\b \n\
    \\f\n\
    \\EOT\EOT/\STX\NUL\DC2\EOT\169\ENQ\EOT(\n\
    \\r\n\
    \\ENQ\EOT/\STX\NUL\EOT\DC2\EOT\169\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT/\STX\NUL\ENQ\DC2\EOT\169\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT/\STX\NUL\SOH\DC2\EOT\169\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT/\STX\NUL\ETX\DC2\EOT\169\ENQ&'\n\
    \\f\n\
    \\EOT\EOT/\STX\SOH\DC2\EOT\170\ENQ\EOT(\n\
    \\r\n\
    \\ENQ\EOT/\STX\SOH\EOT\DC2\EOT\170\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT/\STX\SOH\ACK\DC2\EOT\170\ENQ\r\CAN\n\
    \\r\n\
    \\ENQ\EOT/\STX\SOH\SOH\DC2\EOT\170\ENQ\EM#\n\
    \\r\n\
    \\ENQ\EOT/\STX\SOH\ETX\DC2\EOT\170\ENQ&'\n\
    \\f\n\
    \\EOT\EOT/\STX\STX\DC2\EOT\171\ENQ\EOT(\n\
    \\r\n\
    \\ENQ\EOT/\STX\STX\EOT\DC2\EOT\171\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT/\STX\STX\ENQ\DC2\EOT\171\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT/\STX\STX\SOH\DC2\EOT\171\ENQ\DC4!\n\
    \\r\n\
    \\ENQ\EOT/\STX\STX\ETX\DC2\EOT\171\ENQ&'\n\
    \\f\n\
    \\EOT\EOT/\STX\ETX\DC2\EOT\173\ENQ\EOT(\n\
    \\r\n\
    \\ENQ\EOT/\STX\ETX\EOT\DC2\EOT\173\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT/\STX\ETX\ACK\DC2\EOT\173\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT/\STX\ETX\SOH\DC2\EOT\173\ENQ\DC4\SUB\n\
    \\r\n\
    \\ENQ\EOT/\STX\ETX\ETX\DC2\EOT\173\ENQ&'\n\
    \\f\n\
    \\EOT\EOT/\STX\EOT\DC2\EOT\174\ENQ\EOT(\n\
    \\r\n\
    \\ENQ\EOT/\STX\EOT\EOT\DC2\EOT\174\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT/\STX\EOT\ENQ\DC2\EOT\174\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT/\STX\EOT\SOH\DC2\EOT\174\ENQ\DC3!\n\
    \\r\n\
    \\ENQ\EOT/\STX\EOT\ETX\DC2\EOT\174\ENQ&'\n\
    \\f\n\
    \\STX\EOT0\DC2\ACK\177\ENQ\NUL\181\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT0\SOH\DC2\EOT\177\ENQ\b \n\
    \\f\n\
    \\EOT\EOT0\STX\NUL\DC2\EOT\178\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\EOT\DC2\EOT\178\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\ENQ\DC2\EOT\178\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\SOH\DC2\EOT\178\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\ETX\DC2\EOT\178\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT0\STX\SOH\DC2\EOT\179\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT0\STX\SOH\EOT\DC2\EOT\179\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\SOH\ENQ\DC2\EOT\179\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT0\STX\SOH\SOH\DC2\EOT\179\ENQ\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT0\STX\SOH\ETX\DC2\EOT\179\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT0\STX\STX\DC2\EOT\180\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT0\STX\STX\EOT\DC2\EOT\180\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\STX\ACK\DC2\EOT\180\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT0\STX\STX\SOH\DC2\EOT\180\ENQ\DC4\SUB\n\
    \\r\n\
    \\ENQ\EOT0\STX\STX\ETX\DC2\EOT\180\ENQ!\"\n\
    \\f\n\
    \\STX\EOT1\DC2\ACK\183\ENQ\NUL\189\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT1\SOH\DC2\EOT\183\ENQ\b(\n\
    \\f\n\
    \\EOT\EOT1\STX\NUL\DC2\EOT\184\ENQ\EOT(\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\EOT\DC2\EOT\184\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\ENQ\DC2\EOT\184\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\SOH\DC2\EOT\184\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\ETX\DC2\EOT\184\ENQ&'\n\
    \\f\n\
    \\EOT\EOT1\STX\SOH\DC2\EOT\185\ENQ\EOT(\n\
    \\r\n\
    \\ENQ\EOT1\STX\SOH\EOT\DC2\EOT\185\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT1\STX\SOH\ACK\DC2\EOT\185\ENQ\r\CAN\n\
    \\r\n\
    \\ENQ\EOT1\STX\SOH\SOH\DC2\EOT\185\ENQ\EM#\n\
    \\r\n\
    \\ENQ\EOT1\STX\SOH\ETX\DC2\EOT\185\ENQ&'\n\
    \\f\n\
    \\EOT\EOT1\STX\STX\DC2\EOT\186\ENQ\EOT(\n\
    \\r\n\
    \\ENQ\EOT1\STX\STX\EOT\DC2\EOT\186\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT1\STX\STX\ENQ\DC2\EOT\186\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT1\STX\STX\SOH\DC2\EOT\186\ENQ\DC4!\n\
    \\r\n\
    \\ENQ\EOT1\STX\STX\ETX\DC2\EOT\186\ENQ&'\n\
    \\f\n\
    \\EOT\EOT1\STX\ETX\DC2\EOT\188\ENQ\EOT(\n\
    \\r\n\
    \\ENQ\EOT1\STX\ETX\EOT\DC2\EOT\188\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT1\STX\ETX\ENQ\DC2\EOT\188\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT1\STX\ETX\SOH\DC2\EOT\188\ENQ\DC3!\n\
    \\r\n\
    \\ENQ\EOT1\STX\ETX\ETX\DC2\EOT\188\ENQ&'\n\
    \,\n\
    \\STX\ENQ\ENQ\DC2\ACK\193\ENQ\NUL\196\ENQ\SOH2\RS/ --- transaction related ---\n\
    \\n\
    \\v\n\
    \\ETX\ENQ\ENQ\SOH\DC2\EOT\193\ENQ\ENQ\SO\n\
    \\f\n\
    \\EOT\ENQ\ENQ\STX\NUL\DC2\EOT\194\ENQ\EOT\SI\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\NUL\SOH\DC2\EOT\194\ENQ\EOT\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\NUL\STX\DC2\EOT\194\ENQ\r\SO\n\
    \\f\n\
    \\EOT\ENQ\ENQ\STX\SOH\DC2\EOT\195\ENQ\EOT\SO\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\SOH\SOH\DC2\EOT\195\ENQ\EOT\t\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\SOH\STX\DC2\EOT\195\ENQ\f\r\n\
    \\f\n\
    \\STX\EOT2\DC2\ACK\198\ENQ\NUL\202\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT2\SOH\DC2\EOT\198\ENQ\b\NAK\n\
    \\f\n\
    \\EOT\EOT2\STX\NUL\DC2\EOT\199\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\EOT\DC2\EOT\199\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\ENQ\DC2\EOT\199\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\SOH\DC2\EOT\199\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\ETX\DC2\EOT\199\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT2\STX\SOH\DC2\EOT\200\ENQ\EOT6\n\
    \\r\n\
    \\ENQ\EOT2\STX\SOH\EOT\DC2\EOT\200\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT2\STX\SOH\ENQ\DC2\EOT\200\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT2\STX\SOH\SOH\DC2\EOT\200\ENQ\DC4#\n\
    \\r\n\
    \\ENQ\EOT2\STX\SOH\ETX\DC2\EOT\200\ENQ&'\n\
    \\r\n\
    \\ENQ\EOT2\STX\SOH\b\DC2\EOT\200\ENQ(5\n\
    \\r\n\
    \\ENQ\EOT2\STX\SOH\a\DC2\EOT\200\ENQ34\n\
    \\f\n\
    \\EOT\EOT2\STX\STX\DC2\EOT\201\ENQ\EOT,\n\
    \\r\n\
    \\ENQ\EOT2\STX\STX\EOT\DC2\EOT\201\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT2\STX\STX\ENQ\DC2\EOT\201\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT2\STX\STX\SOH\DC2\EOT\201\ENQ\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT2\STX\STX\ETX\DC2\EOT\201\ENQ\FS\GS\n\
    \\r\n\
    \\ENQ\EOT2\STX\STX\b\DC2\EOT\201\ENQ\RS+\n\
    \\r\n\
    \\ENQ\EOT2\STX\STX\a\DC2\EOT\201\ENQ)*\n\
    \\f\n\
    \\STX\EOT3\DC2\ACK\204\ENQ\NUL\210\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT3\SOH\DC2\EOT\204\ENQ\b\GS\n\
    \\f\n\
    \\EOT\EOT3\STX\NUL\DC2\EOT\205\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT3\STX\NUL\EOT\DC2\EOT\205\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT3\STX\NUL\ENQ\DC2\EOT\205\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT3\STX\NUL\SOH\DC2\EOT\205\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT3\STX\NUL\ETX\DC2\EOT\205\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT3\STX\SOH\DC2\EOT\206\ENQ\EOT7\n\
    \\r\n\
    \\ENQ\EOT3\STX\SOH\EOT\DC2\EOT\206\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT3\STX\SOH\ENQ\DC2\EOT\206\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT3\STX\SOH\SOH\DC2\EOT\206\ENQ\DC4$\n\
    \\r\n\
    \\ENQ\EOT3\STX\SOH\ETX\DC2\EOT\206\ENQ'(\n\
    \\r\n\
    \\ENQ\EOT3\STX\SOH\b\DC2\EOT\206\ENQ)6\n\
    \\r\n\
    \\ENQ\EOT3\STX\SOH\a\DC2\EOT\206\ENQ45\n\
    \\f\n\
    \\EOT\EOT3\STX\STX\DC2\EOT\207\ENQ\EOT6\n\
    \\r\n\
    \\ENQ\EOT3\STX\STX\EOT\DC2\EOT\207\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT3\STX\STX\ENQ\DC2\EOT\207\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT3\STX\STX\SOH\DC2\EOT\207\ENQ\DC4#\n\
    \\r\n\
    \\ENQ\EOT3\STX\STX\ETX\DC2\EOT\207\ENQ&'\n\
    \\r\n\
    \\ENQ\EOT3\STX\STX\b\DC2\EOT\207\ENQ(5\n\
    \\r\n\
    \\ENQ\EOT3\STX\STX\a\DC2\EOT\207\ENQ34\n\
    \\f\n\
    \\EOT\EOT3\STX\ETX\DC2\EOT\208\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT3\STX\ETX\EOT\DC2\EOT\208\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT3\STX\ETX\ACK\DC2\EOT\208\ENQ\r\CAN\n\
    \\r\n\
    \\ENQ\EOT3\STX\ETX\SOH\DC2\EOT\208\ENQ\EM\RS\n\
    \\r\n\
    \\ENQ\EOT3\STX\ETX\ETX\DC2\EOT\208\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT3\STX\EOT\DC2\EOT\209\ENQ\EOT \n\
    \\r\n\
    \\ENQ\EOT3\STX\EOT\EOT\DC2\EOT\209\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT3\STX\EOT\ENQ\DC2\EOT\209\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT3\STX\EOT\SOH\DC2\EOT\209\ENQ\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT3\STX\EOT\ETX\DC2\EOT\209\ENQ\RS\US\n\
    \\f\n\
    \\STX\EOT4\DC2\ACK\212\ENQ\NUL\217\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT4\SOH\DC2\EOT\212\ENQ\b \n\
    \\f\n\
    \\EOT\EOT4\STX\NUL\DC2\EOT\213\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\EOT\DC2\EOT\213\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\ENQ\DC2\EOT\213\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\SOH\DC2\EOT\213\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\ETX\DC2\EOT\213\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT4\STX\SOH\DC2\EOT\214\ENQ\EOT7\n\
    \\r\n\
    \\ENQ\EOT4\STX\SOH\EOT\DC2\EOT\214\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT4\STX\SOH\ENQ\DC2\EOT\214\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT4\STX\SOH\SOH\DC2\EOT\214\ENQ\DC4$\n\
    \\r\n\
    \\ENQ\EOT4\STX\SOH\ETX\DC2\EOT\214\ENQ'(\n\
    \\r\n\
    \\ENQ\EOT4\STX\SOH\b\DC2\EOT\214\ENQ)6\n\
    \\r\n\
    \\ENQ\EOT4\STX\SOH\a\DC2\EOT\214\ENQ45\n\
    \\f\n\
    \\EOT\EOT4\STX\STX\DC2\EOT\215\ENQ\EOT6\n\
    \\r\n\
    \\ENQ\EOT4\STX\STX\EOT\DC2\EOT\215\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT4\STX\STX\ENQ\DC2\EOT\215\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT4\STX\STX\SOH\DC2\EOT\215\ENQ\DC4#\n\
    \\r\n\
    \\ENQ\EOT4\STX\STX\ETX\DC2\EOT\215\ENQ&'\n\
    \\r\n\
    \\ENQ\EOT4\STX\STX\b\DC2\EOT\215\ENQ(5\n\
    \\r\n\
    \\ENQ\EOT4\STX\STX\a\DC2\EOT\215\ENQ34\n\
    \\f\n\
    \\EOT\EOT4\STX\ETX\DC2\EOT\216\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT4\STX\ETX\EOT\DC2\EOT\216\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT4\STX\ETX\ENQ\DC2\EOT\216\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT4\STX\ETX\SOH\DC2\EOT\216\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT4\STX\ETX\ETX\DC2\EOT\216\ENQ!\"\n\
    \\f\n\
    \\STX\EOT5\DC2\ACK\219\ENQ\NUL\225\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT5\SOH\DC2\EOT\219\ENQ\b(\n\
    \\f\n\
    \\EOT\EOT5\STX\NUL\DC2\EOT\220\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\EOT\DC2\EOT\220\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\ENQ\DC2\EOT\220\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\SOH\DC2\EOT\220\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\ETX\DC2\EOT\220\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT5\STX\SOH\DC2\EOT\221\ENQ\EOT7\n\
    \\r\n\
    \\ENQ\EOT5\STX\SOH\EOT\DC2\EOT\221\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT5\STX\SOH\ENQ\DC2\EOT\221\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT5\STX\SOH\SOH\DC2\EOT\221\ENQ\DC4$\n\
    \\r\n\
    \\ENQ\EOT5\STX\SOH\ETX\DC2\EOT\221\ENQ'(\n\
    \\r\n\
    \\ENQ\EOT5\STX\SOH\b\DC2\EOT\221\ENQ)6\n\
    \\r\n\
    \\ENQ\EOT5\STX\SOH\a\DC2\EOT\221\ENQ45\n\
    \\f\n\
    \\EOT\EOT5\STX\STX\DC2\EOT\222\ENQ\EOT6\n\
    \\r\n\
    \\ENQ\EOT5\STX\STX\EOT\DC2\EOT\222\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT5\STX\STX\ENQ\DC2\EOT\222\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT5\STX\STX\SOH\DC2\EOT\222\ENQ\DC4#\n\
    \\r\n\
    \\ENQ\EOT5\STX\STX\ETX\DC2\EOT\222\ENQ&'\n\
    \\r\n\
    \\ENQ\EOT5\STX\STX\b\DC2\EOT\222\ENQ(5\n\
    \\r\n\
    \\ENQ\EOT5\STX\STX\a\DC2\EOT\222\ENQ34\n\
    \\f\n\
    \\EOT\EOT5\STX\ETX\DC2\EOT\223\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT5\STX\ETX\EOT\DC2\EOT\223\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT5\STX\ETX\ACK\DC2\EOT\223\ENQ\r\CAN\n\
    \\r\n\
    \\ENQ\EOT5\STX\ETX\SOH\DC2\EOT\223\ENQ\EM\RS\n\
    \\r\n\
    \\ENQ\EOT5\STX\ETX\ETX\DC2\EOT\223\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT5\STX\EOT\DC2\EOT\224\ENQ\EOT \n\
    \\r\n\
    \\ENQ\EOT5\STX\EOT\EOT\DC2\EOT\224\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT5\STX\EOT\ENQ\DC2\EOT\224\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT5\STX\EOT\SOH\DC2\EOT\224\ENQ\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT5\STX\EOT\ETX\DC2\EOT\224\ENQ\RS\US\n\
    \\f\n\
    \\STX\EOT6\DC2\ACK\227\ENQ\NUL\230\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT6\SOH\DC2\EOT\227\ENQ\b\DC4\n\
    \\f\n\
    \\EOT\EOT6\STX\NUL\DC2\EOT\228\ENQ\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\EOT\DC2\EOT\228\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\ENQ\DC2\EOT\228\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\SOH\DC2\EOT\228\ENQ\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\ETX\DC2\EOT\228\ENQ\FS\GS\n\
    \\f\n\
    \\EOT\EOT6\STX\SOH\DC2\EOT\229\ENQ\EOT%\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\EOT\DC2\EOT\229\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\ENQ\DC2\EOT\229\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\SOH\DC2\EOT\229\ENQ\DC4 \n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\ETX\DC2\EOT\229\ENQ#$\n\
    \\f\n\
    \\STX\EOT7\DC2\ACK\231\ENQ\NUL\236\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT7\SOH\DC2\EOT\231\ENQ\b#\n\
    \\f\n\
    \\EOT\EOT7\STX\NUL\DC2\EOT\232\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\EOT\DC2\EOT\232\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\ENQ\DC2\EOT\232\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\SOH\DC2\EOT\232\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\ETX\DC2\EOT\232\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT7\STX\SOH\DC2\EOT\233\ENQ\EOT7\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\EOT\DC2\EOT\233\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\ENQ\DC2\EOT\233\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\SOH\DC2\EOT\233\ENQ\DC4$\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\ETX\DC2\EOT\233\ENQ'(\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\b\DC2\EOT\233\ENQ)6\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\a\DC2\EOT\233\ENQ45\n\
    \\f\n\
    \\EOT\EOT7\STX\STX\DC2\EOT\234\ENQ\EOT6\n\
    \\r\n\
    \\ENQ\EOT7\STX\STX\EOT\DC2\EOT\234\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT7\STX\STX\ENQ\DC2\EOT\234\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT7\STX\STX\SOH\DC2\EOT\234\ENQ\DC4#\n\
    \\r\n\
    \\ENQ\EOT7\STX\STX\ETX\DC2\EOT\234\ENQ&'\n\
    \\r\n\
    \\ENQ\EOT7\STX\STX\b\DC2\EOT\234\ENQ(5\n\
    \\r\n\
    \\ENQ\EOT7\STX\STX\a\DC2\EOT\234\ENQ34\n\
    \\f\n\
    \\EOT\EOT7\STX\ETX\DC2\EOT\235\ENQ\EOT+\n\
    \\r\n\
    \\ENQ\EOT7\STX\ETX\EOT\DC2\EOT\235\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT7\STX\ETX\ACK\DC2\EOT\235\ENQ\r\EM\n\
    \\r\n\
    \\ENQ\EOT7\STX\ETX\SOH\DC2\EOT\235\ENQ\SUB&\n\
    \\r\n\
    \\ENQ\EOT7\STX\ETX\ETX\DC2\EOT\235\ENQ)*\n\
    \\f\n\
    \\STX\EOT8\DC2\ACK\238\ENQ\NUL\244\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT8\SOH\DC2\EOT\238\ENQ\b+\n\
    \\f\n\
    \\EOT\EOT8\STX\NUL\DC2\EOT\239\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT8\STX\NUL\EOT\DC2\EOT\239\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT8\STX\NUL\ENQ\DC2\EOT\239\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT8\STX\NUL\SOH\DC2\EOT\239\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT8\STX\NUL\ETX\DC2\EOT\239\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT8\STX\SOH\DC2\EOT\240\ENQ\EOT7\n\
    \\r\n\
    \\ENQ\EOT8\STX\SOH\EOT\DC2\EOT\240\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT8\STX\SOH\ENQ\DC2\EOT\240\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT8\STX\SOH\SOH\DC2\EOT\240\ENQ\DC4$\n\
    \\r\n\
    \\ENQ\EOT8\STX\SOH\ETX\DC2\EOT\240\ENQ'(\n\
    \\r\n\
    \\ENQ\EOT8\STX\SOH\b\DC2\EOT\240\ENQ)6\n\
    \\r\n\
    \\ENQ\EOT8\STX\SOH\a\DC2\EOT\240\ENQ45\n\
    \\f\n\
    \\EOT\EOT8\STX\STX\DC2\EOT\241\ENQ\EOT6\n\
    \\r\n\
    \\ENQ\EOT8\STX\STX\EOT\DC2\EOT\241\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT8\STX\STX\ENQ\DC2\EOT\241\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT8\STX\STX\SOH\DC2\EOT\241\ENQ\DC4#\n\
    \\r\n\
    \\ENQ\EOT8\STX\STX\ETX\DC2\EOT\241\ENQ&'\n\
    \\r\n\
    \\ENQ\EOT8\STX\STX\b\DC2\EOT\241\ENQ(5\n\
    \\r\n\
    \\ENQ\EOT8\STX\STX\a\DC2\EOT\241\ENQ34\n\
    \\f\n\
    \\EOT\EOT8\STX\ETX\DC2\EOT\242\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT8\STX\ETX\EOT\DC2\EOT\242\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT8\STX\ETX\ACK\DC2\EOT\242\ENQ\r\CAN\n\
    \\r\n\
    \\ENQ\EOT8\STX\ETX\SOH\DC2\EOT\242\ENQ\EM\RS\n\
    \\r\n\
    \\ENQ\EOT8\STX\ETX\ETX\DC2\EOT\242\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT8\STX\EOT\DC2\EOT\243\ENQ\EOT \n\
    \\r\n\
    \\ENQ\EOT8\STX\EOT\EOT\DC2\EOT\243\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT8\STX\EOT\ENQ\DC2\EOT\243\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT8\STX\EOT\SOH\DC2\EOT\243\ENQ\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT8\STX\EOT\ETX\DC2\EOT\243\ENQ\RS\US\n\
    \\f\n\
    \\STX\EOT9\DC2\ACK\246\ENQ\NUL\251\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT9\SOH\DC2\EOT\246\ENQ\b\NAK\n\
    \\f\n\
    \\EOT\EOT9\STX\NUL\DC2\EOT\247\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\EOT\DC2\EOT\247\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\ENQ\DC2\EOT\247\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\SOH\DC2\EOT\247\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\ETX\DC2\EOT\247\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT9\STX\SOH\DC2\EOT\248\ENQ\EOT7\n\
    \\r\n\
    \\ENQ\EOT9\STX\SOH\EOT\DC2\EOT\248\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT9\STX\SOH\ENQ\DC2\EOT\248\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT9\STX\SOH\SOH\DC2\EOT\248\ENQ\DC4$\n\
    \\r\n\
    \\ENQ\EOT9\STX\SOH\ETX\DC2\EOT\248\ENQ'(\n\
    \\r\n\
    \\ENQ\EOT9\STX\SOH\b\DC2\EOT\248\ENQ)6\n\
    \\r\n\
    \\ENQ\EOT9\STX\SOH\a\DC2\EOT\248\ENQ45\n\
    \\f\n\
    \\EOT\EOT9\STX\STX\DC2\EOT\249\ENQ\EOT6\n\
    \\r\n\
    \\ENQ\EOT9\STX\STX\EOT\DC2\EOT\249\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT9\STX\STX\ENQ\DC2\EOT\249\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT9\STX\STX\SOH\DC2\EOT\249\ENQ\DC4#\n\
    \\r\n\
    \\ENQ\EOT9\STX\STX\ETX\DC2\EOT\249\ENQ&'\n\
    \\r\n\
    \\ENQ\EOT9\STX\STX\b\DC2\EOT\249\ENQ(5\n\
    \\r\n\
    \\ENQ\EOT9\STX\STX\a\DC2\EOT\249\ENQ34\n\
    \\f\n\
    \\EOT\EOT9\STX\ETX\DC2\EOT\250\ENQ\EOT&\n\
    \\r\n\
    \\ENQ\EOT9\STX\ETX\EOT\DC2\EOT\250\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT9\STX\ETX\ACK\DC2\EOT\250\ENQ\r\SYN\n\
    \\r\n\
    \\ENQ\EOT9\STX\ETX\SOH\DC2\EOT\250\ENQ\ETB!\n\
    \\r\n\
    \\ENQ\EOT9\STX\ETX\ETX\DC2\EOT\250\ENQ$%\n\
    \\f\n\
    \\STX\EOT:\DC2\ACK\253\ENQ\NUL\131\ACK\SOH\n\
    \\v\n\
    \\ETX\EOT:\SOH\DC2\EOT\253\ENQ\b\GS\n\
    \\f\n\
    \\EOT\EOT:\STX\NUL\DC2\EOT\254\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\EOT\DC2\EOT\254\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\ENQ\DC2\EOT\254\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\SOH\DC2\EOT\254\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\ETX\DC2\EOT\254\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT:\STX\SOH\DC2\EOT\255\ENQ\EOT7\n\
    \\r\n\
    \\ENQ\EOT:\STX\SOH\EOT\DC2\EOT\255\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT:\STX\SOH\ENQ\DC2\EOT\255\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT:\STX\SOH\SOH\DC2\EOT\255\ENQ\DC4$\n\
    \\r\n\
    \\ENQ\EOT:\STX\SOH\ETX\DC2\EOT\255\ENQ'(\n\
    \\r\n\
    \\ENQ\EOT:\STX\SOH\b\DC2\EOT\255\ENQ)6\n\
    \\r\n\
    \\ENQ\EOT:\STX\SOH\a\DC2\EOT\255\ENQ45\n\
    \\f\n\
    \\EOT\EOT:\STX\STX\DC2\EOT\128\ACK\EOT6\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\EOT\DC2\EOT\128\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\ENQ\DC2\EOT\128\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\SOH\DC2\EOT\128\ACK\DC4#\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\ETX\DC2\EOT\128\ACK&'\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\b\DC2\EOT\128\ACK(5\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\a\DC2\EOT\128\ACK34\n\
    \\f\n\
    \\EOT\EOT:\STX\ETX\DC2\EOT\129\ACK\EOT#\n\
    \\r\n\
    \\ENQ\EOT:\STX\ETX\EOT\DC2\EOT\129\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT:\STX\ETX\ACK\DC2\EOT\129\ACK\r\CAN\n\
    \\r\n\
    \\ENQ\EOT:\STX\ETX\SOH\DC2\EOT\129\ACK\EM\RS\n\
    \\r\n\
    \\ENQ\EOT:\STX\ETX\ETX\DC2\EOT\129\ACK!\"\n\
    \\f\n\
    \\EOT\EOT:\STX\EOT\DC2\EOT\130\ACK\EOT \n\
    \\r\n\
    \\ENQ\EOT:\STX\EOT\EOT\DC2\EOT\130\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT:\STX\EOT\ENQ\DC2\EOT\130\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT:\STX\EOT\SOH\DC2\EOT\130\ACK\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT:\STX\EOT\ETX\DC2\EOT\130\ACK\RS\US\n\
    \\f\n\
    \\STX\EOT;\DC2\ACK\133\ACK\NUL\139\ACK\SOH\n\
    \\v\n\
    \\ETX\EOT;\SOH\DC2\EOT\133\ACK\b \n\
    \\f\n\
    \\EOT\EOT;\STX\NUL\DC2\EOT\134\ACK\EOT#\n\
    \\r\n\
    \\ENQ\EOT;\STX\NUL\EOT\DC2\EOT\134\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT;\STX\NUL\ENQ\DC2\EOT\134\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT;\STX\NUL\SOH\DC2\EOT\134\ACK\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT;\STX\NUL\ETX\DC2\EOT\134\ACK!\"\n\
    \\f\n\
    \\EOT\EOT;\STX\SOH\DC2\EOT\135\ACK\EOT7\n\
    \\r\n\
    \\ENQ\EOT;\STX\SOH\EOT\DC2\EOT\135\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT;\STX\SOH\ENQ\DC2\EOT\135\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT;\STX\SOH\SOH\DC2\EOT\135\ACK\DC4$\n\
    \\r\n\
    \\ENQ\EOT;\STX\SOH\ETX\DC2\EOT\135\ACK'(\n\
    \\r\n\
    \\ENQ\EOT;\STX\SOH\b\DC2\EOT\135\ACK)6\n\
    \\r\n\
    \\ENQ\EOT;\STX\SOH\a\DC2\EOT\135\ACK45\n\
    \\f\n\
    \\EOT\EOT;\STX\STX\DC2\EOT\136\ACK\EOT6\n\
    \\r\n\
    \\ENQ\EOT;\STX\STX\EOT\DC2\EOT\136\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT;\STX\STX\ENQ\DC2\EOT\136\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT;\STX\STX\SOH\DC2\EOT\136\ACK\DC4#\n\
    \\r\n\
    \\ENQ\EOT;\STX\STX\ETX\DC2\EOT\136\ACK&'\n\
    \\r\n\
    \\ENQ\EOT;\STX\STX\b\DC2\EOT\136\ACK(5\n\
    \\r\n\
    \\ENQ\EOT;\STX\STX\a\DC2\EOT\136\ACK34\n\
    \\f\n\
    \\EOT\EOT;\STX\ETX\DC2\EOT\137\ACK\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT;\STX\ETX\EOT\DC2\EOT\137\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT;\STX\ETX\ENQ\DC2\EOT\137\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT;\STX\ETX\SOH\DC2\EOT\137\ACK\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT;\STX\ETX\ETX\DC2\EOT\137\ACK\FS\GS\n\
    \\f\n\
    \\EOT\EOT;\STX\EOT\DC2\EOT\138\ACK\EOT&\n\
    \\r\n\
    \\ENQ\EOT;\STX\EOT\EOT\DC2\EOT\138\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT;\STX\EOT\ACK\DC2\EOT\138\ACK\r\SYN\n\
    \\r\n\
    \\ENQ\EOT;\STX\EOT\SOH\DC2\EOT\138\ACK\ETB!\n\
    \\r\n\
    \\ENQ\EOT;\STX\EOT\ETX\DC2\EOT\138\ACK$%\n\
    \\f\n\
    \\STX\EOT<\DC2\ACK\141\ACK\NUL\147\ACK\SOH\n\
    \\v\n\
    \\ETX\EOT<\SOH\DC2\EOT\141\ACK\b(\n\
    \\f\n\
    \\EOT\EOT<\STX\NUL\DC2\EOT\142\ACK\EOT#\n\
    \\r\n\
    \\ENQ\EOT<\STX\NUL\EOT\DC2\EOT\142\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT<\STX\NUL\ENQ\DC2\EOT\142\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT<\STX\NUL\SOH\DC2\EOT\142\ACK\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT<\STX\NUL\ETX\DC2\EOT\142\ACK!\"\n\
    \\f\n\
    \\EOT\EOT<\STX\SOH\DC2\EOT\143\ACK\EOT7\n\
    \\r\n\
    \\ENQ\EOT<\STX\SOH\EOT\DC2\EOT\143\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT<\STX\SOH\ENQ\DC2\EOT\143\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT<\STX\SOH\SOH\DC2\EOT\143\ACK\DC4$\n\
    \\r\n\
    \\ENQ\EOT<\STX\SOH\ETX\DC2\EOT\143\ACK'(\n\
    \\r\n\
    \\ENQ\EOT<\STX\SOH\b\DC2\EOT\143\ACK)6\n\
    \\r\n\
    \\ENQ\EOT<\STX\SOH\a\DC2\EOT\143\ACK45\n\
    \\f\n\
    \\EOT\EOT<\STX\STX\DC2\EOT\144\ACK\EOT6\n\
    \\r\n\
    \\ENQ\EOT<\STX\STX\EOT\DC2\EOT\144\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT<\STX\STX\ENQ\DC2\EOT\144\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT<\STX\STX\SOH\DC2\EOT\144\ACK\DC4#\n\
    \\r\n\
    \\ENQ\EOT<\STX\STX\ETX\DC2\EOT\144\ACK&'\n\
    \\r\n\
    \\ENQ\EOT<\STX\STX\b\DC2\EOT\144\ACK(5\n\
    \\r\n\
    \\ENQ\EOT<\STX\STX\a\DC2\EOT\144\ACK34\n\
    \\f\n\
    \\EOT\EOT<\STX\ETX\DC2\EOT\145\ACK\EOT#\n\
    \\r\n\
    \\ENQ\EOT<\STX\ETX\EOT\DC2\EOT\145\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT<\STX\ETX\ACK\DC2\EOT\145\ACK\r\CAN\n\
    \\r\n\
    \\ENQ\EOT<\STX\ETX\SOH\DC2\EOT\145\ACK\EM\RS\n\
    \\r\n\
    \\ENQ\EOT<\STX\ETX\ETX\DC2\EOT\145\ACK!\"\n\
    \\f\n\
    \\EOT\EOT<\STX\EOT\DC2\EOT\146\ACK\EOT \n\
    \\r\n\
    \\ENQ\EOT<\STX\EOT\EOT\DC2\EOT\146\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT<\STX\EOT\ENQ\DC2\EOT\146\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT<\STX\EOT\SOH\DC2\EOT\146\ACK\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT<\STX\EOT\ETX\DC2\EOT\146\ACK\RS\US\n\
    \\f\n\
    \\STX\EOT=\DC2\ACK\149\ACK\NUL\155\ACK\SOH\n\
    \\v\n\
    \\ETX\EOT=\SOH\DC2\EOT\149\ACK\b#\n\
    \\f\n\
    \\EOT\EOT=\STX\NUL\DC2\EOT\150\ACK\EOT#\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\EOT\DC2\EOT\150\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\ENQ\DC2\EOT\150\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\SOH\DC2\EOT\150\ACK\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\ETX\DC2\EOT\150\ACK!\"\n\
    \\f\n\
    \\EOT\EOT=\STX\SOH\DC2\EOT\151\ACK\EOT7\n\
    \\r\n\
    \\ENQ\EOT=\STX\SOH\EOT\DC2\EOT\151\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT=\STX\SOH\ENQ\DC2\EOT\151\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT=\STX\SOH\SOH\DC2\EOT\151\ACK\DC4$\n\
    \\r\n\
    \\ENQ\EOT=\STX\SOH\ETX\DC2\EOT\151\ACK'(\n\
    \\r\n\
    \\ENQ\EOT=\STX\SOH\b\DC2\EOT\151\ACK)6\n\
    \\r\n\
    \\ENQ\EOT=\STX\SOH\a\DC2\EOT\151\ACK45\n\
    \\f\n\
    \\EOT\EOT=\STX\STX\DC2\EOT\152\ACK\EOT6\n\
    \\r\n\
    \\ENQ\EOT=\STX\STX\EOT\DC2\EOT\152\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT=\STX\STX\ENQ\DC2\EOT\152\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT=\STX\STX\SOH\DC2\EOT\152\ACK\DC4#\n\
    \\r\n\
    \\ENQ\EOT=\STX\STX\ETX\DC2\EOT\152\ACK&'\n\
    \\r\n\
    \\ENQ\EOT=\STX\STX\b\DC2\EOT\152\ACK(5\n\
    \\r\n\
    \\ENQ\EOT=\STX\STX\a\DC2\EOT\152\ACK34\n\
    \\f\n\
    \\EOT\EOT=\STX\ETX\DC2\EOT\153\ACK\EOT*\n\
    \\r\n\
    \\ENQ\EOT=\STX\ETX\EOT\DC2\EOT\153\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT=\STX\ETX\ACK\DC2\EOT\153\ACK\r\EM\n\
    \\r\n\
    \\ENQ\EOT=\STX\ETX\SOH\DC2\EOT\153\ACK\SUB&\n\
    \\r\n\
    \\ENQ\EOT=\STX\ETX\ETX\DC2\EOT\153\ACK()\n\
    \\f\n\
    \\EOT\EOT=\STX\EOT\DC2\EOT\154\ACK\EOT&\n\
    \\r\n\
    \\ENQ\EOT=\STX\EOT\EOT\DC2\EOT\154\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT=\STX\EOT\ACK\DC2\EOT\154\ACK\r\SYN\n\
    \\r\n\
    \\ENQ\EOT=\STX\EOT\SOH\DC2\EOT\154\ACK\ETB!\n\
    \\r\n\
    \\ENQ\EOT=\STX\EOT\ETX\DC2\EOT\154\ACK$%\n\
    \\f\n\
    \\STX\EOT>\DC2\ACK\157\ACK\NUL\163\ACK\SOH\n\
    \\v\n\
    \\ETX\EOT>\SOH\DC2\EOT\157\ACK\b+\n\
    \\f\n\
    \\EOT\EOT>\STX\NUL\DC2\EOT\158\ACK\EOT#\n\
    \\r\n\
    \\ENQ\EOT>\STX\NUL\EOT\DC2\EOT\158\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT>\STX\NUL\ENQ\DC2\EOT\158\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT>\STX\NUL\SOH\DC2\EOT\158\ACK\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT>\STX\NUL\ETX\DC2\EOT\158\ACK!\"\n\
    \\f\n\
    \\EOT\EOT>\STX\SOH\DC2\EOT\159\ACK\EOT7\n\
    \\r\n\
    \\ENQ\EOT>\STX\SOH\EOT\DC2\EOT\159\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT>\STX\SOH\ENQ\DC2\EOT\159\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT>\STX\SOH\SOH\DC2\EOT\159\ACK\DC4$\n\
    \\r\n\
    \\ENQ\EOT>\STX\SOH\ETX\DC2\EOT\159\ACK'(\n\
    \\r\n\
    \\ENQ\EOT>\STX\SOH\b\DC2\EOT\159\ACK)6\n\
    \\r\n\
    \\ENQ\EOT>\STX\SOH\a\DC2\EOT\159\ACK45\n\
    \\f\n\
    \\EOT\EOT>\STX\STX\DC2\EOT\160\ACK\EOT6\n\
    \\r\n\
    \\ENQ\EOT>\STX\STX\EOT\DC2\EOT\160\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT>\STX\STX\ENQ\DC2\EOT\160\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT>\STX\STX\SOH\DC2\EOT\160\ACK\DC4#\n\
    \\r\n\
    \\ENQ\EOT>\STX\STX\ETX\DC2\EOT\160\ACK&'\n\
    \\r\n\
    \\ENQ\EOT>\STX\STX\b\DC2\EOT\160\ACK(5\n\
    \\r\n\
    \\ENQ\EOT>\STX\STX\a\DC2\EOT\160\ACK34\n\
    \\f\n\
    \\EOT\EOT>\STX\ETX\DC2\EOT\161\ACK\EOT#\n\
    \\r\n\
    \\ENQ\EOT>\STX\ETX\EOT\DC2\EOT\161\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT>\STX\ETX\ACK\DC2\EOT\161\ACK\r\CAN\n\
    \\r\n\
    \\ENQ\EOT>\STX\ETX\SOH\DC2\EOT\161\ACK\EM\RS\n\
    \\r\n\
    \\ENQ\EOT>\STX\ETX\ETX\DC2\EOT\161\ACK!\"\n\
    \\f\n\
    \\EOT\EOT>\STX\EOT\DC2\EOT\162\ACK\EOT \n\
    \\r\n\
    \\ENQ\EOT>\STX\EOT\EOT\DC2\EOT\162\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT>\STX\EOT\ENQ\DC2\EOT\162\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT>\STX\EOT\SOH\DC2\EOT\162\ACK\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT>\STX\EOT\ETX\DC2\EOT\162\ACK\RS\US\n\
    \\f\n\
    \\STX\EOT?\DC2\ACK\165\ACK\NUL\194\a\SOH\n\
    \\v\n\
    \\ETX\EOT?\SOH\DC2\EOT\165\ACK\b\DC3\n\
    \\SO\n\
    \\EOT\EOT?\EOT\NUL\DC2\ACK\166\ACK\EOT\248\ACK\ENQ\n\
    \\r\n\
    \\ENQ\EOT?\EOT\NUL\SOH\DC2\EOT\166\ACK\t\r\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\NUL\DC2\EOT\167\ACK\b\CAN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\NUL\SOH\DC2\EOT\167\ACK\b\SI\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\NUL\STX\DC2\EOT\167\ACK\SYN\ETB\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\SOH\DC2\EOT\168\ACK\b\CAN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\SOH\SOH\DC2\EOT\168\ACK\b\DC1\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\SOH\STX\DC2\EOT\168\ACK\SYN\ETB\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\STX\DC2\EOT\169\ACK\b\CAN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\STX\SOH\DC2\EOT\169\ACK\b\DC1\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\STX\STX\DC2\EOT\169\ACK\SYN\ETB\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\ETX\DC2\EOT\171\ACK\b\CAN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\ETX\SOH\DC2\EOT\171\ACK\b\DLE\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\ETX\STX\DC2\EOT\171\ACK\SYN\ETB\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\EOT\DC2\EOT\173\ACK\b\CAN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\EOT\SOH\DC2\EOT\173\ACK\b\f\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\EOT\STX\DC2\EOT\173\ACK\SYN\ETB\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\ENQ\DC2\EOT\174\ACK\b\CAN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\ENQ\SOH\DC2\EOT\174\ACK\b\DC4\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\ENQ\STX\DC2\EOT\174\ACK\SYN\ETB\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\ACK\DC2\EOT\175\ACK\b\CAN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\ACK\SOH\DC2\EOT\175\ACK\b\DC2\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\ACK\STX\DC2\EOT\175\ACK\SYN\ETB\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\a\DC2\EOT\177\ACK\b\CAN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\a\SOH\DC2\EOT\177\ACK\b\SI\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\a\STX\DC2\EOT\177\ACK\SYN\ETB\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\b\DC2\EOT\178\ACK\b\EM\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\b\SOH\DC2\EOT\178\ACK\b\v\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\b\STX\DC2\EOT\178\ACK\SYN\CAN\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\t\DC2\EOT\179\ACK\b\EM\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\t\SOH\DC2\EOT\179\ACK\b\f\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\t\STX\DC2\EOT\179\ACK\SYN\CAN\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\n\
    \\DC2\EOT\181\ACK\b\EM\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\n\
    \\SOH\DC2\EOT\181\ACK\b\DC3\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\n\
    \\STX\DC2\EOT\181\ACK\SYN\CAN\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\v\DC2\EOT\183\ACK\b\EM\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\v\SOH\DC2\EOT\183\ACK\b\SI\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\v\STX\DC2\EOT\183\ACK\SYN\CAN\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\f\DC2\EOT\184\ACK\b\EM\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\f\SOH\DC2\EOT\184\ACK\b\r\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\f\STX\DC2\EOT\184\ACK\SYN\CAN\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\r\DC2\EOT\186\ACK\b\FS\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\r\SOH\DC2\EOT\186\ACK\b\SYN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\r\STX\DC2\EOT\186\ACK\EM\ESC\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\SO\DC2\EOT\187\ACK\b\FS\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\SO\SOH\DC2\EOT\187\ACK\b\SYN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\SO\STX\DC2\EOT\187\ACK\EM\ESC\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\SI\DC2\EOT\189\ACK\b\RS\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\SI\SOH\DC2\EOT\189\ACK\b\CAN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\SI\STX\DC2\EOT\189\ACK\ESC\GS\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\DLE\DC2\EOT\191\ACK\b\DC2\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\DLE\SOH\DC2\EOT\191\ACK\b\f\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\DLE\STX\DC2\EOT\191\ACK\SI\DC1\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\DC1\DC2\EOT\192\ACK\b\DC2\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\DC1\SOH\DC2\EOT\192\ACK\b\f\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\DC1\STX\DC2\EOT\192\ACK\SI\DC1\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\DC2\DC2\EOT\194\ACK\b/\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\DC2\SOH\DC2\EOT\194\ACK\b)\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\DC2\STX\DC2\EOT\194\ACK,.\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\DC3\DC2\EOT\196\ACK\b,\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\DC3\SOH\DC2\EOT\196\ACK\b\FS\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\DC3\STX\DC2\EOT\196\ACK)+\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\DC4\DC2\EOT\197\ACK\b,\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\DC4\SOH\DC2\EOT\197\ACK\b%\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\DC4\STX\DC2\EOT\197\ACK)+\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\NAK\DC2\EOT\199\ACK\b\RS\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\NAK\SOH\DC2\EOT\199\ACK\b\SO\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\NAK\STX\DC2\EOT\199\ACK\ESC\GS\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\SYN\DC2\EOT\200\ACK\b\RS\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\SYN\SOH\DC2\EOT\200\ACK\b\ETB\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\SYN\STX\DC2\EOT\200\ACK\ESC\GS\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\ETB\DC2\EOT\202\ACK\b#\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\ETB\SOH\DC2\EOT\202\ACK\b\SYN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\ETB\STX\DC2\EOT\202\ACK \"\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\CAN\DC2\EOT\203\ACK\b(\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\CAN\SOH\DC2\EOT\203\ACK\b\US\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\CAN\STX\DC2\EOT\203\ACK%'\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\EM\DC2\EOT\205\ACK\b\"\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\EM\SOH\DC2\EOT\205\ACK\b\FS\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\EM\STX\DC2\EOT\205\ACK\US!\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\SUB\DC2\EOT\207\ACK\b\DC2\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\SUB\SOH\DC2\EOT\207\ACK\b\f\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\SUB\STX\DC2\EOT\207\ACK\SI\DC1\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\ESC\DC2\EOT\209\ACK\b!\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\ESC\SOH\DC2\EOT\209\ACK\b\ESC\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\ESC\STX\DC2\EOT\209\ACK\RS \n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\FS\DC2\EOT\210\ACK\b*\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\FS\SOH\DC2\EOT\210\ACK\b$\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\FS\STX\DC2\EOT\210\ACK')\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\GS\DC2\EOT\212\ACK\b$\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\GS\SOH\DC2\EOT\212\ACK\b\RS\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\GS\STX\DC2\EOT\212\ACK!#\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\RS\DC2\EOT\215\ACK\b1\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\RS\SOH\DC2\EOT\215\ACK\b\US\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\RS\STX\DC2\EOT\215\ACK.0\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\US\DC2\EOT\216\ACK\b2\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\US\SOH\DC2\EOT\216\ACK\b(\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\US\STX\DC2\EOT\216\ACK/1\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX \DC2\EOT\218\ACK\b\CAN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX \SOH\DC2\EOT\218\ACK\b\DC2\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX \STX\DC2\EOT\218\ACK\NAK\ETB\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX!\DC2\EOT\219\ACK\b!\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX!\SOH\DC2\EOT\219\ACK\b\ESC\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX!\STX\DC2\EOT\219\ACK\RS \n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\"\DC2\EOT\221\ACK\b\FS\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\"\SOH\DC2\EOT\221\ACK\b\SYN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\"\STX\DC2\EOT\221\ACK\EM\ESC\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX#\DC2\EOT\222\ACK\b\ESC\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX#\SOH\DC2\EOT\222\ACK\b\NAK\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX#\STX\DC2\EOT\222\ACK\CAN\SUB\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX$\DC2\EOT\224\ACK\b\SUB\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX$\SOH\DC2\EOT\224\ACK\b\DC4\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX$\STX\DC2\EOT\224\ACK\ETB\EM\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX%\DC2\EOT\226\ACK\b\"\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX%\SOH\DC2\EOT\226\ACK\b\FS\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX%\STX\DC2\EOT\226\ACK\US!\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX&\DC2\EOT\227\ACK\b+\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX&\SOH\DC2\EOT\227\ACK\b%\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX&\STX\DC2\EOT\227\ACK(*\n\
    \%\n\
    \\ACK\EOT?\EOT\NUL\STX'\DC2\EOT\230\ACK\b\NAK\SUB\NAK transaction related\n\
    \\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX'\SOH\DC2\EOT\230\ACK\b\SI\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX'\STX\DC2\EOT\230\ACK\DC2\DC4\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX(\DC2\EOT\231\ACK\b\RS\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX(\SOH\DC2\EOT\231\ACK\b\CAN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX(\STX\DC2\EOT\231\ACK\ESC\GS\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX)\DC2\EOT\233\ACK\b\"\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX)\SOH\DC2\EOT\233\ACK\b\FS\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX)\STX\DC2\EOT\233\ACK\US!\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX*\DC2\EOT\234\ACK\b+\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX*\SOH\DC2\EOT\234\ACK\b%\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX*\STX\DC2\EOT\234\ACK(*\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX+\DC2\EOT\236\ACK\b%\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX+\SOH\DC2\EOT\236\ACK\b\US\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX+\STX\DC2\EOT\236\ACK\"$\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX,\DC2\EOT\237\ACK\b.\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX,\SOH\DC2\EOT\237\ACK\b(\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX,\STX\DC2\EOT\237\ACK+-\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX-\DC2\EOT\239\ACK\b\NAK\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX-\SOH\DC2\EOT\239\ACK\b\SI\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX-\STX\DC2\EOT\239\ACK\DC2\DC4\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX.\DC2\EOT\240\ACK\b\RS\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX.\SOH\DC2\EOT\240\ACK\b\CAN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX.\STX\DC2\EOT\240\ACK\ESC\GS\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX/\DC2\EOT\242\ACK\b\"\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX/\SOH\DC2\EOT\242\ACK\b\FS\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX/\STX\DC2\EOT\242\ACK\US!\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX0\DC2\EOT\243\ACK\b+\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX0\SOH\DC2\EOT\243\ACK\b%\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX0\STX\DC2\EOT\243\ACK(*\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX1\DC2\EOT\245\ACK\b%\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX1\SOH\DC2\EOT\245\ACK\b\US\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX1\STX\DC2\EOT\245\ACK\"$\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX2\DC2\EOT\246\ACK\b.\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX2\SOH\DC2\EOT\246\ACK\b(\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX2\STX\DC2\EOT\246\ACK+-\n\
    \\f\n\
    \\EOT\EOT?\STX\NUL\DC2\EOT\251\ACK\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT?\STX\NUL\EOT\DC2\EOT\251\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\NUL\ACK\DC2\EOT\251\ACK\r\DC1\n\
    \\r\n\
    \\ENQ\EOT?\STX\NUL\SOH\DC2\EOT\251\ACK\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT?\STX\NUL\ETX\DC2\EOT\251\ACK\EM\SUB\n\
    \\f\n\
    \\EOT\EOT?\STX\SOH\DC2\EOT\253\ACK\EOT1\n\
    \\r\n\
    \\ENQ\EOT?\STX\SOH\EOT\DC2\EOT\253\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\SOH\ACK\DC2\EOT\253\ACK\r\ESC\n\
    \\r\n\
    \\ENQ\EOT?\STX\SOH\SOH\DC2\EOT\253\ACK\FS#\n\
    \\r\n\
    \\ENQ\EOT?\STX\SOH\ETX\DC2\EOT\253\ACK/0\n\
    \\f\n\
    \\EOT\EOT?\STX\STX\DC2\EOT\254\ACK\EOT1\n\
    \\r\n\
    \\ENQ\EOT?\STX\STX\EOT\DC2\EOT\254\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\STX\ACK\DC2\EOT\254\ACK\r\GS\n\
    \\r\n\
    \\ENQ\EOT?\STX\STX\SOH\DC2\EOT\254\ACK\RS'\n\
    \\r\n\
    \\ENQ\EOT?\STX\STX\ETX\DC2\EOT\254\ACK/0\n\
    \\f\n\
    \\EOT\EOT?\STX\ETX\DC2\EOT\128\a\EOT1\n\
    \\r\n\
    \\ENQ\EOT?\STX\ETX\EOT\DC2\EOT\128\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\ETX\ACK\DC2\EOT\128\a\r\GS\n\
    \\r\n\
    \\ENQ\EOT?\STX\ETX\SOH\DC2\EOT\128\a\RS'\n\
    \\r\n\
    \\ENQ\EOT?\STX\ETX\ETX\DC2\EOT\128\a/0\n\
    \\f\n\
    \\EOT\EOT?\STX\EOT\DC2\EOT\129\a\EOT1\n\
    \\r\n\
    \\ENQ\EOT?\STX\EOT\EOT\DC2\EOT\129\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\EOT\ACK\DC2\EOT\129\a\r\FS\n\
    \\r\n\
    \\ENQ\EOT?\STX\EOT\SOH\DC2\EOT\129\a\GS%\n\
    \\r\n\
    \\ENQ\EOT?\STX\EOT\ETX\DC2\EOT\129\a/0\n\
    \\f\n\
    \\EOT\EOT?\STX\ENQ\DC2\EOT\130\a\EOT1\n\
    \\r\n\
    \\ENQ\EOT?\STX\ENQ\EOT\DC2\EOT\130\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\ENQ\ACK\DC2\EOT\130\a\r\CAN\n\
    \\r\n\
    \\ENQ\EOT?\STX\ENQ\SOH\DC2\EOT\130\a\EM\GS\n\
    \\r\n\
    \\ENQ\EOT?\STX\ENQ\ETX\DC2\EOT\130\a/0\n\
    \\f\n\
    \\EOT\EOT?\STX\ACK\DC2\EOT\131\a\EOT1\n\
    \\r\n\
    \\ENQ\EOT?\STX\ACK\EOT\DC2\EOT\131\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\ACK\ACK\DC2\EOT\131\a\r\US\n\
    \\r\n\
    \\ENQ\EOT?\STX\ACK\SOH\DC2\EOT\131\a ,\n\
    \\r\n\
    \\ENQ\EOT?\STX\ACK\ETX\DC2\EOT\131\a/0\n\
    \\f\n\
    \\EOT\EOT?\STX\a\DC2\EOT\132\a\EOT1\n\
    \\r\n\
    \\ENQ\EOT?\STX\a\EOT\DC2\EOT\132\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\a\ACK\DC2\EOT\132\a\r\GS\n\
    \\r\n\
    \\ENQ\EOT?\STX\a\SOH\DC2\EOT\132\a\RS(\n\
    \\r\n\
    \\ENQ\EOT?\STX\a\ETX\DC2\EOT\132\a/0\n\
    \\f\n\
    \\EOT\EOT?\STX\b\DC2\EOT\133\a\EOT1\n\
    \\r\n\
    \\ENQ\EOT?\STX\b\EOT\DC2\EOT\133\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\b\ACK\DC2\EOT\133\a\r\ESC\n\
    \\r\n\
    \\ENQ\EOT?\STX\b\SOH\DC2\EOT\133\a\FS#\n\
    \\r\n\
    \\ENQ\EOT?\STX\b\ETX\DC2\EOT\133\a/0\n\
    \\f\n\
    \\EOT\EOT?\STX\t\DC2\EOT\134\a\EOT2\n\
    \\r\n\
    \\ENQ\EOT?\STX\t\EOT\DC2\EOT\134\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\t\ACK\DC2\EOT\134\a\r\ETB\n\
    \\r\n\
    \\ENQ\EOT?\STX\t\SOH\DC2\EOT\134\a\CAN\ESC\n\
    \\r\n\
    \\ENQ\EOT?\STX\t\ETX\DC2\EOT\134\a/1\n\
    \\f\n\
    \\EOT\EOT?\STX\n\
    \\DC2\EOT\135\a\EOT2\n\
    \\r\n\
    \\ENQ\EOT?\STX\n\
    \\EOT\DC2\EOT\135\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\n\
    \\ACK\DC2\EOT\135\a\r\CAN\n\
    \\r\n\
    \\ENQ\EOT?\STX\n\
    \\SOH\DC2\EOT\135\a\EM\GS\n\
    \\r\n\
    \\ENQ\EOT?\STX\n\
    \\ETX\DC2\EOT\135\a/1\n\
    \\f\n\
    \\EOT\EOT?\STX\v\DC2\EOT\136\a\EOT2\n\
    \\r\n\
    \\ENQ\EOT?\STX\v\EOT\DC2\EOT\136\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\v\ACK\DC2\EOT\136\a\r\US\n\
    \\r\n\
    \\ENQ\EOT?\STX\v\SOH\DC2\EOT\136\a +\n\
    \\r\n\
    \\ENQ\EOT?\STX\v\ETX\DC2\EOT\136\a/1\n\
    \\f\n\
    \\EOT\EOT?\STX\f\DC2\EOT\138\a\EOT2\n\
    \\r\n\
    \\ENQ\EOT?\STX\f\EOT\DC2\EOT\138\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\f\ACK\DC2\EOT\138\a\r\ESC\n\
    \\r\n\
    \\ENQ\EOT?\STX\f\SOH\DC2\EOT\138\a\FS#\n\
    \\r\n\
    \\ENQ\EOT?\STX\f\ETX\DC2\EOT\138\a/1\n\
    \\f\n\
    \\EOT\EOT?\STX\r\DC2\EOT\139\a\EOT2\n\
    \\r\n\
    \\ENQ\EOT?\STX\r\EOT\DC2\EOT\139\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\r\ACK\DC2\EOT\139\a\r\EM\n\
    \\r\n\
    \\ENQ\EOT?\STX\r\SOH\DC2\EOT\139\a\SUB\US\n\
    \\r\n\
    \\ENQ\EOT?\STX\r\ETX\DC2\EOT\139\a/1\n\
    \\f\n\
    \\EOT\EOT?\STX\SO\DC2\EOT\141\a\EOT6\n\
    \\r\n\
    \\ENQ\EOT?\STX\SO\EOT\DC2\EOT\141\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\SO\ACK\DC2\EOT\141\a\r!\n\
    \\r\n\
    \\ENQ\EOT?\STX\SO\SOH\DC2\EOT\141\a\"0\n\
    \\r\n\
    \\ENQ\EOT?\STX\SO\ETX\DC2\EOT\141\a35\n\
    \\f\n\
    \\EOT\EOT?\STX\SI\DC2\EOT\142\a\EOT6\n\
    \\r\n\
    \\ENQ\EOT?\STX\SI\EOT\DC2\EOT\142\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\SI\ACK\DC2\EOT\142\a\r!\n\
    \\r\n\
    \\ENQ\EOT?\STX\SI\SOH\DC2\EOT\142\a\"0\n\
    \\r\n\
    \\ENQ\EOT?\STX\SI\ETX\DC2\EOT\142\a35\n\
    \\f\n\
    \\EOT\EOT?\STX\DLE\DC2\EOT\144\a\EOT:\n\
    \\r\n\
    \\ENQ\EOT?\STX\DLE\EOT\DC2\EOT\144\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\DLE\ACK\DC2\EOT\144\a\r#\n\
    \\r\n\
    \\ENQ\EOT?\STX\DLE\SOH\DC2\EOT\144\a$4\n\
    \\r\n\
    \\ENQ\EOT?\STX\DLE\ETX\DC2\EOT\144\a79\n\
    \\f\n\
    \\EOT\EOT?\STX\DC1\DC2\EOT\145\a\EOT#\n\
    \\r\n\
    \\ENQ\EOT?\STX\DC1\EOT\DC2\EOT\145\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\DC1\ACK\DC2\EOT\145\a\r\CAN\n\
    \\r\n\
    \\ENQ\EOT?\STX\DC1\SOH\DC2\EOT\145\a\EM\GS\n\
    \\r\n\
    \\ENQ\EOT?\STX\DC1\ETX\DC2\EOT\145\a \"\n\
    \\f\n\
    \\EOT\EOT?\STX\DC2\DC2\EOT\146\a\EOT#\n\
    \\r\n\
    \\ENQ\EOT?\STX\DC2\EOT\DC2\EOT\146\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\DC2\ACK\DC2\EOT\146\a\r\CAN\n\
    \\r\n\
    \\ENQ\EOT?\STX\DC2\SOH\DC2\EOT\146\a\EM\GS\n\
    \\r\n\
    \\ENQ\EOT?\STX\DC2\ETX\DC2\EOT\146\a \"\n\
    \\f\n\
    \\EOT\EOT?\STX\DC3\DC2\EOT\147\a\EOTY\n\
    \\r\n\
    \\ENQ\EOT?\STX\DC3\EOT\DC2\EOT\147\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\DC3\ACK\DC2\EOT\147\a\r3\n\
    \\r\n\
    \\ENQ\EOT?\STX\DC3\SOH\DC2\EOT\147\a4S\n\
    \\r\n\
    \\ENQ\EOT?\STX\DC3\ETX\DC2\EOT\147\aVX\n\
    \\f\n\
    \\EOT\EOT?\STX\DC4\DC2\EOT\149\a\EOTU\n\
    \\r\n\
    \\ENQ\EOT?\STX\DC4\EOT\DC2\EOT\149\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\DC4\ACK\DC2\EOT\149\a\r,\n\
    \\r\n\
    \\ENQ\EOT?\STX\DC4\SOH\DC2\EOT\149\a.?\n\
    \\r\n\
    \\ENQ\EOT?\STX\DC4\ETX\DC2\EOT\149\aRT\n\
    \\f\n\
    \\EOT\EOT?\STX\NAK\DC2\EOT\150\a\EOTU\n\
    \\r\n\
    \\ENQ\EOT?\STX\NAK\EOT\DC2\EOT\150\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\NAK\ACK\DC2\EOT\150\a\r4\n\
    \\r\n\
    \\ENQ\EOT?\STX\NAK\SOH\DC2\EOT\150\a5N\n\
    \\r\n\
    \\ENQ\EOT?\STX\NAK\ETX\DC2\EOT\150\aRT\n\
    \\f\n\
    \\EOT\EOT?\STX\SYN\DC2\EOT\152\a\EOTD\n\
    \\r\n\
    \\ENQ\EOT?\STX\SYN\EOT\DC2\EOT\152\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\SYN\ACK\DC2\EOT\152\a\r\US\n\
    \\r\n\
    \\ENQ\EOT?\STX\SYN\SOH\DC2\EOT\152\a +\n\
    \\r\n\
    \\ENQ\EOT?\STX\SYN\ETX\DC2\EOT\152\aAC\n\
    \\f\n\
    \\EOT\EOT?\STX\ETB\DC2\EOT\153\a\EOTD\n\
    \\r\n\
    \\ENQ\EOT?\STX\ETB\EOT\DC2\EOT\153\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\ETB\ACK\DC2\EOT\153\a\r'\n\
    \\r\n\
    \\ENQ\EOT?\STX\ETB\SOH\DC2\EOT\153\a(;\n\
    \\r\n\
    \\ENQ\EOT?\STX\ETB\ETX\DC2\EOT\153\aAC\n\
    \\f\n\
    \\EOT\EOT?\STX\CAN\DC2\EOT\155\a\EOTM\n\
    \\r\n\
    \\ENQ\EOT?\STX\CAN\EOT\DC2\EOT\155\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\CAN\ACK\DC2\EOT\155\a\r!\n\
    \\r\n\
    \\ENQ\EOT?\STX\CAN\SOH\DC2\EOT\155\a\"/\n\
    \\r\n\
    \\ENQ\EOT?\STX\CAN\ETX\DC2\EOT\155\aJL\n\
    \\f\n\
    \\EOT\EOT?\STX\EM\DC2\EOT\156\a\EOTM\n\
    \\r\n\
    \\ENQ\EOT?\STX\EM\EOT\DC2\EOT\156\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\EM\ACK\DC2\EOT\156\a\r)\n\
    \\r\n\
    \\ENQ\EOT?\STX\EM\SOH\DC2\EOT\156\a*?\n\
    \\r\n\
    \\ENQ\EOT?\STX\EM\ETX\DC2\EOT\156\aJL\n\
    \\f\n\
    \\EOT\EOT?\STX\SUB\DC2\EOT\158\a\EOT>\n\
    \\r\n\
    \\ENQ\EOT?\STX\SUB\EOT\DC2\EOT\158\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\SUB\ACK\DC2\EOT\158\a\r%\n\
    \\r\n\
    \\ENQ\EOT?\STX\SUB\SOH\DC2\EOT\158\a&7\n\
    \\r\n\
    \\ENQ\EOT?\STX\SUB\ETX\DC2\EOT\158\a;=\n\
    \\f\n\
    \\EOT\EOT?\STX\ESC\DC2\EOT\160\a\EOT#\n\
    \\r\n\
    \\ENQ\EOT?\STX\ESC\EOT\DC2\EOT\160\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\ESC\ACK\DC2\EOT\160\a\r\CAN\n\
    \\r\n\
    \\ENQ\EOT?\STX\ESC\SOH\DC2\EOT\160\a\EM\GS\n\
    \\r\n\
    \\ENQ\EOT?\STX\ESC\ETX\DC2\EOT\160\a \"\n\
    \\f\n\
    \\EOT\EOT?\STX\FS\DC2\EOT\162\a\EOT;\n\
    \\r\n\
    \\ENQ\EOT?\STX\FS\EOT\DC2\EOT\162\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\FS\ACK\DC2\EOT\162\a\r$\n\
    \\r\n\
    \\ENQ\EOT?\STX\FS\SOH\DC2\EOT\162\a%5\n\
    \\r\n\
    \\ENQ\EOT?\STX\FS\ETX\DC2\EOT\162\a8:\n\
    \\f\n\
    \\EOT\EOT?\STX\GS\DC2\EOT\163\a\EOTK\n\
    \\r\n\
    \\ENQ\EOT?\STX\GS\EOT\DC2\EOT\163\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\GS\ACK\DC2\EOT\163\a\r,\n\
    \\r\n\
    \\ENQ\EOT?\STX\GS\SOH\DC2\EOT\163\a-E\n\
    \\r\n\
    \\ENQ\EOT?\STX\GS\ETX\DC2\EOT\163\aHJ\n\
    \\f\n\
    \\EOT\EOT?\STX\RS\DC2\EOT\165\a\EOTE\n\
    \\r\n\
    \\ENQ\EOT?\STX\RS\EOT\DC2\EOT\165\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\RS\ACK\DC2\EOT\165\a\r(\n\
    \\r\n\
    \\ENQ\EOT?\STX\RS\SOH\DC2\EOT\165\a)?\n\
    \\r\n\
    \\ENQ\EOT?\STX\RS\ETX\DC2\EOT\165\aBD\n\
    \\f\n\
    \\EOT\EOT?\STX\US\DC2\EOT\167\a\EOTC\n\
    \\r\n\
    \\ENQ\EOT?\STX\US\EOT\DC2\EOT\167\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\US\ACK\DC2\EOT\167\a\r(\n\
    \\r\n\
    \\ENQ\EOT?\STX\US\SOH\DC2\EOT\167\a)=\n\
    \\r\n\
    \\ENQ\EOT?\STX\US\ETX\DC2\EOT\167\a@B\n\
    \\f\n\
    \\EOT\EOT?\STX \DC2\EOT\168\a\EOTS\n\
    \\r\n\
    \\ENQ\EOT?\STX \EOT\DC2\EOT\168\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX \ACK\DC2\EOT\168\a\r0\n\
    \\r\n\
    \\ENQ\EOT?\STX \SOH\DC2\EOT\168\a1M\n\
    \\r\n\
    \\ENQ\EOT?\STX \ETX\DC2\EOT\168\aPR\n\
    \\f\n\
    \\EOT\EOT?\STX!\DC2\EOT\170\a\EOT-\n\
    \\r\n\
    \\ENQ\EOT?\STX!\EOT\DC2\EOT\170\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX!\ACK\DC2\EOT\170\a\r\GS\n\
    \\r\n\
    \\ENQ\EOT?\STX!\SOH\DC2\EOT\170\a\RS'\n\
    \\r\n\
    \\ENQ\EOT?\STX!\ETX\DC2\EOT\170\a*,\n\
    \\f\n\
    \\EOT\EOT?\STX\"\DC2\EOT\171\a\EOT=\n\
    \\r\n\
    \\ENQ\EOT?\STX\"\EOT\DC2\EOT\171\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\"\ACK\DC2\EOT\171\a\r%\n\
    \\r\n\
    \\ENQ\EOT?\STX\"\SOH\DC2\EOT\171\a&7\n\
    \\r\n\
    \\ENQ\EOT?\STX\"\ETX\DC2\EOT\171\a:<\n\
    \\f\n\
    \\EOT\EOT?\STX#\DC2\EOT\173\a\EOT5\n\
    \\r\n\
    \\ENQ\EOT?\STX#\EOT\DC2\EOT\173\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX#\ACK\DC2\EOT\173\a\r!\n\
    \\r\n\
    \\ENQ\EOT?\STX#\SOH\DC2\EOT\173\a\"/\n\
    \\r\n\
    \\ENQ\EOT?\STX#\ETX\DC2\EOT\173\a24\n\
    \\f\n\
    \\EOT\EOT?\STX$\DC2\EOT\174\a\EOT3\n\
    \\r\n\
    \\ENQ\EOT?\STX$\EOT\DC2\EOT\174\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX$\ACK\DC2\EOT\174\a\r \n\
    \\r\n\
    \\ENQ\EOT?\STX$\SOH\DC2\EOT\174\a!-\n\
    \\r\n\
    \\ENQ\EOT?\STX$\ETX\DC2\EOT\174\a02\n\
    \\f\n\
    \\EOT\EOT?\STX%\DC2\EOT\176\a\EOT1\n\
    \\r\n\
    \\ENQ\EOT?\STX%\EOT\DC2\EOT\176\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX%\ACK\DC2\EOT\176\a\r\US\n\
    \\r\n\
    \\ENQ\EOT?\STX%\SOH\DC2\EOT\176\a +\n\
    \\r\n\
    \\ENQ\EOT?\STX%\ETX\DC2\EOT\176\a.0\n\
    \\f\n\
    \\EOT\EOT?\STX&\DC2\EOT\178\a\EOT=\n\
    \\r\n\
    \\ENQ\EOT?\STX&\EOT\DC2\EOT\178\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX&\ACK\DC2\EOT\178\a\r%\n\
    \\r\n\
    \\ENQ\EOT?\STX&\SOH\DC2\EOT\178\a&7\n\
    \\r\n\
    \\ENQ\EOT?\STX&\ETX\DC2\EOT\178\a:<\n\
    \\f\n\
    \\EOT\EOT?\STX'\DC2\EOT\179\a\EOTM\n\
    \\r\n\
    \\ENQ\EOT?\STX'\EOT\DC2\EOT\179\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX'\ACK\DC2\EOT\179\a\r-\n\
    \\r\n\
    \\ENQ\EOT?\STX'\SOH\DC2\EOT\179\a.G\n\
    \\r\n\
    \\ENQ\EOT?\STX'\ETX\DC2\EOT\179\aJL\n\
    \#\n\
    \\EOT\EOT?\STX(\DC2\EOT\182\a\EOT'\SUB\NAK transaction related\n\
    \\n\
    \\r\n\
    \\ENQ\EOT?\STX(\EOT\DC2\EOT\182\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX(\ACK\DC2\EOT\182\a\r\SUB\n\
    \\r\n\
    \\ENQ\EOT?\STX(\SOH\DC2\EOT\182\a\ESC!\n\
    \\r\n\
    \\ENQ\EOT?\STX(\ETX\DC2\EOT\182\a$&\n\
    \\f\n\
    \\EOT\EOT?\STX)\DC2\EOT\183\a\EOT7\n\
    \\r\n\
    \\ENQ\EOT?\STX)\EOT\DC2\EOT\183\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX)\ACK\DC2\EOT\183\a\r\"\n\
    \\r\n\
    \\ENQ\EOT?\STX)\SOH\DC2\EOT\183\a#1\n\
    \\r\n\
    \\ENQ\EOT?\STX)\ETX\DC2\EOT\183\a46\n\
    \\f\n\
    \\EOT\EOT?\STX*\DC2\EOT\184\a\EOT<\n\
    \\r\n\
    \\ENQ\EOT?\STX*\EOT\DC2\EOT\184\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX*\ACK\DC2\EOT\184\a\r%\n\
    \\r\n\
    \\ENQ\EOT?\STX*\SOH\DC2\EOT\184\a&7\n\
    \\r\n\
    \\ENQ\EOT?\STX*\ETX\DC2\EOT\184\a9;\n\
    \\f\n\
    \\EOT\EOT?\STX+\DC2\EOT\185\a\EOTM\n\
    \\r\n\
    \\ENQ\EOT?\STX+\EOT\DC2\EOT\185\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX+\ACK\DC2\EOT\185\a\r-\n\
    \\r\n\
    \\ENQ\EOT?\STX+\SOH\DC2\EOT\185\a.G\n\
    \\r\n\
    \\ENQ\EOT?\STX+\ETX\DC2\EOT\185\aJL\n\
    \\f\n\
    \\EOT\EOT?\STX,\DC2\EOT\186\a\EOTC\n\
    \\r\n\
    \\ENQ\EOT?\STX,\EOT\DC2\EOT\186\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX,\ACK\DC2\EOT\186\a\r(\n\
    \\r\n\
    \\ENQ\EOT?\STX,\SOH\DC2\EOT\186\a)=\n\
    \\r\n\
    \\ENQ\EOT?\STX,\ETX\DC2\EOT\186\a@B\n\
    \\f\n\
    \\EOT\EOT?\STX-\DC2\EOT\187\a\EOTS\n\
    \\r\n\
    \\ENQ\EOT?\STX-\EOT\DC2\EOT\187\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX-\ACK\DC2\EOT\187\a\r0\n\
    \\r\n\
    \\ENQ\EOT?\STX-\SOH\DC2\EOT\187\a1M\n\
    \\r\n\
    \\ENQ\EOT?\STX-\ETX\DC2\EOT\187\aPR\n\
    \\f\n\
    \\EOT\EOT?\STX.\DC2\EOT\188\a\EOT'\n\
    \\r\n\
    \\ENQ\EOT?\STX.\EOT\DC2\EOT\188\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX.\ACK\DC2\EOT\188\a\r\SUB\n\
    \\r\n\
    \\ENQ\EOT?\STX.\SOH\DC2\EOT\188\a\ESC!\n\
    \\r\n\
    \\ENQ\EOT?\STX.\ETX\DC2\EOT\188\a$&\n\
    \\f\n\
    \\EOT\EOT?\STX/\DC2\EOT\189\a\EOT7\n\
    \\r\n\
    \\ENQ\EOT?\STX/\EOT\DC2\EOT\189\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX/\ACK\DC2\EOT\189\a\r\"\n\
    \\r\n\
    \\ENQ\EOT?\STX/\SOH\DC2\EOT\189\a#1\n\
    \\r\n\
    \\ENQ\EOT?\STX/\ETX\DC2\EOT\189\a46\n\
    \\f\n\
    \\EOT\EOT?\STX0\DC2\EOT\190\a\EOT=\n\
    \\r\n\
    \\ENQ\EOT?\STX0\EOT\DC2\EOT\190\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX0\ACK\DC2\EOT\190\a\r%\n\
    \\r\n\
    \\ENQ\EOT?\STX0\SOH\DC2\EOT\190\a&7\n\
    \\r\n\
    \\ENQ\EOT?\STX0\ETX\DC2\EOT\190\a:<\n\
    \\f\n\
    \\EOT\EOT?\STX1\DC2\EOT\191\a\EOTM\n\
    \\r\n\
    \\ENQ\EOT?\STX1\EOT\DC2\EOT\191\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX1\ACK\DC2\EOT\191\a\r-\n\
    \\r\n\
    \\ENQ\EOT?\STX1\SOH\DC2\EOT\191\a.G\n\
    \\r\n\
    \\ENQ\EOT?\STX1\ETX\DC2\EOT\191\aJL\n\
    \\f\n\
    \\EOT\EOT?\STX2\DC2\EOT\192\a\EOTC\n\
    \\r\n\
    \\ENQ\EOT?\STX2\EOT\DC2\EOT\192\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX2\ACK\DC2\EOT\192\a\r(\n\
    \\r\n\
    \\ENQ\EOT?\STX2\SOH\DC2\EOT\192\a)=\n\
    \\r\n\
    \\ENQ\EOT?\STX2\ETX\DC2\EOT\192\a@B\n\
    \\f\n\
    \\EOT\EOT?\STX3\DC2\EOT\193\a\EOTS\n\
    \\r\n\
    \\ENQ\EOT?\STX3\EOT\DC2\EOT\193\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX3\ACK\DC2\EOT\193\a\r0\n\
    \\r\n\
    \\ENQ\EOT?\STX3\SOH\DC2\EOT\193\a1M\n\
    \\r\n\
    \\ENQ\EOT?\STX3\ETX\DC2\EOT\193\aPR"